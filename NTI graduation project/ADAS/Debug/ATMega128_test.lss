
ATMega128_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  000039dc  00003a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800288  00800288  00003bf8  2**0
                  ALLOC
  3 .stab         00004d64  00000000  00000000  00003bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003471  00000000  00000000  0000895c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000bfad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000c1df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000ea70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00011478  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000310  00000000  00000000  00011678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00011988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000123de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_11>
      30:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__vector_12>
      34:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_13>
      38:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_14>
      3c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_15>
      40:	0c 94 17 0f 	jmp	0x1e2e	; 0x1e2e <__vector_16>
      44:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_17>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ed       	ldi	r30, 0xDC	; 220
      a0:	f9 e3       	ldi	r31, 0x39	; 57
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 38       	cpi	r26, 0x88	; 136
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a8 e8       	ldi	r26, 0x88	; 136
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3e       	cpi	r26, 0xE0	; 224
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <main>
      c6:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__fixunssfsi>:
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	7b 01       	movw	r14, r22
      d8:	8c 01       	movw	r16, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	5f e4       	ldi	r21, 0x4F	; 79
      e2:	0e 94 13 04 	call	0x826	; 0x826 <__gesf2>
      e6:	88 23       	and	r24, r24
      e8:	8c f0       	brlt	.+34     	; 0x10c <__fixunssfsi+0x3e>
      ea:	c8 01       	movw	r24, r16
      ec:	b7 01       	movw	r22, r14
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	5f e4       	ldi	r21, 0x4F	; 79
      f6:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
      fa:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixsfsi>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	20 50       	subi	r18, 0x00	; 0
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	50 48       	sbci	r21, 0x80	; 128
     10a:	06 c0       	rjmp	.+12     	; 0x118 <__fixunssfsi+0x4a>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	0e 94 01 05 	call	0xa02	; 0xa02 <__fixsfsi>
     114:	9b 01       	movw	r18, r22
     116:	ac 01       	movw	r20, r24
     118:	b9 01       	movw	r22, r18
     11a:	ca 01       	movw	r24, r20
     11c:	1f 91       	pop	r17
     11e:	0f 91       	pop	r16
     120:	ff 90       	pop	r15
     122:	ef 90       	pop	r14
     124:	08 95       	ret

00000126 <_fpadd_parts>:
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e9 e9       	ldi	r30, 0x99	; 153
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__prologue_saves__>
     132:	dc 01       	movw	r26, r24
     134:	2b 01       	movw	r4, r22
     136:	fa 01       	movw	r30, r20
     138:	9c 91       	ld	r25, X
     13a:	92 30       	cpi	r25, 0x02	; 2
     13c:	08 f4       	brcc	.+2      	; 0x140 <_fpadd_parts+0x1a>
     13e:	39 c1       	rjmp	.+626    	; 0x3b2 <_fpadd_parts+0x28c>
     140:	eb 01       	movw	r28, r22
     142:	88 81       	ld	r24, Y
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	08 f4       	brcc	.+2      	; 0x14a <_fpadd_parts+0x24>
     148:	33 c1       	rjmp	.+614    	; 0x3b0 <_fpadd_parts+0x28a>
     14a:	94 30       	cpi	r25, 0x04	; 4
     14c:	69 f4       	brne	.+26     	; 0x168 <_fpadd_parts+0x42>
     14e:	84 30       	cpi	r24, 0x04	; 4
     150:	09 f0       	breq	.+2      	; 0x154 <_fpadd_parts+0x2e>
     152:	2f c1       	rjmp	.+606    	; 0x3b2 <_fpadd_parts+0x28c>
     154:	11 96       	adiw	r26, 0x01	; 1
     156:	9c 91       	ld	r25, X
     158:	11 97       	sbiw	r26, 0x01	; 1
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	98 17       	cp	r25, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <_fpadd_parts+0x3c>
     160:	28 c1       	rjmp	.+592    	; 0x3b2 <_fpadd_parts+0x28c>
     162:	a0 e0       	ldi	r26, 0x00	; 0
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	25 c1       	rjmp	.+586    	; 0x3b2 <_fpadd_parts+0x28c>
     168:	84 30       	cpi	r24, 0x04	; 4
     16a:	09 f4       	brne	.+2      	; 0x16e <_fpadd_parts+0x48>
     16c:	21 c1       	rjmp	.+578    	; 0x3b0 <_fpadd_parts+0x28a>
     16e:	82 30       	cpi	r24, 0x02	; 2
     170:	a9 f4       	brne	.+42     	; 0x19c <_fpadd_parts+0x76>
     172:	92 30       	cpi	r25, 0x02	; 2
     174:	09 f0       	breq	.+2      	; 0x178 <_fpadd_parts+0x52>
     176:	1d c1       	rjmp	.+570    	; 0x3b2 <_fpadd_parts+0x28c>
     178:	9a 01       	movw	r18, r20
     17a:	ad 01       	movw	r20, r26
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	ea 01       	movw	r28, r20
     180:	09 90       	ld	r0, Y+
     182:	ae 01       	movw	r20, r28
     184:	e9 01       	movw	r28, r18
     186:	09 92       	st	Y+, r0
     188:	9e 01       	movw	r18, r28
     18a:	81 50       	subi	r24, 0x01	; 1
     18c:	c1 f7       	brne	.-16     	; 0x17e <_fpadd_parts+0x58>
     18e:	e2 01       	movw	r28, r4
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	11 96       	adiw	r26, 0x01	; 1
     194:	9c 91       	ld	r25, X
     196:	89 23       	and	r24, r25
     198:	81 83       	std	Z+1, r24	; 0x01
     19a:	08 c1       	rjmp	.+528    	; 0x3ac <_fpadd_parts+0x286>
     19c:	92 30       	cpi	r25, 0x02	; 2
     19e:	09 f4       	brne	.+2      	; 0x1a2 <_fpadd_parts+0x7c>
     1a0:	07 c1       	rjmp	.+526    	; 0x3b0 <_fpadd_parts+0x28a>
     1a2:	12 96       	adiw	r26, 0x02	; 2
     1a4:	2d 90       	ld	r2, X+
     1a6:	3c 90       	ld	r3, X
     1a8:	13 97       	sbiw	r26, 0x03	; 3
     1aa:	eb 01       	movw	r28, r22
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	14 96       	adiw	r26, 0x04	; 4
     1b2:	ad 90       	ld	r10, X+
     1b4:	bd 90       	ld	r11, X+
     1b6:	cd 90       	ld	r12, X+
     1b8:	dc 90       	ld	r13, X
     1ba:	17 97       	sbiw	r26, 0x07	; 7
     1bc:	ec 80       	ldd	r14, Y+4	; 0x04
     1be:	fd 80       	ldd	r15, Y+5	; 0x05
     1c0:	0e 81       	ldd	r16, Y+6	; 0x06
     1c2:	1f 81       	ldd	r17, Y+7	; 0x07
     1c4:	91 01       	movw	r18, r2
     1c6:	28 1b       	sub	r18, r24
     1c8:	39 0b       	sbc	r19, r25
     1ca:	b9 01       	movw	r22, r18
     1cc:	37 ff       	sbrs	r19, 7
     1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <_fpadd_parts+0xb2>
     1d0:	66 27       	eor	r22, r22
     1d2:	77 27       	eor	r23, r23
     1d4:	62 1b       	sub	r22, r18
     1d6:	73 0b       	sbc	r23, r19
     1d8:	60 32       	cpi	r22, 0x20	; 32
     1da:	71 05       	cpc	r23, r1
     1dc:	0c f0       	brlt	.+2      	; 0x1e0 <_fpadd_parts+0xba>
     1de:	61 c0       	rjmp	.+194    	; 0x2a2 <_fpadd_parts+0x17c>
     1e0:	12 16       	cp	r1, r18
     1e2:	13 06       	cpc	r1, r19
     1e4:	6c f5       	brge	.+90     	; 0x240 <_fpadd_parts+0x11a>
     1e6:	37 01       	movw	r6, r14
     1e8:	48 01       	movw	r8, r16
     1ea:	06 2e       	mov	r0, r22
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <_fpadd_parts+0xd0>
     1ee:	96 94       	lsr	r9
     1f0:	87 94       	ror	r8
     1f2:	77 94       	ror	r7
     1f4:	67 94       	ror	r6
     1f6:	0a 94       	dec	r0
     1f8:	d2 f7       	brpl	.-12     	; 0x1ee <_fpadd_parts+0xc8>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0xe6>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	44 1f       	adc	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	6a 95       	dec	r22
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0xde>
     210:	21 50       	subi	r18, 0x01	; 1
     212:	30 40       	sbci	r19, 0x00	; 0
     214:	40 40       	sbci	r20, 0x00	; 0
     216:	50 40       	sbci	r21, 0x00	; 0
     218:	2e 21       	and	r18, r14
     21a:	3f 21       	and	r19, r15
     21c:	40 23       	and	r20, r16
     21e:	51 23       	and	r21, r17
     220:	21 15       	cp	r18, r1
     222:	31 05       	cpc	r19, r1
     224:	41 05       	cpc	r20, r1
     226:	51 05       	cpc	r21, r1
     228:	21 f0       	breq	.+8      	; 0x232 <_fpadd_parts+0x10c>
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	79 01       	movw	r14, r18
     234:	8a 01       	movw	r16, r20
     236:	e6 28       	or	r14, r6
     238:	f7 28       	or	r15, r7
     23a:	08 29       	or	r16, r8
     23c:	19 29       	or	r17, r9
     23e:	3c c0       	rjmp	.+120    	; 0x2b8 <_fpadd_parts+0x192>
     240:	23 2b       	or	r18, r19
     242:	d1 f1       	breq	.+116    	; 0x2b8 <_fpadd_parts+0x192>
     244:	26 0e       	add	r2, r22
     246:	37 1e       	adc	r3, r23
     248:	35 01       	movw	r6, r10
     24a:	46 01       	movw	r8, r12
     24c:	06 2e       	mov	r0, r22
     24e:	04 c0       	rjmp	.+8      	; 0x258 <_fpadd_parts+0x132>
     250:	96 94       	lsr	r9
     252:	87 94       	ror	r8
     254:	77 94       	ror	r7
     256:	67 94       	ror	r6
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <_fpadd_parts+0x12a>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <_fpadd_parts+0x148>
     266:	22 0f       	add	r18, r18
     268:	33 1f       	adc	r19, r19
     26a:	44 1f       	adc	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	6a 95       	dec	r22
     270:	d2 f7       	brpl	.-12     	; 0x266 <_fpadd_parts+0x140>
     272:	21 50       	subi	r18, 0x01	; 1
     274:	30 40       	sbci	r19, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	50 40       	sbci	r21, 0x00	; 0
     27a:	2a 21       	and	r18, r10
     27c:	3b 21       	and	r19, r11
     27e:	4c 21       	and	r20, r12
     280:	5d 21       	and	r21, r13
     282:	21 15       	cp	r18, r1
     284:	31 05       	cpc	r19, r1
     286:	41 05       	cpc	r20, r1
     288:	51 05       	cpc	r21, r1
     28a:	21 f0       	breq	.+8      	; 0x294 <_fpadd_parts+0x16e>
     28c:	21 e0       	ldi	r18, 0x01	; 1
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	59 01       	movw	r10, r18
     296:	6a 01       	movw	r12, r20
     298:	a6 28       	or	r10, r6
     29a:	b7 28       	or	r11, r7
     29c:	c8 28       	or	r12, r8
     29e:	d9 28       	or	r13, r9
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <_fpadd_parts+0x192>
     2a2:	82 15       	cp	r24, r2
     2a4:	93 05       	cpc	r25, r3
     2a6:	2c f0       	brlt	.+10     	; 0x2b2 <_fpadd_parts+0x18c>
     2a8:	1c 01       	movw	r2, r24
     2aa:	aa 24       	eor	r10, r10
     2ac:	bb 24       	eor	r11, r11
     2ae:	65 01       	movw	r12, r10
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <_fpadd_parts+0x192>
     2b2:	ee 24       	eor	r14, r14
     2b4:	ff 24       	eor	r15, r15
     2b6:	87 01       	movw	r16, r14
     2b8:	11 96       	adiw	r26, 0x01	; 1
     2ba:	9c 91       	ld	r25, X
     2bc:	d2 01       	movw	r26, r4
     2be:	11 96       	adiw	r26, 0x01	; 1
     2c0:	8c 91       	ld	r24, X
     2c2:	98 17       	cp	r25, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_fpadd_parts+0x1a2>
     2c6:	45 c0       	rjmp	.+138    	; 0x352 <_fpadd_parts+0x22c>
     2c8:	99 23       	and	r25, r25
     2ca:	39 f0       	breq	.+14     	; 0x2da <_fpadd_parts+0x1b4>
     2cc:	a8 01       	movw	r20, r16
     2ce:	97 01       	movw	r18, r14
     2d0:	2a 19       	sub	r18, r10
     2d2:	3b 09       	sbc	r19, r11
     2d4:	4c 09       	sbc	r20, r12
     2d6:	5d 09       	sbc	r21, r13
     2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <_fpadd_parts+0x1c0>
     2da:	a6 01       	movw	r20, r12
     2dc:	95 01       	movw	r18, r10
     2de:	2e 19       	sub	r18, r14
     2e0:	3f 09       	sbc	r19, r15
     2e2:	40 0b       	sbc	r20, r16
     2e4:	51 0b       	sbc	r21, r17
     2e6:	57 fd       	sbrc	r21, 7
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_fpadd_parts+0x1d4>
     2ea:	11 82       	std	Z+1, r1	; 0x01
     2ec:	33 82       	std	Z+3, r3	; 0x03
     2ee:	22 82       	std	Z+2, r2	; 0x02
     2f0:	24 83       	std	Z+4, r18	; 0x04
     2f2:	35 83       	std	Z+5, r19	; 0x05
     2f4:	46 83       	std	Z+6, r20	; 0x06
     2f6:	57 83       	std	Z+7, r21	; 0x07
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <_fpadd_parts+0x20e>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	33 82       	std	Z+3, r3	; 0x03
     300:	22 82       	std	Z+2, r2	; 0x02
     302:	88 27       	eor	r24, r24
     304:	99 27       	eor	r25, r25
     306:	dc 01       	movw	r26, r24
     308:	82 1b       	sub	r24, r18
     30a:	93 0b       	sbc	r25, r19
     30c:	a4 0b       	sbc	r26, r20
     30e:	b5 0b       	sbc	r27, r21
     310:	84 83       	std	Z+4, r24	; 0x04
     312:	95 83       	std	Z+5, r25	; 0x05
     314:	a6 83       	std	Z+6, r26	; 0x06
     316:	b7 83       	std	Z+7, r27	; 0x07
     318:	0d c0       	rjmp	.+26     	; 0x334 <_fpadd_parts+0x20e>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	24 83       	std	Z+4, r18	; 0x04
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	46 83       	std	Z+6, r20	; 0x06
     328:	57 83       	std	Z+7, r21	; 0x07
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
     334:	24 81       	ldd	r18, Z+4	; 0x04
     336:	35 81       	ldd	r19, Z+5	; 0x05
     338:	46 81       	ldd	r20, Z+6	; 0x06
     33a:	57 81       	ldd	r21, Z+7	; 0x07
     33c:	da 01       	movw	r26, r20
     33e:	c9 01       	movw	r24, r18
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	9f 4f       	sbci	r25, 0xFF	; 255
     34a:	af 4f       	sbci	r26, 0xFF	; 255
     34c:	bf 43       	sbci	r27, 0x3F	; 63
     34e:	28 f3       	brcs	.-54     	; 0x31a <_fpadd_parts+0x1f4>
     350:	0b c0       	rjmp	.+22     	; 0x368 <_fpadd_parts+0x242>
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	33 82       	std	Z+3, r3	; 0x03
     356:	22 82       	std	Z+2, r2	; 0x02
     358:	ea 0c       	add	r14, r10
     35a:	fb 1c       	adc	r15, r11
     35c:	0c 1d       	adc	r16, r12
     35e:	1d 1d       	adc	r17, r13
     360:	e4 82       	std	Z+4, r14	; 0x04
     362:	f5 82       	std	Z+5, r15	; 0x05
     364:	06 83       	std	Z+6, r16	; 0x06
     366:	17 83       	std	Z+7, r17	; 0x07
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	80 83       	st	Z, r24
     36c:	24 81       	ldd	r18, Z+4	; 0x04
     36e:	35 81       	ldd	r19, Z+5	; 0x05
     370:	46 81       	ldd	r20, Z+6	; 0x06
     372:	57 81       	ldd	r21, Z+7	; 0x07
     374:	57 ff       	sbrs	r21, 7
     376:	1a c0       	rjmp	.+52     	; 0x3ac <_fpadd_parts+0x286>
     378:	c9 01       	movw	r24, r18
     37a:	aa 27       	eor	r26, r26
     37c:	97 fd       	sbrc	r25, 7
     37e:	a0 95       	com	r26
     380:	ba 2f       	mov	r27, r26
     382:	81 70       	andi	r24, 0x01	; 1
     384:	90 70       	andi	r25, 0x00	; 0
     386:	a0 70       	andi	r26, 0x00	; 0
     388:	b0 70       	andi	r27, 0x00	; 0
     38a:	56 95       	lsr	r21
     38c:	47 95       	ror	r20
     38e:	37 95       	ror	r19
     390:	27 95       	ror	r18
     392:	82 2b       	or	r24, r18
     394:	93 2b       	or	r25, r19
     396:	a4 2b       	or	r26, r20
     398:	b5 2b       	or	r27, r21
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	a6 83       	std	Z+6, r26	; 0x06
     3a0:	b7 83       	std	Z+7, r27	; 0x07
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	93 83       	std	Z+3, r25	; 0x03
     3aa:	82 83       	std	Z+2, r24	; 0x02
     3ac:	df 01       	movw	r26, r30
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <_fpadd_parts+0x28c>
     3b0:	d2 01       	movw	r26, r4
     3b2:	cd 01       	movw	r24, r26
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__epilogue_restores__>

000003be <__subsf3>:
     3be:	a0 e2       	ldi	r26, 0x20	; 32
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	e5 ee       	ldi	r30, 0xE5	; 229
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     3ca:	69 83       	std	Y+1, r22	; 0x01
     3cc:	7a 83       	std	Y+2, r23	; 0x02
     3ce:	8b 83       	std	Y+3, r24	; 0x03
     3d0:	9c 83       	std	Y+4, r25	; 0x04
     3d2:	2d 83       	std	Y+5, r18	; 0x05
     3d4:	3e 83       	std	Y+6, r19	; 0x06
     3d6:	4f 83       	std	Y+7, r20	; 0x07
     3d8:	58 87       	std	Y+8, r21	; 0x08
     3da:	e9 e0       	ldi	r30, 0x09	; 9
     3dc:	ee 2e       	mov	r14, r30
     3de:	f1 2c       	mov	r15, r1
     3e0:	ec 0e       	add	r14, r28
     3e2:	fd 1e       	adc	r15, r29
     3e4:	ce 01       	movw	r24, r28
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     3ee:	8e 01       	movw	r16, r28
     3f0:	0f 5e       	subi	r16, 0xEF	; 239
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	ce 01       	movw	r24, r28
     3f6:	05 96       	adiw	r24, 0x05	; 5
     3f8:	b8 01       	movw	r22, r16
     3fa:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     3fe:	8a 89       	ldd	r24, Y+18	; 0x12
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	89 27       	eor	r24, r25
     404:	8a 8b       	std	Y+18, r24	; 0x12
     406:	c7 01       	movw	r24, r14
     408:	b8 01       	movw	r22, r16
     40a:	ae 01       	movw	r20, r28
     40c:	47 5e       	subi	r20, 0xE7	; 231
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     414:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     418:	a0 96       	adiw	r28, 0x20	; 32
     41a:	e6 e0       	ldi	r30, 0x06	; 6
     41c:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

00000420 <__addsf3>:
     420:	a0 e2       	ldi	r26, 0x20	; 32
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e6 e1       	ldi	r30, 0x16	; 22
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     42c:	69 83       	std	Y+1, r22	; 0x01
     42e:	7a 83       	std	Y+2, r23	; 0x02
     430:	8b 83       	std	Y+3, r24	; 0x03
     432:	9c 83       	std	Y+4, r25	; 0x04
     434:	2d 83       	std	Y+5, r18	; 0x05
     436:	3e 83       	std	Y+6, r19	; 0x06
     438:	4f 83       	std	Y+7, r20	; 0x07
     43a:	58 87       	std	Y+8, r21	; 0x08
     43c:	f9 e0       	ldi	r31, 0x09	; 9
     43e:	ef 2e       	mov	r14, r31
     440:	f1 2c       	mov	r15, r1
     442:	ec 0e       	add	r14, r28
     444:	fd 1e       	adc	r15, r29
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	b7 01       	movw	r22, r14
     44c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     450:	8e 01       	movw	r16, r28
     452:	0f 5e       	subi	r16, 0xEF	; 239
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	ce 01       	movw	r24, r28
     458:	05 96       	adiw	r24, 0x05	; 5
     45a:	b8 01       	movw	r22, r16
     45c:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     460:	c7 01       	movw	r24, r14
     462:	b8 01       	movw	r22, r16
     464:	ae 01       	movw	r20, r28
     466:	47 5e       	subi	r20, 0xE7	; 231
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	0e 94 93 00 	call	0x126	; 0x126 <_fpadd_parts>
     46e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     472:	a0 96       	adiw	r28, 0x20	; 32
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

0000047a <__mulsf3>:
     47a:	a0 e2       	ldi	r26, 0x20	; 32
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e3 e4       	ldi	r30, 0x43	; 67
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__prologue_saves__>
     486:	69 83       	std	Y+1, r22	; 0x01
     488:	7a 83       	std	Y+2, r23	; 0x02
     48a:	8b 83       	std	Y+3, r24	; 0x03
     48c:	9c 83       	std	Y+4, r25	; 0x04
     48e:	2d 83       	std	Y+5, r18	; 0x05
     490:	3e 83       	std	Y+6, r19	; 0x06
     492:	4f 83       	std	Y+7, r20	; 0x07
     494:	58 87       	std	Y+8, r21	; 0x08
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	be 01       	movw	r22, r28
     49c:	67 5f       	subi	r22, 0xF7	; 247
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     4a4:	ce 01       	movw	r24, r28
     4a6:	05 96       	adiw	r24, 0x05	; 5
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5e       	subi	r22, 0xEF	; 239
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     4b2:	99 85       	ldd	r25, Y+9	; 0x09
     4b4:	92 30       	cpi	r25, 0x02	; 2
     4b6:	88 f0       	brcs	.+34     	; 0x4da <__mulsf3+0x60>
     4b8:	89 89       	ldd	r24, Y+17	; 0x11
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	c8 f0       	brcs	.+50     	; 0x4f0 <__mulsf3+0x76>
     4be:	94 30       	cpi	r25, 0x04	; 4
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <__mulsf3+0x4e>
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	51 f4       	brne	.+20     	; 0x4da <__mulsf3+0x60>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__mulsf3+0x56>
     4c8:	84 30       	cpi	r24, 0x04	; 4
     4ca:	29 f4       	brne	.+10     	; 0x4d6 <__mulsf3+0x5c>
     4cc:	92 30       	cpi	r25, 0x02	; 2
     4ce:	81 f4       	brne	.+32     	; 0x4f0 <__mulsf3+0x76>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__mulsf3+0x1e8>
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	49 f4       	brne	.+18     	; 0x4ec <__mulsf3+0x72>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	8a 89       	ldd	r24, Y+18	; 0x12
     4e0:	98 13       	cpse	r25, r24
     4e2:	21 e0       	ldi	r18, 0x01	; 1
     4e4:	2a 87       	std	Y+10, r18	; 0x0a
     4e6:	ce 01       	movw	r24, r28
     4e8:	09 96       	adiw	r24, 0x09	; 9
     4ea:	bb c0       	rjmp	.+374    	; 0x662 <__mulsf3+0x1e8>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	49 f4       	brne	.+18     	; 0x502 <__mulsf3+0x88>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	98 13       	cpse	r25, r24
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	2a 8b       	std	Y+18, r18	; 0x12
     4fc:	ce 01       	movw	r24, r28
     4fe:	41 96       	adiw	r24, 0x11	; 17
     500:	b0 c0       	rjmp	.+352    	; 0x662 <__mulsf3+0x1e8>
     502:	2d 84       	ldd	r2, Y+13	; 0x0d
     504:	3e 84       	ldd	r3, Y+14	; 0x0e
     506:	4f 84       	ldd	r4, Y+15	; 0x0f
     508:	58 88       	ldd	r5, Y+16	; 0x10
     50a:	6d 88       	ldd	r6, Y+21	; 0x15
     50c:	7e 88       	ldd	r7, Y+22	; 0x16
     50e:	8f 88       	ldd	r8, Y+23	; 0x17
     510:	98 8c       	ldd	r9, Y+24	; 0x18
     512:	ee 24       	eor	r14, r14
     514:	ff 24       	eor	r15, r15
     516:	87 01       	movw	r16, r14
     518:	aa 24       	eor	r10, r10
     51a:	bb 24       	eor	r11, r11
     51c:	65 01       	movw	r12, r10
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	e0 e0       	ldi	r30, 0x00	; 0
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	c1 01       	movw	r24, r2
     52c:	81 70       	andi	r24, 0x01	; 1
     52e:	90 70       	andi	r25, 0x00	; 0
     530:	89 2b       	or	r24, r25
     532:	e9 f0       	breq	.+58     	; 0x56e <__mulsf3+0xf4>
     534:	e6 0c       	add	r14, r6
     536:	f7 1c       	adc	r15, r7
     538:	08 1d       	adc	r16, r8
     53a:	19 1d       	adc	r17, r9
     53c:	9a 01       	movw	r18, r20
     53e:	ab 01       	movw	r20, r22
     540:	2a 0d       	add	r18, r10
     542:	3b 1d       	adc	r19, r11
     544:	4c 1d       	adc	r20, r12
     546:	5d 1d       	adc	r21, r13
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	e6 14       	cp	r14, r6
     552:	f7 04       	cpc	r15, r7
     554:	08 05       	cpc	r16, r8
     556:	19 05       	cpc	r17, r9
     558:	20 f4       	brcc	.+8      	; 0x562 <__mulsf3+0xe8>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a0 e0       	ldi	r26, 0x00	; 0
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ba 01       	movw	r22, r20
     564:	a9 01       	movw	r20, r18
     566:	48 0f       	add	r20, r24
     568:	59 1f       	adc	r21, r25
     56a:	6a 1f       	adc	r22, r26
     56c:	7b 1f       	adc	r23, r27
     56e:	aa 0c       	add	r10, r10
     570:	bb 1c       	adc	r11, r11
     572:	cc 1c       	adc	r12, r12
     574:	dd 1c       	adc	r13, r13
     576:	97 fe       	sbrs	r9, 7
     578:	08 c0       	rjmp	.+16     	; 0x58a <__mulsf3+0x110>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	a8 2a       	or	r10, r24
     584:	b9 2a       	or	r11, r25
     586:	ca 2a       	or	r12, r26
     588:	db 2a       	or	r13, r27
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	e0 32       	cpi	r30, 0x20	; 32
     58e:	f1 05       	cpc	r31, r1
     590:	49 f0       	breq	.+18     	; 0x5a4 <__mulsf3+0x12a>
     592:	66 0c       	add	r6, r6
     594:	77 1c       	adc	r7, r7
     596:	88 1c       	adc	r8, r8
     598:	99 1c       	adc	r9, r9
     59a:	56 94       	lsr	r5
     59c:	47 94       	ror	r4
     59e:	37 94       	ror	r3
     5a0:	27 94       	ror	r2
     5a2:	c3 cf       	rjmp	.-122    	; 0x52a <__mulsf3+0xb0>
     5a4:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a6:	ea 89       	ldd	r30, Y+18	; 0x12
     5a8:	2b 89       	ldd	r18, Y+19	; 0x13
     5aa:	3c 89       	ldd	r19, Y+20	; 0x14
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	28 0f       	add	r18, r24
     5b2:	39 1f       	adc	r19, r25
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__mulsf3+0x16e>
     5ba:	ca 01       	movw	r24, r20
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 70       	andi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	61 f0       	breq	.+24     	; 0x5dc <__mulsf3+0x162>
     5c4:	16 95       	lsr	r17
     5c6:	07 95       	ror	r16
     5c8:	f7 94       	ror	r15
     5ca:	e7 94       	ror	r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b0 e8       	ldi	r27, 0x80	; 128
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	76 95       	lsr	r23
     5de:	67 95       	ror	r22
     5e0:	57 95       	ror	r21
     5e2:	47 95       	ror	r20
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	77 fd       	sbrc	r23, 7
     5ea:	e7 cf       	rjmp	.-50     	; 0x5ba <__mulsf3+0x140>
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <__mulsf3+0x18c>
     5ee:	44 0f       	add	r20, r20
     5f0:	55 1f       	adc	r21, r21
     5f2:	66 1f       	adc	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	17 fd       	sbrc	r17, 7
     5f8:	41 60       	ori	r20, 0x01	; 1
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	00 1f       	adc	r16, r16
     600:	11 1f       	adc	r17, r17
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	40 30       	cpi	r20, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	59 07       	cpc	r21, r25
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	69 07       	cpc	r22, r25
     610:	90 e4       	ldi	r25, 0x40	; 64
     612:	79 07       	cpc	r23, r25
     614:	60 f3       	brcs	.-40     	; 0x5ee <__mulsf3+0x174>
     616:	2b 8f       	std	Y+27, r18	; 0x1b
     618:	3c 8f       	std	Y+28, r19	; 0x1c
     61a:	db 01       	movw	r26, r22
     61c:	ca 01       	movw	r24, r20
     61e:	8f 77       	andi	r24, 0x7F	; 127
     620:	90 70       	andi	r25, 0x00	; 0
     622:	a0 70       	andi	r26, 0x00	; 0
     624:	b0 70       	andi	r27, 0x00	; 0
     626:	80 34       	cpi	r24, 0x40	; 64
     628:	91 05       	cpc	r25, r1
     62a:	a1 05       	cpc	r26, r1
     62c:	b1 05       	cpc	r27, r1
     62e:	61 f4       	brne	.+24     	; 0x648 <__mulsf3+0x1ce>
     630:	47 fd       	sbrc	r20, 7
     632:	0a c0       	rjmp	.+20     	; 0x648 <__mulsf3+0x1ce>
     634:	e1 14       	cp	r14, r1
     636:	f1 04       	cpc	r15, r1
     638:	01 05       	cpc	r16, r1
     63a:	11 05       	cpc	r17, r1
     63c:	29 f0       	breq	.+10     	; 0x648 <__mulsf3+0x1ce>
     63e:	40 5c       	subi	r20, 0xC0	; 192
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	6f 4f       	sbci	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	40 78       	andi	r20, 0x80	; 128
     648:	1a 8e       	std	Y+26, r1	; 0x1a
     64a:	fe 17       	cp	r31, r30
     64c:	11 f0       	breq	.+4      	; 0x652 <__mulsf3+0x1d8>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	8a 8f       	std	Y+26, r24	; 0x1a
     652:	4d 8f       	std	Y+29, r20	; 0x1d
     654:	5e 8f       	std	Y+30, r21	; 0x1e
     656:	6f 8f       	std	Y+31, r22	; 0x1f
     658:	78 a3       	std	Y+32, r23	; 0x20
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	89 8f       	std	Y+25, r24	; 0x19
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     666:	a0 96       	adiw	r28, 0x20	; 32
     668:	e2 e1       	ldi	r30, 0x12	; 18
     66a:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__epilogue_restores__>

0000066e <__divsf3>:
     66e:	a8 e1       	ldi	r26, 0x18	; 24
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	ed e3       	ldi	r30, 0x3D	; 61
     674:	f3 e0       	ldi	r31, 0x03	; 3
     676:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__+0x10>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
     682:	2d 83       	std	Y+5, r18	; 0x05
     684:	3e 83       	std	Y+6, r19	; 0x06
     686:	4f 83       	std	Y+7, r20	; 0x07
     688:	58 87       	std	Y+8, r21	; 0x08
     68a:	b9 e0       	ldi	r27, 0x09	; 9
     68c:	eb 2e       	mov	r14, r27
     68e:	f1 2c       	mov	r15, r1
     690:	ec 0e       	add	r14, r28
     692:	fd 1e       	adc	r15, r29
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	b7 01       	movw	r22, r14
     69a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5e       	subi	r16, 0xEF	; 239
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	ce 01       	movw	r24, r28
     6a6:	05 96       	adiw	r24, 0x05	; 5
     6a8:	b8 01       	movw	r22, r16
     6aa:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     6ae:	29 85       	ldd	r18, Y+9	; 0x09
     6b0:	22 30       	cpi	r18, 0x02	; 2
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <__divsf3+0x48>
     6b4:	7e c0       	rjmp	.+252    	; 0x7b2 <__divsf3+0x144>
     6b6:	39 89       	ldd	r19, Y+17	; 0x11
     6b8:	32 30       	cpi	r19, 0x02	; 2
     6ba:	10 f4       	brcc	.+4      	; 0x6c0 <__divsf3+0x52>
     6bc:	b8 01       	movw	r22, r16
     6be:	7c c0       	rjmp	.+248    	; 0x7b8 <__divsf3+0x14a>
     6c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c2:	9a 89       	ldd	r25, Y+18	; 0x12
     6c4:	89 27       	eor	r24, r25
     6c6:	8a 87       	std	Y+10, r24	; 0x0a
     6c8:	24 30       	cpi	r18, 0x04	; 4
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <__divsf3+0x62>
     6cc:	22 30       	cpi	r18, 0x02	; 2
     6ce:	31 f4       	brne	.+12     	; 0x6dc <__divsf3+0x6e>
     6d0:	23 17       	cp	r18, r19
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__divsf3+0x68>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <__divsf3+0x144>
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	71 e0       	ldi	r23, 0x01	; 1
     6da:	6e c0       	rjmp	.+220    	; 0x7b8 <__divsf3+0x14a>
     6dc:	34 30       	cpi	r19, 0x04	; 4
     6de:	39 f4       	brne	.+14     	; 0x6ee <__divsf3+0x80>
     6e0:	1d 86       	std	Y+13, r1	; 0x0d
     6e2:	1e 86       	std	Y+14, r1	; 0x0e
     6e4:	1f 86       	std	Y+15, r1	; 0x0f
     6e6:	18 8a       	std	Y+16, r1	; 0x10
     6e8:	1c 86       	std	Y+12, r1	; 0x0c
     6ea:	1b 86       	std	Y+11, r1	; 0x0b
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__divsf3+0x88>
     6ee:	32 30       	cpi	r19, 0x02	; 2
     6f0:	21 f4       	brne	.+8      	; 0x6fa <__divsf3+0x8c>
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	89 87       	std	Y+9, r24	; 0x09
     6f6:	b7 01       	movw	r22, r14
     6f8:	5f c0       	rjmp	.+190    	; 0x7b8 <__divsf3+0x14a>
     6fa:	2b 85       	ldd	r18, Y+11	; 0x0b
     6fc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6fe:	8b 89       	ldd	r24, Y+19	; 0x13
     700:	9c 89       	ldd	r25, Y+20	; 0x14
     702:	28 1b       	sub	r18, r24
     704:	39 0b       	sbc	r19, r25
     706:	3c 87       	std	Y+12, r19	; 0x0c
     708:	2b 87       	std	Y+11, r18	; 0x0b
     70a:	ed 84       	ldd	r14, Y+13	; 0x0d
     70c:	fe 84       	ldd	r15, Y+14	; 0x0e
     70e:	0f 85       	ldd	r16, Y+15	; 0x0f
     710:	18 89       	ldd	r17, Y+16	; 0x10
     712:	ad 88       	ldd	r10, Y+21	; 0x15
     714:	be 88       	ldd	r11, Y+22	; 0x16
     716:	cf 88       	ldd	r12, Y+23	; 0x17
     718:	d8 8c       	ldd	r13, Y+24	; 0x18
     71a:	ea 14       	cp	r14, r10
     71c:	fb 04       	cpc	r15, r11
     71e:	0c 05       	cpc	r16, r12
     720:	1d 05       	cpc	r17, r13
     722:	40 f4       	brcc	.+16     	; 0x734 <__divsf3+0xc6>
     724:	ee 0c       	add	r14, r14
     726:	ff 1c       	adc	r15, r15
     728:	00 1f       	adc	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	30 40       	sbci	r19, 0x00	; 0
     730:	3c 87       	std	Y+12, r19	; 0x0c
     732:	2b 87       	std	Y+11, r18	; 0x0b
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e4       	ldi	r27, 0x40	; 64
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	ea 14       	cp	r14, r10
     74a:	fb 04       	cpc	r15, r11
     74c:	0c 05       	cpc	r16, r12
     74e:	1d 05       	cpc	r17, r13
     750:	40 f0       	brcs	.+16     	; 0x762 <__divsf3+0xf4>
     752:	28 2b       	or	r18, r24
     754:	39 2b       	or	r19, r25
     756:	4a 2b       	or	r20, r26
     758:	5b 2b       	or	r21, r27
     75a:	ea 18       	sub	r14, r10
     75c:	fb 08       	sbc	r15, r11
     75e:	0c 09       	sbc	r16, r12
     760:	1d 09       	sbc	r17, r13
     762:	b6 95       	lsr	r27
     764:	a7 95       	ror	r26
     766:	97 95       	ror	r25
     768:	87 95       	ror	r24
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	00 1f       	adc	r16, r16
     770:	11 1f       	adc	r17, r17
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	6f 31       	cpi	r22, 0x1F	; 31
     778:	71 05       	cpc	r23, r1
     77a:	31 f7       	brne	.-52     	; 0x748 <__divsf3+0xda>
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	8f 77       	andi	r24, 0x7F	; 127
     782:	90 70       	andi	r25, 0x00	; 0
     784:	a0 70       	andi	r26, 0x00	; 0
     786:	b0 70       	andi	r27, 0x00	; 0
     788:	80 34       	cpi	r24, 0x40	; 64
     78a:	91 05       	cpc	r25, r1
     78c:	a1 05       	cpc	r26, r1
     78e:	b1 05       	cpc	r27, r1
     790:	61 f4       	brne	.+24     	; 0x7aa <__divsf3+0x13c>
     792:	27 fd       	sbrc	r18, 7
     794:	0a c0       	rjmp	.+20     	; 0x7aa <__divsf3+0x13c>
     796:	e1 14       	cp	r14, r1
     798:	f1 04       	cpc	r15, r1
     79a:	01 05       	cpc	r16, r1
     79c:	11 05       	cpc	r17, r1
     79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x13c>
     7a0:	20 5c       	subi	r18, 0xC0	; 192
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	4f 4f       	sbci	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	20 78       	andi	r18, 0x80	; 128
     7aa:	2d 87       	std	Y+13, r18	; 0x0d
     7ac:	3e 87       	std	Y+14, r19	; 0x0e
     7ae:	4f 87       	std	Y+15, r20	; 0x0f
     7b0:	58 8b       	std	Y+16, r21	; 0x10
     7b2:	be 01       	movw	r22, r28
     7b4:	67 5f       	subi	r22, 0xF7	; 247
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	cb 01       	movw	r24, r22
     7ba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     7be:	68 96       	adiw	r28, 0x18	; 24
     7c0:	ea e0       	ldi	r30, 0x0A	; 10
     7c2:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__+0x10>

000007c6 <__gtsf2>:
     7c6:	a8 e1       	ldi	r26, 0x18	; 24
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e9 ee       	ldi	r30, 0xE9	; 233
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     7d2:	69 83       	std	Y+1, r22	; 0x01
     7d4:	7a 83       	std	Y+2, r23	; 0x02
     7d6:	8b 83       	std	Y+3, r24	; 0x03
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	4f 83       	std	Y+7, r20	; 0x07
     7e0:	58 87       	std	Y+8, r21	; 0x08
     7e2:	89 e0       	ldi	r24, 0x09	; 9
     7e4:	e8 2e       	mov	r14, r24
     7e6:	f1 2c       	mov	r15, r1
     7e8:	ec 0e       	add	r14, r28
     7ea:	fd 1e       	adc	r15, r29
     7ec:	ce 01       	movw	r24, r28
     7ee:	01 96       	adiw	r24, 0x01	; 1
     7f0:	b7 01       	movw	r22, r14
     7f2:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     7f6:	8e 01       	movw	r16, r28
     7f8:	0f 5e       	subi	r16, 0xEF	; 239
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	ce 01       	movw	r24, r28
     7fe:	05 96       	adiw	r24, 0x05	; 5
     800:	b8 01       	movw	r22, r16
     802:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     806:	89 85       	ldd	r24, Y+9	; 0x09
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	40 f0       	brcs	.+16     	; 0x81c <__gtsf2+0x56>
     80c:	89 89       	ldd	r24, Y+17	; 0x11
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	28 f0       	brcs	.+10     	; 0x81c <__gtsf2+0x56>
     812:	c7 01       	movw	r24, r14
     814:	b8 01       	movw	r22, r16
     816:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fpcmp_parts_f>
     81a:	01 c0       	rjmp	.+2      	; 0x81e <__gtsf2+0x58>
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	68 96       	adiw	r28, 0x18	; 24
     820:	e6 e0       	ldi	r30, 0x06	; 6
     822:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

00000826 <__gesf2>:
     826:	a8 e1       	ldi	r26, 0x18	; 24
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	82 30       	cpi	r24, 0x02	; 2
     86a:	40 f0       	brcs	.+16     	; 0x87c <__gesf2+0x56>
     86c:	89 89       	ldd	r24, Y+17	; 0x11
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	28 f0       	brcs	.+10     	; 0x87c <__gesf2+0x56>
     872:	c7 01       	movw	r24, r14
     874:	b8 01       	movw	r22, r16
     876:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fpcmp_parts_f>
     87a:	01 c0       	rjmp	.+2      	; 0x87e <__gesf2+0x58>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	68 96       	adiw	r28, 0x18	; 24
     880:	e6 e0       	ldi	r30, 0x06	; 6
     882:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

00000886 <__ltsf2>:
     886:	a8 e1       	ldi	r26, 0x18	; 24
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9c 83       	std	Y+4, r25	; 0x04
     89a:	2d 83       	std	Y+5, r18	; 0x05
     89c:	3e 83       	std	Y+6, r19	; 0x06
     89e:	4f 83       	std	Y+7, r20	; 0x07
     8a0:	58 87       	std	Y+8, r21	; 0x08
     8a2:	89 e0       	ldi	r24, 0x09	; 9
     8a4:	e8 2e       	mov	r14, r24
     8a6:	f1 2c       	mov	r15, r1
     8a8:	ec 0e       	add	r14, r28
     8aa:	fd 1e       	adc	r15, r29
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	b7 01       	movw	r22, r14
     8b2:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     8b6:	8e 01       	movw	r16, r28
     8b8:	0f 5e       	subi	r16, 0xEF	; 239
     8ba:	1f 4f       	sbci	r17, 0xFF	; 255
     8bc:	ce 01       	movw	r24, r28
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     8c6:	89 85       	ldd	r24, Y+9	; 0x09
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	40 f0       	brcs	.+16     	; 0x8dc <__ltsf2+0x56>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__ltsf2+0x56>
     8d2:	c7 01       	movw	r24, r14
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fpcmp_parts_f>
     8da:	01 c0       	rjmp	.+2      	; 0x8de <__ltsf2+0x58>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	e6 e0       	ldi	r30, 0x06	; 6
     8e2:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

000008e6 <__lesf2>:
     8e6:	a8 e1       	ldi	r26, 0x18	; 24
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e7       	ldi	r30, 0x79	; 121
     8ec:	f4 e0       	ldi	r31, 0x04	; 4
     8ee:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <__prologue_saves__+0x18>
     8f2:	69 83       	std	Y+1, r22	; 0x01
     8f4:	7a 83       	std	Y+2, r23	; 0x02
     8f6:	8b 83       	std	Y+3, r24	; 0x03
     8f8:	9c 83       	std	Y+4, r25	; 0x04
     8fa:	2d 83       	std	Y+5, r18	; 0x05
     8fc:	3e 83       	std	Y+6, r19	; 0x06
     8fe:	4f 83       	std	Y+7, r20	; 0x07
     900:	58 87       	std	Y+8, r21	; 0x08
     902:	89 e0       	ldi	r24, 0x09	; 9
     904:	e8 2e       	mov	r14, r24
     906:	f1 2c       	mov	r15, r1
     908:	ec 0e       	add	r14, r28
     90a:	fd 1e       	adc	r15, r29
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	b7 01       	movw	r22, r14
     912:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     916:	8e 01       	movw	r16, r28
     918:	0f 5e       	subi	r16, 0xEF	; 239
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	ce 01       	movw	r24, r28
     91e:	05 96       	adiw	r24, 0x05	; 5
     920:	b8 01       	movw	r22, r16
     922:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     926:	89 85       	ldd	r24, Y+9	; 0x09
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	40 f0       	brcs	.+16     	; 0x93c <__lesf2+0x56>
     92c:	89 89       	ldd	r24, Y+17	; 0x11
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	28 f0       	brcs	.+10     	; 0x93c <__lesf2+0x56>
     932:	c7 01       	movw	r24, r14
     934:	b8 01       	movw	r22, r16
     936:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fpcmp_parts_f>
     93a:	01 c0       	rjmp	.+2      	; 0x93e <__lesf2+0x58>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	68 96       	adiw	r28, 0x18	; 24
     940:	e6 e0       	ldi	r30, 0x06	; 6
     942:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__epilogue_restores__+0x18>

00000946 <__floatsisf>:
     946:	a8 e0       	ldi	r26, 0x08	; 8
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e9 ea       	ldi	r30, 0xA9	; 169
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__prologue_saves__+0x12>
     952:	9b 01       	movw	r18, r22
     954:	ac 01       	movw	r20, r24
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	89 83       	std	Y+1, r24	; 0x01
     95a:	da 01       	movw	r26, r20
     95c:	c9 01       	movw	r24, r18
     95e:	88 27       	eor	r24, r24
     960:	b7 fd       	sbrc	r27, 7
     962:	83 95       	inc	r24
     964:	99 27       	eor	r25, r25
     966:	aa 27       	eor	r26, r26
     968:	bb 27       	eor	r27, r27
     96a:	b8 2e       	mov	r11, r24
     96c:	21 15       	cp	r18, r1
     96e:	31 05       	cpc	r19, r1
     970:	41 05       	cpc	r20, r1
     972:	51 05       	cpc	r21, r1
     974:	19 f4       	brne	.+6      	; 0x97c <__floatsisf+0x36>
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	3a c0       	rjmp	.+116    	; 0x9f0 <__floatsisf+0xaa>
     97c:	88 23       	and	r24, r24
     97e:	a9 f0       	breq	.+42     	; 0x9aa <__floatsisf+0x64>
     980:	20 30       	cpi	r18, 0x00	; 0
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	38 07       	cpc	r19, r24
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	48 07       	cpc	r20, r24
     98a:	80 e8       	ldi	r24, 0x80	; 128
     98c:	58 07       	cpc	r21, r24
     98e:	29 f4       	brne	.+10     	; 0x99a <__floatsisf+0x54>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	9f ec       	ldi	r25, 0xCF	; 207
     998:	30 c0       	rjmp	.+96     	; 0x9fa <__floatsisf+0xb4>
     99a:	ee 24       	eor	r14, r14
     99c:	ff 24       	eor	r15, r15
     99e:	87 01       	movw	r16, r14
     9a0:	e2 1a       	sub	r14, r18
     9a2:	f3 0a       	sbc	r15, r19
     9a4:	04 0b       	sbc	r16, r20
     9a6:	15 0b       	sbc	r17, r21
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__floatsisf+0x68>
     9aa:	79 01       	movw	r14, r18
     9ac:	8a 01       	movw	r16, r20
     9ae:	8e e1       	ldi	r24, 0x1E	; 30
     9b0:	c8 2e       	mov	r12, r24
     9b2:	d1 2c       	mov	r13, r1
     9b4:	dc 82       	std	Y+4, r13	; 0x04
     9b6:	cb 82       	std	Y+3, r12	; 0x03
     9b8:	ed 82       	std	Y+5, r14	; 0x05
     9ba:	fe 82       	std	Y+6, r15	; 0x06
     9bc:	0f 83       	std	Y+7, r16	; 0x07
     9be:	18 87       	std	Y+8, r17	; 0x08
     9c0:	c8 01       	movw	r24, r16
     9c2:	b7 01       	movw	r22, r14
     9c4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__clzsi2>
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	18 16       	cp	r1, r24
     9cc:	19 06       	cpc	r1, r25
     9ce:	84 f4       	brge	.+32     	; 0x9f0 <__floatsisf+0xaa>
     9d0:	08 2e       	mov	r0, r24
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__floatsisf+0x96>
     9d4:	ee 0c       	add	r14, r14
     9d6:	ff 1c       	adc	r15, r15
     9d8:	00 1f       	adc	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	0a 94       	dec	r0
     9de:	d2 f7       	brpl	.-12     	; 0x9d4 <__floatsisf+0x8e>
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 1a       	sub	r12, r24
     9ea:	d9 0a       	sbc	r13, r25
     9ec:	dc 82       	std	Y+4, r13	; 0x04
     9ee:	cb 82       	std	Y+3, r12	; 0x03
     9f0:	ba 82       	std	Y+2, r11	; 0x02
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     9fa:	28 96       	adiw	r28, 0x08	; 8
     9fc:	e9 e0       	ldi	r30, 0x09	; 9
     9fe:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__epilogue_restores__+0x12>

00000a02 <__fixsfsi>:
     a02:	ac e0       	ldi	r26, 0x0C	; 12
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e0       	ldi	r30, 0x07	; 7
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__prologue_saves__+0x20>
     a0e:	69 83       	std	Y+1, r22	; 0x01
     a10:	7a 83       	std	Y+2, r23	; 0x02
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	be 01       	movw	r22, r28
     a1c:	6b 5f       	subi	r22, 0xFB	; 251
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	0e 94 f2 06 	call	0xde4	; 0xde4 <__unpack_f>
     a24:	8d 81       	ldd	r24, Y+5	; 0x05
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	61 f1       	breq	.+88     	; 0xa82 <__fixsfsi+0x80>
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	50 f1       	brcs	.+84     	; 0xa82 <__fixsfsi+0x80>
     a2e:	84 30       	cpi	r24, 0x04	; 4
     a30:	21 f4       	brne	.+8      	; 0xa3a <__fixsfsi+0x38>
     a32:	8e 81       	ldd	r24, Y+6	; 0x06
     a34:	88 23       	and	r24, r24
     a36:	51 f1       	breq	.+84     	; 0xa8c <__fixsfsi+0x8a>
     a38:	2e c0       	rjmp	.+92     	; 0xa96 <__fixsfsi+0x94>
     a3a:	2f 81       	ldd	r18, Y+7	; 0x07
     a3c:	38 85       	ldd	r19, Y+8	; 0x08
     a3e:	37 fd       	sbrc	r19, 7
     a40:	20 c0       	rjmp	.+64     	; 0xa82 <__fixsfsi+0x80>
     a42:	6e 81       	ldd	r22, Y+6	; 0x06
     a44:	2f 31       	cpi	r18, 0x1F	; 31
     a46:	31 05       	cpc	r19, r1
     a48:	1c f0       	brlt	.+6      	; 0xa50 <__fixsfsi+0x4e>
     a4a:	66 23       	and	r22, r22
     a4c:	f9 f0       	breq	.+62     	; 0xa8c <__fixsfsi+0x8a>
     a4e:	23 c0       	rjmp	.+70     	; 0xa96 <__fixsfsi+0x94>
     a50:	8e e1       	ldi	r24, 0x1E	; 30
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	82 1b       	sub	r24, r18
     a56:	93 0b       	sbc	r25, r19
     a58:	29 85       	ldd	r18, Y+9	; 0x09
     a5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5c:	4b 85       	ldd	r20, Y+11	; 0x0b
     a5e:	5c 85       	ldd	r21, Y+12	; 0x0c
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <__fixsfsi+0x68>
     a62:	56 95       	lsr	r21
     a64:	47 95       	ror	r20
     a66:	37 95       	ror	r19
     a68:	27 95       	ror	r18
     a6a:	8a 95       	dec	r24
     a6c:	d2 f7       	brpl	.-12     	; 0xa62 <__fixsfsi+0x60>
     a6e:	66 23       	and	r22, r22
     a70:	b1 f0       	breq	.+44     	; 0xa9e <__fixsfsi+0x9c>
     a72:	50 95       	com	r21
     a74:	40 95       	com	r20
     a76:	30 95       	com	r19
     a78:	21 95       	neg	r18
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	0e c0       	rjmp	.+28     	; 0xa9e <__fixsfsi+0x9c>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <__fixsfsi+0x9c>
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	3f ef       	ldi	r19, 0xFF	; 255
     a90:	4f ef       	ldi	r20, 0xFF	; 255
     a92:	5f e7       	ldi	r21, 0x7F	; 127
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__fixsfsi+0x9c>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e8       	ldi	r21, 0x80	; 128
     a9e:	b9 01       	movw	r22, r18
     aa0:	ca 01       	movw	r24, r20
     aa2:	2c 96       	adiw	r28, 0x0c	; 12
     aa4:	e2 e0       	ldi	r30, 0x02	; 2
     aa6:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__epilogue_restores__+0x20>

00000aaa <__floatunsisf>:
     aaa:	a8 e0       	ldi	r26, 0x08	; 8
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	eb e5       	ldi	r30, 0x5B	; 91
     ab0:	f5 e0       	ldi	r31, 0x05	; 5
     ab2:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__+0x10>
     ab6:	7b 01       	movw	r14, r22
     ab8:	8c 01       	movw	r16, r24
     aba:	61 15       	cp	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	81 05       	cpc	r24, r1
     ac0:	91 05       	cpc	r25, r1
     ac2:	19 f4       	brne	.+6      	; 0xaca <__floatunsisf+0x20>
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	60 c0       	rjmp	.+192    	; 0xb8a <__floatunsisf+0xe0>
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	8e e1       	ldi	r24, 0x1E	; 30
     ad0:	c8 2e       	mov	r12, r24
     ad2:	d1 2c       	mov	r13, r1
     ad4:	dc 82       	std	Y+4, r13	; 0x04
     ad6:	cb 82       	std	Y+3, r12	; 0x03
     ad8:	ed 82       	std	Y+5, r14	; 0x05
     ada:	fe 82       	std	Y+6, r15	; 0x06
     adc:	0f 83       	std	Y+7, r16	; 0x07
     ade:	18 87       	std	Y+8, r17	; 0x08
     ae0:	c8 01       	movw	r24, r16
     ae2:	b7 01       	movw	r22, r14
     ae4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__clzsi2>
     ae8:	fc 01       	movw	r30, r24
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	f7 ff       	sbrs	r31, 7
     aee:	3b c0       	rjmp	.+118    	; 0xb66 <__floatunsisf+0xbc>
     af0:	22 27       	eor	r18, r18
     af2:	33 27       	eor	r19, r19
     af4:	2e 1b       	sub	r18, r30
     af6:	3f 0b       	sbc	r19, r31
     af8:	57 01       	movw	r10, r14
     afa:	68 01       	movw	r12, r16
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__floatunsisf+0x5e>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__floatunsisf+0x56>
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__floatunsisf+0x7c>
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	aa 1f       	adc	r26, r26
     b24:	bb 1f       	adc	r27, r27
     b26:	2a 95       	dec	r18
     b28:	d2 f7       	brpl	.-12     	; 0xb1e <__floatunsisf+0x74>
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	a1 09       	sbc	r26, r1
     b2e:	b1 09       	sbc	r27, r1
     b30:	8e 21       	and	r24, r14
     b32:	9f 21       	and	r25, r15
     b34:	a0 23       	and	r26, r16
     b36:	b1 23       	and	r27, r17
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	a1 05       	cpc	r26, r1
     b3c:	b1 05       	cpc	r27, r1
     b3e:	21 f0       	breq	.+8      	; 0xb48 <__floatunsisf+0x9e>
     b40:	41 e0       	ldi	r20, 0x01	; 1
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	4a 29       	or	r20, r10
     b4a:	5b 29       	or	r21, r11
     b4c:	6c 29       	or	r22, r12
     b4e:	7d 29       	or	r23, r13
     b50:	4d 83       	std	Y+5, r20	; 0x05
     b52:	5e 83       	std	Y+6, r21	; 0x06
     b54:	6f 83       	std	Y+7, r22	; 0x07
     b56:	78 87       	std	Y+8, r23	; 0x08
     b58:	8e e1       	ldi	r24, 0x1E	; 30
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8e 1b       	sub	r24, r30
     b5e:	9f 0b       	sbc	r25, r31
     b60:	9c 83       	std	Y+4, r25	; 0x04
     b62:	8b 83       	std	Y+3, r24	; 0x03
     b64:	12 c0       	rjmp	.+36     	; 0xb8a <__floatunsisf+0xe0>
     b66:	30 97       	sbiw	r30, 0x00	; 0
     b68:	81 f0       	breq	.+32     	; 0xb8a <__floatunsisf+0xe0>
     b6a:	0e 2e       	mov	r0, r30
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__floatunsisf+0xcc>
     b6e:	ee 0c       	add	r14, r14
     b70:	ff 1c       	adc	r15, r15
     b72:	00 1f       	adc	r16, r16
     b74:	11 1f       	adc	r17, r17
     b76:	0a 94       	dec	r0
     b78:	d2 f7       	brpl	.-12     	; 0xb6e <__floatunsisf+0xc4>
     b7a:	ed 82       	std	Y+5, r14	; 0x05
     b7c:	fe 82       	std	Y+6, r15	; 0x06
     b7e:	0f 83       	std	Y+7, r16	; 0x07
     b80:	18 87       	std	Y+8, r17	; 0x08
     b82:	ce 1a       	sub	r12, r30
     b84:	df 0a       	sbc	r13, r31
     b86:	dc 82       	std	Y+4, r13	; 0x04
     b88:	cb 82       	std	Y+3, r12	; 0x03
     b8a:	1a 82       	std	Y+2, r1	; 0x02
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__pack_f>
     b94:	28 96       	adiw	r28, 0x08	; 8
     b96:	ea e0       	ldi	r30, 0x0A	; 10
     b98:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__+0x10>

00000b9c <__clzsi2>:
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	7b 01       	movw	r14, r22
     ba6:	8c 01       	movw	r16, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 07       	cpc	r16, r24
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	18 07       	cpc	r17, r24
     bb8:	88 f4       	brcc	.+34     	; 0xbdc <__clzsi2+0x40>
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	e8 16       	cp	r14, r24
     bbe:	f1 04       	cpc	r15, r1
     bc0:	01 05       	cpc	r16, r1
     bc2:	11 05       	cpc	r17, r1
     bc4:	31 f0       	breq	.+12     	; 0xbd2 <__clzsi2+0x36>
     bc6:	28 f0       	brcs	.+10     	; 0xbd2 <__clzsi2+0x36>
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	17 c0       	rjmp	.+46     	; 0xc00 <__clzsi2+0x64>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	12 c0       	rjmp	.+36     	; 0xc00 <__clzsi2+0x64>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	e8 16       	cp	r14, r24
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	f8 06       	cpc	r15, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 07       	cpc	r16, r24
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	18 07       	cpc	r17, r24
     bec:	28 f0       	brcs	.+10     	; 0xbf8 <__clzsi2+0x5c>
     bee:	88 e1       	ldi	r24, 0x18	; 24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	a0 e0       	ldi	r26, 0x00	; 0
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__clzsi2+0x64>
     bf8:	80 e1       	ldi	r24, 0x10	; 16
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	20 e2       	ldi	r18, 0x20	; 32
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	28 1b       	sub	r18, r24
     c0a:	39 0b       	sbc	r19, r25
     c0c:	4a 0b       	sbc	r20, r26
     c0e:	5b 0b       	sbc	r21, r27
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <__clzsi2+0x7e>
     c12:	16 95       	lsr	r17
     c14:	07 95       	ror	r16
     c16:	f7 94       	ror	r15
     c18:	e7 94       	ror	r14
     c1a:	8a 95       	dec	r24
     c1c:	d2 f7       	brpl	.-12     	; 0xc12 <__clzsi2+0x76>
     c1e:	f7 01       	movw	r30, r14
     c20:	e8 5f       	subi	r30, 0xF8	; 248
     c22:	fe 4f       	sbci	r31, 0xFE	; 254
     c24:	80 81       	ld	r24, Z
     c26:	28 1b       	sub	r18, r24
     c28:	31 09       	sbc	r19, r1
     c2a:	41 09       	sbc	r20, r1
     c2c:	51 09       	sbc	r21, r1
     c2e:	c9 01       	movw	r24, r18
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	08 95       	ret

00000c3a <__pack_f>:
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	fc 01       	movw	r30, r24
     c46:	e4 80       	ldd	r14, Z+4	; 0x04
     c48:	f5 80       	ldd	r15, Z+5	; 0x05
     c4a:	06 81       	ldd	r16, Z+6	; 0x06
     c4c:	17 81       	ldd	r17, Z+7	; 0x07
     c4e:	d1 80       	ldd	r13, Z+1	; 0x01
     c50:	80 81       	ld	r24, Z
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	48 f4       	brcc	.+18     	; 0xc68 <__pack_f+0x2e>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e1       	ldi	r26, 0x10	; 16
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e8 2a       	or	r14, r24
     c60:	f9 2a       	or	r15, r25
     c62:	0a 2b       	or	r16, r26
     c64:	1b 2b       	or	r17, r27
     c66:	a5 c0       	rjmp	.+330    	; 0xdb2 <__pack_f+0x178>
     c68:	84 30       	cpi	r24, 0x04	; 4
     c6a:	09 f4       	brne	.+2      	; 0xc6e <__pack_f+0x34>
     c6c:	9f c0       	rjmp	.+318    	; 0xdac <__pack_f+0x172>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	21 f4       	brne	.+8      	; 0xc7a <__pack_f+0x40>
     c72:	ee 24       	eor	r14, r14
     c74:	ff 24       	eor	r15, r15
     c76:	87 01       	movw	r16, r14
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <__pack_f+0x4a>
     c7a:	e1 14       	cp	r14, r1
     c7c:	f1 04       	cpc	r15, r1
     c7e:	01 05       	cpc	r16, r1
     c80:	11 05       	cpc	r17, r1
     c82:	19 f4       	brne	.+6      	; 0xc8a <__pack_f+0x50>
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	96 c0       	rjmp	.+300    	; 0xdb6 <__pack_f+0x17c>
     c8a:	62 81       	ldd	r22, Z+2	; 0x02
     c8c:	73 81       	ldd	r23, Z+3	; 0x03
     c8e:	9f ef       	ldi	r25, 0xFF	; 255
     c90:	62 38       	cpi	r22, 0x82	; 130
     c92:	79 07       	cpc	r23, r25
     c94:	0c f0       	brlt	.+2      	; 0xc98 <__pack_f+0x5e>
     c96:	5b c0       	rjmp	.+182    	; 0xd4e <__pack_f+0x114>
     c98:	22 e8       	ldi	r18, 0x82	; 130
     c9a:	3f ef       	ldi	r19, 0xFF	; 255
     c9c:	26 1b       	sub	r18, r22
     c9e:	37 0b       	sbc	r19, r23
     ca0:	2a 31       	cpi	r18, 0x1A	; 26
     ca2:	31 05       	cpc	r19, r1
     ca4:	2c f0       	brlt	.+10     	; 0xcb0 <__pack_f+0x76>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	2a c0       	rjmp	.+84     	; 0xd04 <__pack_f+0xca>
     cb0:	b8 01       	movw	r22, r16
     cb2:	a7 01       	movw	r20, r14
     cb4:	02 2e       	mov	r0, r18
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <__pack_f+0x86>
     cb8:	76 95       	lsr	r23
     cba:	67 95       	ror	r22
     cbc:	57 95       	ror	r21
     cbe:	47 95       	ror	r20
     cc0:	0a 94       	dec	r0
     cc2:	d2 f7       	brpl	.-12     	; 0xcb8 <__pack_f+0x7e>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__pack_f+0x9c>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	aa 1f       	adc	r26, r26
     cd4:	bb 1f       	adc	r27, r27
     cd6:	2a 95       	dec	r18
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <__pack_f+0x94>
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	a1 09       	sbc	r26, r1
     cde:	b1 09       	sbc	r27, r1
     ce0:	8e 21       	and	r24, r14
     ce2:	9f 21       	and	r25, r15
     ce4:	a0 23       	and	r26, r16
     ce6:	b1 23       	and	r27, r17
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	a1 05       	cpc	r26, r1
     cec:	b1 05       	cpc	r27, r1
     cee:	21 f0       	breq	.+8      	; 0xcf8 <__pack_f+0xbe>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	9a 01       	movw	r18, r20
     cfa:	ab 01       	movw	r20, r22
     cfc:	28 2b       	or	r18, r24
     cfe:	39 2b       	or	r19, r25
     d00:	4a 2b       	or	r20, r26
     d02:	5b 2b       	or	r21, r27
     d04:	da 01       	movw	r26, r20
     d06:	c9 01       	movw	r24, r18
     d08:	8f 77       	andi	r24, 0x7F	; 127
     d0a:	90 70       	andi	r25, 0x00	; 0
     d0c:	a0 70       	andi	r26, 0x00	; 0
     d0e:	b0 70       	andi	r27, 0x00	; 0
     d10:	80 34       	cpi	r24, 0x40	; 64
     d12:	91 05       	cpc	r25, r1
     d14:	a1 05       	cpc	r26, r1
     d16:	b1 05       	cpc	r27, r1
     d18:	39 f4       	brne	.+14     	; 0xd28 <__pack_f+0xee>
     d1a:	27 ff       	sbrs	r18, 7
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <__pack_f+0xf6>
     d1e:	20 5c       	subi	r18, 0xC0	; 192
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	4f 4f       	sbci	r20, 0xFF	; 255
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__pack_f+0xf6>
     d28:	21 5c       	subi	r18, 0xC1	; 193
     d2a:	3f 4f       	sbci	r19, 0xFF	; 255
     d2c:	4f 4f       	sbci	r20, 0xFF	; 255
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	e0 e0       	ldi	r30, 0x00	; 0
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	20 30       	cpi	r18, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	3a 07       	cpc	r19, r26
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	4a 07       	cpc	r20, r26
     d3e:	a0 e4       	ldi	r26, 0x40	; 64
     d40:	5a 07       	cpc	r21, r26
     d42:	10 f0       	brcs	.+4      	; 0xd48 <__pack_f+0x10e>
     d44:	e1 e0       	ldi	r30, 0x01	; 1
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	79 01       	movw	r14, r18
     d4a:	8a 01       	movw	r16, r20
     d4c:	27 c0       	rjmp	.+78     	; 0xd9c <__pack_f+0x162>
     d4e:	60 38       	cpi	r22, 0x80	; 128
     d50:	71 05       	cpc	r23, r1
     d52:	64 f5       	brge	.+88     	; 0xdac <__pack_f+0x172>
     d54:	fb 01       	movw	r30, r22
     d56:	e1 58       	subi	r30, 0x81	; 129
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	d8 01       	movw	r26, r16
     d5c:	c7 01       	movw	r24, r14
     d5e:	8f 77       	andi	r24, 0x7F	; 127
     d60:	90 70       	andi	r25, 0x00	; 0
     d62:	a0 70       	andi	r26, 0x00	; 0
     d64:	b0 70       	andi	r27, 0x00	; 0
     d66:	80 34       	cpi	r24, 0x40	; 64
     d68:	91 05       	cpc	r25, r1
     d6a:	a1 05       	cpc	r26, r1
     d6c:	b1 05       	cpc	r27, r1
     d6e:	39 f4       	brne	.+14     	; 0xd7e <__pack_f+0x144>
     d70:	e7 fe       	sbrs	r14, 7
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <__pack_f+0x154>
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <__pack_f+0x14c>
     d7e:	8f e3       	ldi	r24, 0x3F	; 63
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a0 e0       	ldi	r26, 0x00	; 0
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e8 0e       	add	r14, r24
     d88:	f9 1e       	adc	r15, r25
     d8a:	0a 1f       	adc	r16, r26
     d8c:	1b 1f       	adc	r17, r27
     d8e:	17 ff       	sbrs	r17, 7
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <__pack_f+0x162>
     d92:	16 95       	lsr	r17
     d94:	07 95       	ror	r16
     d96:	f7 94       	ror	r15
     d98:	e7 94       	ror	r14
     d9a:	31 96       	adiw	r30, 0x01	; 1
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	16 95       	lsr	r17
     da0:	07 95       	ror	r16
     da2:	f7 94       	ror	r15
     da4:	e7 94       	ror	r14
     da6:	8a 95       	dec	r24
     da8:	d1 f7       	brne	.-12     	; 0xd9e <__pack_f+0x164>
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__pack_f+0x17c>
     dac:	ee 24       	eor	r14, r14
     dae:	ff 24       	eor	r15, r15
     db0:	87 01       	movw	r16, r14
     db2:	ef ef       	ldi	r30, 0xFF	; 255
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	6e 2f       	mov	r22, r30
     db8:	67 95       	ror	r22
     dba:	66 27       	eor	r22, r22
     dbc:	67 95       	ror	r22
     dbe:	90 2f       	mov	r25, r16
     dc0:	9f 77       	andi	r25, 0x7F	; 127
     dc2:	d7 94       	ror	r13
     dc4:	dd 24       	eor	r13, r13
     dc6:	d7 94       	ror	r13
     dc8:	8e 2f       	mov	r24, r30
     dca:	86 95       	lsr	r24
     dcc:	49 2f       	mov	r20, r25
     dce:	46 2b       	or	r20, r22
     dd0:	58 2f       	mov	r21, r24
     dd2:	5d 29       	or	r21, r13
     dd4:	b7 01       	movw	r22, r14
     dd6:	ca 01       	movw	r24, r20
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	08 95       	ret

00000de4 <__unpack_f>:
     de4:	fc 01       	movw	r30, r24
     de6:	db 01       	movw	r26, r22
     de8:	40 81       	ld	r20, Z
     dea:	51 81       	ldd	r21, Z+1	; 0x01
     dec:	22 81       	ldd	r18, Z+2	; 0x02
     dee:	62 2f       	mov	r22, r18
     df0:	6f 77       	andi	r22, 0x7F	; 127
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	22 1f       	adc	r18, r18
     df6:	22 27       	eor	r18, r18
     df8:	22 1f       	adc	r18, r18
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	89 2f       	mov	r24, r25
     dfe:	88 0f       	add	r24, r24
     e00:	82 2b       	or	r24, r18
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	99 1f       	adc	r25, r25
     e08:	99 27       	eor	r25, r25
     e0a:	99 1f       	adc	r25, r25
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	9c 93       	st	X, r25
     e10:	11 97       	sbiw	r26, 0x01	; 1
     e12:	21 15       	cp	r18, r1
     e14:	31 05       	cpc	r19, r1
     e16:	a9 f5       	brne	.+106    	; 0xe82 <__unpack_f+0x9e>
     e18:	41 15       	cp	r20, r1
     e1a:	51 05       	cpc	r21, r1
     e1c:	61 05       	cpc	r22, r1
     e1e:	71 05       	cpc	r23, r1
     e20:	11 f4       	brne	.+4      	; 0xe26 <__unpack_f+0x42>
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	37 c0       	rjmp	.+110    	; 0xe94 <__unpack_f+0xb0>
     e26:	82 e8       	ldi	r24, 0x82	; 130
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	13 96       	adiw	r26, 0x03	; 3
     e2c:	9c 93       	st	X, r25
     e2e:	8e 93       	st	-X, r24
     e30:	12 97       	sbiw	r26, 0x02	; 2
     e32:	9a 01       	movw	r18, r20
     e34:	ab 01       	movw	r20, r22
     e36:	67 e0       	ldi	r22, 0x07	; 7
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	44 1f       	adc	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	6a 95       	dec	r22
     e42:	d1 f7       	brne	.-12     	; 0xe38 <__unpack_f+0x54>
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	8c 93       	st	X, r24
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <__unpack_f+0x80>
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	55 1f       	adc	r21, r21
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	13 97       	sbiw	r26, 0x03	; 3
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	13 96       	adiw	r26, 0x03	; 3
     e5e:	9c 93       	st	X, r25
     e60:	8e 93       	st	-X, r24
     e62:	12 97       	sbiw	r26, 0x02	; 2
     e64:	20 30       	cpi	r18, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	38 07       	cpc	r19, r24
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	48 07       	cpc	r20, r24
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	58 07       	cpc	r21, r24
     e72:	58 f3       	brcs	.-42     	; 0xe4a <__unpack_f+0x66>
     e74:	14 96       	adiw	r26, 0x04	; 4
     e76:	2d 93       	st	X+, r18
     e78:	3d 93       	st	X+, r19
     e7a:	4d 93       	st	X+, r20
     e7c:	5c 93       	st	X, r21
     e7e:	17 97       	sbiw	r26, 0x07	; 7
     e80:	08 95       	ret
     e82:	2f 3f       	cpi	r18, 0xFF	; 255
     e84:	31 05       	cpc	r19, r1
     e86:	79 f4       	brne	.+30     	; 0xea6 <__unpack_f+0xc2>
     e88:	41 15       	cp	r20, r1
     e8a:	51 05       	cpc	r21, r1
     e8c:	61 05       	cpc	r22, r1
     e8e:	71 05       	cpc	r23, r1
     e90:	19 f4       	brne	.+6      	; 0xe98 <__unpack_f+0xb4>
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	8c 93       	st	X, r24
     e96:	08 95       	ret
     e98:	64 ff       	sbrs	r22, 4
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <__unpack_f+0xbe>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	8c 93       	st	X, r24
     ea0:	12 c0       	rjmp	.+36     	; 0xec6 <__unpack_f+0xe2>
     ea2:	1c 92       	st	X, r1
     ea4:	10 c0       	rjmp	.+32     	; 0xec6 <__unpack_f+0xe2>
     ea6:	2f 57       	subi	r18, 0x7F	; 127
     ea8:	30 40       	sbci	r19, 0x00	; 0
     eaa:	13 96       	adiw	r26, 0x03	; 3
     eac:	3c 93       	st	X, r19
     eae:	2e 93       	st	-X, r18
     eb0:	12 97       	sbiw	r26, 0x02	; 2
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	8c 93       	st	X, r24
     eb6:	87 e0       	ldi	r24, 0x07	; 7
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	8a 95       	dec	r24
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <__unpack_f+0xd4>
     ec4:	70 64       	ori	r23, 0x40	; 64
     ec6:	14 96       	adiw	r26, 0x04	; 4
     ec8:	4d 93       	st	X+, r20
     eca:	5d 93       	st	X+, r21
     ecc:	6d 93       	st	X+, r22
     ece:	7c 93       	st	X, r23
     ed0:	17 97       	sbiw	r26, 0x07	; 7
     ed2:	08 95       	ret

00000ed4 <__fpcmp_parts_f>:
     ed4:	1f 93       	push	r17
     ed6:	dc 01       	movw	r26, r24
     ed8:	fb 01       	movw	r30, r22
     eda:	9c 91       	ld	r25, X
     edc:	92 30       	cpi	r25, 0x02	; 2
     ede:	08 f4       	brcc	.+2      	; 0xee2 <__fpcmp_parts_f+0xe>
     ee0:	47 c0       	rjmp	.+142    	; 0xf70 <__fpcmp_parts_f+0x9c>
     ee2:	80 81       	ld	r24, Z
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	08 f4       	brcc	.+2      	; 0xeea <__fpcmp_parts_f+0x16>
     ee8:	43 c0       	rjmp	.+134    	; 0xf70 <__fpcmp_parts_f+0x9c>
     eea:	94 30       	cpi	r25, 0x04	; 4
     eec:	51 f4       	brne	.+20     	; 0xf02 <__fpcmp_parts_f+0x2e>
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	1c 91       	ld	r17, X
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	99 f5       	brne	.+102    	; 0xf5c <__fpcmp_parts_f+0x88>
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	68 2f       	mov	r22, r24
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	61 1b       	sub	r22, r17
     efe:	71 09       	sbc	r23, r1
     f00:	3f c0       	rjmp	.+126    	; 0xf80 <__fpcmp_parts_f+0xac>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	21 f0       	breq	.+8      	; 0xf0e <__fpcmp_parts_f+0x3a>
     f06:	92 30       	cpi	r25, 0x02	; 2
     f08:	31 f4       	brne	.+12     	; 0xf16 <__fpcmp_parts_f+0x42>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	b9 f1       	breq	.+110    	; 0xf7c <__fpcmp_parts_f+0xa8>
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	88 23       	and	r24, r24
     f12:	89 f1       	breq	.+98     	; 0xf76 <__fpcmp_parts_f+0xa2>
     f14:	2d c0       	rjmp	.+90     	; 0xf70 <__fpcmp_parts_f+0x9c>
     f16:	11 96       	adiw	r26, 0x01	; 1
     f18:	1c 91       	ld	r17, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	82 30       	cpi	r24, 0x02	; 2
     f1e:	f1 f0       	breq	.+60     	; 0xf5c <__fpcmp_parts_f+0x88>
     f20:	81 81       	ldd	r24, Z+1	; 0x01
     f22:	18 17       	cp	r17, r24
     f24:	d9 f4       	brne	.+54     	; 0xf5c <__fpcmp_parts_f+0x88>
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	2d 91       	ld	r18, X+
     f2a:	3c 91       	ld	r19, X
     f2c:	13 97       	sbiw	r26, 0x03	; 3
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	82 17       	cp	r24, r18
     f34:	93 07       	cpc	r25, r19
     f36:	94 f0       	brlt	.+36     	; 0xf5c <__fpcmp_parts_f+0x88>
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	bc f0       	brlt	.+46     	; 0xf6c <__fpcmp_parts_f+0x98>
     f3e:	14 96       	adiw	r26, 0x04	; 4
     f40:	8d 91       	ld	r24, X+
     f42:	9d 91       	ld	r25, X+
     f44:	0d 90       	ld	r0, X+
     f46:	bc 91       	ld	r27, X
     f48:	a0 2d       	mov	r26, r0
     f4a:	24 81       	ldd	r18, Z+4	; 0x04
     f4c:	35 81       	ldd	r19, Z+5	; 0x05
     f4e:	46 81       	ldd	r20, Z+6	; 0x06
     f50:	57 81       	ldd	r21, Z+7	; 0x07
     f52:	28 17       	cp	r18, r24
     f54:	39 07       	cpc	r19, r25
     f56:	4a 07       	cpc	r20, r26
     f58:	5b 07       	cpc	r21, r27
     f5a:	18 f4       	brcc	.+6      	; 0xf62 <__fpcmp_parts_f+0x8e>
     f5c:	11 23       	and	r17, r17
     f5e:	41 f0       	breq	.+16     	; 0xf70 <__fpcmp_parts_f+0x9c>
     f60:	0a c0       	rjmp	.+20     	; 0xf76 <__fpcmp_parts_f+0xa2>
     f62:	82 17       	cp	r24, r18
     f64:	93 07       	cpc	r25, r19
     f66:	a4 07       	cpc	r26, r20
     f68:	b5 07       	cpc	r27, r21
     f6a:	40 f4       	brcc	.+16     	; 0xf7c <__fpcmp_parts_f+0xa8>
     f6c:	11 23       	and	r17, r17
     f6e:	19 f0       	breq	.+6      	; 0xf76 <__fpcmp_parts_f+0xa2>
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <__fpcmp_parts_f+0xac>
     f76:	6f ef       	ldi	r22, 0xFF	; 255
     f78:	7f ef       	ldi	r23, 0xFF	; 255
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <__fpcmp_parts_f+0xac>
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	cb 01       	movw	r24, r22
     f82:	1f 91       	pop	r17
     f84:	08 95       	ret

00000f86 <OS_TaskCreate>:

static OS_struct taskArray [MAX_NUM_OF_TASKS];
static u8 taskCounter = 0;

OS_feedback OS_TaskCreate(fncPtr local_function, u16 periodicity, OS_state default_state,u8 local_delay)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	27 97       	sbiw	r28, 0x07	; 7
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	9b 83       	std	Y+3, r25	; 0x03
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	7d 83       	std	Y+5, r23	; 0x05
     fa0:	6c 83       	std	Y+4, r22	; 0x04
     fa2:	4e 83       	std	Y+6, r20	; 0x06
     fa4:	2f 83       	std	Y+7, r18	; 0x07
	OS_feedback status=OK_VALID;
     fa6:	19 82       	std	Y+1, r1	; 0x01
   if (local_function==NULLPTR)
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	19 f4       	brne	.+6      	; 0xfb6 <OS_TaskCreate+0x30>
   {
	   status=NOK_NULL_PTR;
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	68 c0       	rjmp	.+208    	; 0x1086 <OS_TaskCreate+0x100>
   }
   else if (periodicity>HYPER_PERIOD)
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	24 e0       	ldi	r18, 0x04	; 4
     fbc:	81 3b       	cpi	r24, 0xB1	; 177
     fbe:	92 07       	cpc	r25, r18
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <OS_TaskCreate+0x42>
   {
	  status=NOK_HYPER_PERIOD_VIOLATION;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	5f c0       	rjmp	.+190    	; 0x1086 <OS_TaskCreate+0x100>
   }
   else if (taskCounter>=MAX_NUM_OF_TASKS)
     fc8:	80 91 88 02 	lds	r24, 0x0288
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	18 f0       	brcs	.+6      	; 0xfd6 <OS_TaskCreate+0x50>
   {
	   status=NOK_TASK_COUNT_VIOLATION;
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	58 c0       	rjmp	.+176    	; 0x1086 <OS_TaskCreate+0x100>
   }
   else
   {
	   	taskArray[taskCounter].function=local_function;
     fd6:	80 91 88 02 	lds	r24, 0x0288
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	c9 01       	movw	r24, r18
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	fc 01       	movw	r30, r24
     fee:	e7 57       	subi	r30, 0x77	; 119
     ff0:	fd 4f       	sbci	r31, 0xFD	; 253
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
	   	taskArray[taskCounter].task_Periodicity=periodicity;
     ffa:	80 91 88 02 	lds	r24, 0x0288
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4c 81       	ldd	r20, Y+4	; 0x04
    1004:	c9 01       	movw	r24, r18
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	fc 01       	movw	r30, r24
    1014:	e4 57       	subi	r30, 0x74	; 116
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	40 83       	st	Z, r20
	   	taskArray[taskCounter].task_state=default_state;
    101a:	80 91 88 02 	lds	r24, 0x0288
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	c9 01       	movw	r24, r18
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	fc 01       	movw	r30, r24
    1034:	e7 57       	subi	r30, 0x77	; 119
    1036:	fd 4f       	sbci	r31, 0xFD	; 253
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	80 83       	st	Z, r24
		taskArray[taskCounter].Task_tick_counter=TICK_TIME;
    103c:	80 91 88 02 	lds	r24, 0x0288
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	c9 01       	movw	r24, r18
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	fc 01       	movw	r30, r24
    1054:	e3 57       	subi	r30, 0x73	; 115
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	84 e1       	ldi	r24, 0x14	; 20
    105a:	80 83       	st	Z, r24
		taskArray[taskCounter].delay=local_delay;
    105c:	80 91 88 02 	lds	r24, 0x0288
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	c9 01       	movw	r24, r18
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	fc 01       	movw	r30, r24
    1074:	e2 57       	subi	r30, 0x72	; 114
    1076:	fd 4f       	sbci	r31, 0xFD	; 253
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	80 83       	st	Z, r24
	   	taskCounter++;
    107c:	80 91 88 02 	lds	r24, 0x0288
    1080:	8f 5f       	subi	r24, 0xFF	; 255
    1082:	80 93 88 02 	sts	0x0288, r24
   }
	return status;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
}
    1088:	27 96       	adiw	r28, 0x07	; 7
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <OS_Task_Handler>:

/* LInked to ISR --- Time --- Task Ststes by ms*/
void OS_Task_Handler(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
  u8 Task_id;
  for (Task_id=0;Task_id<taskCounter;Task_id++)
    10a4:	19 82       	std	Y+1, r1	; 0x01
    10a6:	80 c0       	rjmp	.+256    	; 0x11a8 <__stack+0xa9>
  {
	    if (taskArray[Task_id].task_state!=SUSPENDED)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	c9 01       	movw	r24, r18
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	fc 01       	movw	r30, r24
    10c0:	e7 57       	subi	r30, 0x77	; 119
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <OS_Task_Handler+0x32>
    10ca:	6b c0       	rjmp	.+214    	; 0x11a2 <__stack+0xa3>
	    {
			//using in first system first delay only
		    if (taskArray[Task_id].Task_tick_counter>=taskArray[Task_id].task_Periodicity)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	c9 01       	movw	r24, r18
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	82 0f       	add	r24, r18
    10da:	93 1f       	adc	r25, r19
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	fc 01       	movw	r30, r24
    10e2:	e3 57       	subi	r30, 0x73	; 115
    10e4:	fd 4f       	sbci	r31, 0xFD	; 253
    10e6:	40 81       	ld	r20, Z
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	c9 01       	movw	r24, r18
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	82 0f       	add	r24, r18
    10f6:	93 1f       	adc	r25, r19
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	fc 01       	movw	r30, r24
    10fe:	e4 57       	subi	r30, 0x74	; 116
    1100:	fd 4f       	sbci	r31, 0xFD	; 253
    1102:	80 81       	ld	r24, Z
    1104:	48 17       	cp	r20, r24
    1106:	78 f1       	brcs	.+94     	; 0x1166 <__stack+0x67>
		    {
			    taskArray[Task_id].task_state=READY;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	c9 01       	movw	r24, r18
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	fc 01       	movw	r30, r24
    1120:	e7 57       	subi	r30, 0x77	; 119
    1122:	fd 4f       	sbci	r31, 0xFD	; 253
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	80 83       	st	Z, r24
			    taskArray[Task_id].Task_tick_counter=TICK_TIME+taskArray[Task_id].delay; //to setup time user need after first periodicity
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	48 2f       	mov	r20, r24
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	c9 01       	movw	r24, r18
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 0f       	add	r24, r18
    113c:	93 1f       	adc	r25, r19
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	fc 01       	movw	r30, r24
    1144:	e2 57       	subi	r30, 0x72	; 114
    1146:	fd 4f       	sbci	r31, 0xFD	; 253
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	2c 5e       	subi	r18, 0xEC	; 236
    114e:	ca 01       	movw	r24, r20
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	fc 01       	movw	r30, r24
    115e:	e3 57       	subi	r30, 0x73	; 115
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	20 83       	st	Z, r18
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <__stack+0xa3>
		    }
		    else
		    {
			    taskArray[Task_id].Task_tick_counter+=TICK_TIME;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	48 2f       	mov	r20, r24
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	c9 01       	movw	r24, r18
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	fc 01       	movw	r30, r24
    1182:	e3 57       	subi	r30, 0x73	; 115
    1184:	fd 4f       	sbci	r31, 0xFD	; 253
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	2c 5e       	subi	r18, 0xEC	; 236
    118c:	ca 01       	movw	r24, r20
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	84 0f       	add	r24, r20
    1194:	95 1f       	adc	r25, r21
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	fc 01       	movw	r30, r24
    119c:	e3 57       	subi	r30, 0x73	; 115
    119e:	fd 4f       	sbci	r31, 0xFD	; 253
    11a0:	20 83       	st	Z, r18

/* LInked to ISR --- Time --- Task Ststes by ms*/
void OS_Task_Handler(void)
{
  u8 Task_id;
  for (Task_id=0;Task_id<taskCounter;Task_id++)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	90 91 88 02 	lds	r25, 0x0288
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	89 17       	cp	r24, r25
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__stack+0xb5>
    11b2:	7a cf       	rjmp	.-268    	; 0x10a8 <OS_Task_Handler+0xe>
		    {
			    taskArray[Task_id].Task_tick_counter+=TICK_TIME;
		    }
	    }  
  }
}
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <OS_TaskExecution>:


void OS_TaskExecution(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	u8 Task_id;
	for(Task_id = 0; Task_id<taskCounter; Task_id++)
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	35 c0       	rjmp	.+106    	; 0x1234 <OS_TaskExecution+0x78>
	{

		if(taskArray[Task_id].task_state == READY)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	c9 01       	movw	r24, r18
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	82 0f       	add	r24, r18
    11d8:	93 1f       	adc	r25, r19
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	fc 01       	movw	r30, r24
    11e2:	e7 57       	subi	r30, 0x77	; 119
    11e4:	fd 4f       	sbci	r31, 0xFD	; 253
    11e6:	80 81       	ld	r24, Z
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	09 f5       	brne	.+66     	; 0x122e <OS_TaskExecution+0x72>
		{
			
			taskArray[Task_id].function();
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	c9 01       	movw	r24, r18
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	fc 01       	movw	r30, r24
    1202:	e7 57       	subi	r30, 0x77	; 119
    1204:	fd 4f       	sbci	r31, 0xFD	; 253
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	09 95       	icall
			taskArray[Task_id].task_state = BLOCKED;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	c9 01       	movw	r24, r18
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	fc 01       	movw	r30, r24
    1226:	e7 57       	subi	r30, 0x77	; 119
    1228:	fd 4f       	sbci	r31, 0xFD	; 253
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 83       	st	Z, r24


void OS_TaskExecution(void)
{
	u8 Task_id;
	for(Task_id = 0; Task_id<taskCounter; Task_id++)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	90 91 88 02 	lds	r25, 0x0288
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	89 17       	cp	r24, r25
    123c:	30 f2       	brcs	.-116    	; 0x11ca <OS_TaskExecution+0xe>
			taskArray[Task_id].function();
			taskArray[Task_id].task_state = BLOCKED;
		}
	}

}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <Task_LaneKeep_40mS>:
#include "../../APP_LAYER/Emer_Break/Emer_Break.h"
#include "../../APP_LAYER/Lane_Keep/Lane_Keep.h"
#include "../../MCAL/DIO/DIO.h"
#include "../../APP_LAYER/CAN_Communication/CAN_COMM.h"
void Task_LaneKeep_40mS (void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	//Dio_FlipChannel(PINA1);
	Lane_Keep_Control();
    124e:	0e 94 22 1a 	call	0x3444	; 0x3444 <Lane_Keep_Control>
}
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <Task_DistanceReadStart_80mS>:
void Task_DistanceReadStart_80mS(void)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	//Dio_FlipChannel(PINA0);
	Distance_ReadStart();
    1260:	0e 94 98 1a 	call	0x3530	; 0x3530 <Distance_ReadStart>
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <Task_EmerBreak_100mS>:
void Task_EmerBreak_100mS(void)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	//Dio_FlipChannel(PINA2);
	Emergency_Break();
    1272:	0e 94 66 1a 	call	0x34cc	; 0x34cc <Emergency_Break>
}
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Task_AccCtrl_120mS>:
void Task_AccCtrl_120mS(void)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	//Dio_FlipChannel(PINA3);
	ACC_voidUpdateSpeed();
    1284:	0e 94 3d 1b 	call	0x367a	; 0x367a <ACC_voidUpdateSpeed>
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <Task_COM_20ms>:
void Task_COM_20ms (void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	//Dio_FlipChannel(PINA7);
	COM_handle();
    1296:	0e 94 a1 1a 	call	0x3542	; 0x3542 <COM_handle>
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <TMR1_Init>:
static void (*Timer1_ICU_Fptr) (void)=NULLPTR;



void TMR1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <TMR1_Init+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <TMR1_Init+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3c 83       	std	Y+4, r19	; 0x04
    12b8:	2b 83       	std	Y+3, r18	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <TMR1_Init+0x26>
    12c4:	56 c0       	rjmp	.+172    	; 0x1372 <TMR1_Init+0xd2>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	23 30       	cpi	r18, 0x03	; 3
    12cc:	31 05       	cpc	r19, r1
    12ce:	54 f4       	brge	.+20     	; 0x12e4 <TMR1_Init+0x44>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	99 f0       	breq	.+38     	; 0x12fe <TMR1_Init+0x5e>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	59 f1       	breq	.+86     	; 0x1338 <TMR1_Init+0x98>
    12e2:	9d c0       	rjmp	.+314    	; 0x141e <TMR1_Init+0x17e>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <TMR1_Init+0x50>
    12ee:	5e c0       	rjmp	.+188    	; 0x13ac <TMR1_Init+0x10c>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	24 30       	cpi	r18, 0x04	; 4
    12f6:	31 05       	cpc	r19, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <TMR1_Init+0x5c>
    12fa:	75 c0       	rjmp	.+234    	; 0x13e6 <TMR1_Init+0x146>
    12fc:	90 c0       	rjmp	.+288    	; 0x141e <TMR1_Init+0x17e>
	{
		case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A,WGM10);
    12fe:	af e4       	ldi	r26, 0x4F	; 79
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	ef e4       	ldi	r30, 0x4F	; 79
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    130c:	af e4       	ldi	r26, 0x4F	; 79
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ef e4       	ldi	r30, 0x4F	; 79
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8d 7f       	andi	r24, 0xFD	; 253
    1318:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM12);
    131a:	ae e4       	ldi	r26, 0x4E	; 78
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ee e4       	ldi	r30, 0x4E	; 78
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	87 7f       	andi	r24, 0xF7	; 247
    1326:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    1328:	ae e4       	ldi	r26, 0x4E	; 78
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ee e4       	ldi	r30, 0x4E	; 78
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7e       	andi	r24, 0xEF	; 239
    1334:	8c 93       	st	X, r24
    1336:	73 c0       	rjmp	.+230    	; 0x141e <TMR1_Init+0x17e>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1338:	af e4       	ldi	r26, 0x4F	; 79
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ef e4       	ldi	r30, 0x4F	; 79
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    1346:	af e4       	ldi	r26, 0x4F	; 79
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e4       	ldi	r30, 0x4F	; 79
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1354:	ae e4       	ldi	r26, 0x4E	; 78
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ee e4       	ldi	r30, 0x4E	; 78
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	88 60       	ori	r24, 0x08	; 8
    1360:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1362:	ae e4       	ldi	r26, 0x4E	; 78
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ee e4       	ldi	r30, 0x4E	; 78
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 61       	ori	r24, 0x10	; 16
    136e:	8c 93       	st	X, r24
    1370:	56 c0       	rjmp	.+172    	; 0x141e <TMR1_Init+0x17e>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A,WGM10);
    1372:	af e4       	ldi	r26, 0x4F	; 79
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8e 7f       	andi	r24, 0xFE	; 254
    137e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,WGM11);
    1380:	af e4       	ldi	r26, 0x4F	; 79
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8d 7f       	andi	r24, 0xFD	; 253
    138c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    138e:	ae e4       	ldi	r26, 0x4E	; 78
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ee e4       	ldi	r30, 0x4E	; 78
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,WGM13);
    139c:	ae e4       	ldi	r26, 0x4E	; 78
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ee e4       	ldi	r30, 0x4E	; 78
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7e       	andi	r24, 0xEF	; 239
    13a8:	8c 93       	st	X, r24
    13aa:	39 c0       	rjmp	.+114    	; 0x141e <TMR1_Init+0x17e>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:  // mode 14
		CLR_BIT(TCCR1A,WGM10);
    13ac:	af e4       	ldi	r26, 0x4F	; 79
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ef e4       	ldi	r30, 0x4F	; 79
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8e 7f       	andi	r24, 0xFE	; 254
    13b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    13ba:	af e4       	ldi	r26, 0x4F	; 79
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ef e4       	ldi	r30, 0x4F	; 79
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    13c8:	ae e4       	ldi	r26, 0x4E	; 78
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ee e4       	ldi	r30, 0x4E	; 78
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 60       	ori	r24, 0x08	; 8
    13d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    13d6:	ae e4       	ldi	r26, 0x4E	; 78
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ee e4       	ldi	r30, 0x4E	; 78
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	80 61       	ori	r24, 0x10	; 16
    13e2:	8c 93       	st	X, r24
    13e4:	1c c0       	rjmp	.+56     	; 0x141e <TMR1_Init+0x17e>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    13e6:	af e4       	ldi	r26, 0x4F	; 79
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ef e4       	ldi	r30, 0x4F	; 79
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    13f4:	af e4       	ldi	r26, 0x4F	; 79
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ef e4       	ldi	r30, 0x4F	; 79
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1402:	ae e4       	ldi	r26, 0x4E	; 78
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ee e4       	ldi	r30, 0x4E	; 78
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 60       	ori	r24, 0x08	; 8
    140e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    1410:	ae e4       	ldi	r26, 0x4E	; 78
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e4       	ldi	r30, 0x4E	; 78
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 61       	ori	r24, 0x10	; 16
    141c:	8c 93       	st	X, r24
		break;
	}

	TCCR1B&=0XF8;
    141e:	ae e4       	ldi	r26, 0x4E	; 78
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ee e4       	ldi	r30, 0x4E	; 78
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	88 7f       	andi	r24, 0xF8	; 248
    142a:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    142c:	ae e4       	ldi	r26, 0x4E	; 78
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	90 81       	ld	r25, Z
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	89 2b       	or	r24, r25
    143a:	8c 93       	st	X, r24

}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <TMR1_Init1_OCRA1Mode>:

void TMR1_Init1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <TMR1_Init1_OCRA1Mode+0x6>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	31 f0       	breq	.+12     	; 0x1476 <TMR1_Init1_OCRA1Mode+0x2c>
    146a:	2a 81       	ldd	r18, Y+2	; 0x02
    146c:	3b 81       	ldd	r19, Y+3	; 0x03
    146e:	21 30       	cpi	r18, 0x01	; 1
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <TMR1_Init1_OCRA1Mode+0x4a>
    1474:	1d c0       	rjmp	.+58     	; 0x14b0 <TMR1_Init1_OCRA1Mode+0x66>
	{
		case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1A0); // CLR @ compare 
    1476:	af e4       	ldi	r26, 0x4F	; 79
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ef e4       	ldi	r30, 0x4F	; 79
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	8f 7b       	andi	r24, 0xBF	; 191
    1482:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1); // SET @ top
    1484:	af e4       	ldi	r26, 0x4F	; 79
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	8c 93       	st	X, r24
    1492:	0e c0       	rjmp	.+28     	; 0x14b0 <TMR1_Init1_OCRA1Mode+0x66>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    1494:	af e4       	ldi	r26, 0x4F	; 79
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ef e4       	ldi	r30, 0x4F	; 79
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 64       	ori	r24, 0x40	; 64
    14a0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    14a2:	af e4       	ldi	r26, 0x4F	; 79
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ef e4       	ldi	r30, 0x4F	; 79
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	8c 93       	st	X, r24
		break;
	}
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <TMR1_OCRB1Mode>:
void TMR1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <TMR1_OCRB1Mode+0x6>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3b 83       	std	Y+3, r19	; 0x03
    14d2:	2a 83       	std	Y+2, r18	; 0x02
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	31 f0       	breq	.+12     	; 0x14e8 <TMR1_OCRB1Mode+0x2c>
    14dc:	2a 81       	ldd	r18, Y+2	; 0x02
    14de:	3b 81       	ldd	r19, Y+3	; 0x03
    14e0:	21 30       	cpi	r18, 0x01	; 1
    14e2:	31 05       	cpc	r19, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <TMR1_OCRB1Mode+0x4a>
    14e6:	1d c0       	rjmp	.+58     	; 0x1522 <TMR1_OCRB1Mode+0x66>
	{
		case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A,COM1B0);
    14e8:	af e4       	ldi	r26, 0x4F	; 79
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ef e4       	ldi	r30, 0x4F	; 79
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8f 7e       	andi	r24, 0xEF	; 239
    14f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    14f6:	af e4       	ldi	r26, 0x4F	; 79
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ef e4       	ldi	r30, 0x4F	; 79
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 62       	ori	r24, 0x20	; 32
    1502:	8c 93       	st	X, r24
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <TMR1_OCRB1Mode+0x66>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    1506:	af e4       	ldi	r26, 0x4F	; 79
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ef e4       	ldi	r30, 0x4F	; 79
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	80 61       	ori	r24, 0x10	; 16
    1512:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    1514:	af e4       	ldi	r26, 0x4F	; 79
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ef e4       	ldi	r30, 0x4F	; 79
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	80 62       	ori	r24, 0x20	; 32
    1520:	8c 93       	st	X, r24
		break;
	}
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <TMR1_SetCompareMatchValueA>:
void TMR1_SetCompareMatchValueA(u16 CompareVal){
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <TMR1_SetCompareMatchValueA+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = CompareVal ;
    153c:	ea e4       	ldi	r30, 0x4A	; 74
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <TMR1_Stop>:

void TMR1_Stop  (void) {
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,CS10);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8e 7f       	andi	r24, 0xFE	; 254
    1566:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    1568:	ae e4       	ldi	r26, 0x4E	; 78
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    1576:	ae e4       	ldi	r26, 0x4E	; 78
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ee e4       	ldi	r30, 0x4E	; 78
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8b 7f       	andi	r24, 0xFB	; 251
    1582:	8c 93       	st	X, r24
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <PWM_Freq_HZ>:

void PWM_Freq_HZ(u16 freq)
{
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <PWM_Freq_HZ+0xa>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
	// under condition of tick time = 4 us 
		
	ICR1=(((u32)1000000/freq)/4)-1;
    159c:	06 e4       	ldi	r16, 0x46	; 70
    159e:	10 e0       	ldi	r17, 0x00	; 0
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	9c 01       	movw	r18, r24
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	80 e9       	ldi	r24, 0x90	; 144
    15ac:	90 ed       	ldi	r25, 0xD0	; 208
    15ae:	a3 e0       	ldi	r26, 0x03	; 3
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 93 1c 	call	0x3926	; 0x3926 <__udivmodsi4>
    15ba:	da 01       	movw	r26, r20
    15bc:	c9 01       	movw	r24, r18
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f8 01       	movw	r30, r16
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <PWM_Duty_NonInverting>:

void PWM_Duty_NonInverting(f32 duty)
{
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <PWM_Duty_NonInverting+0xa>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <PWM_Duty_NonInverting+0xc>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	69 83       	std	Y+1, r22	; 0x01
    15e6:	7a 83       	std	Y+2, r23	; 0x02
    15e8:	8b 83       	std	Y+3, r24	; 0x03
    15ea:	9c 83       	std	Y+4, r25	; 0x04
	if (duty<=100)
    15ec:	69 81       	ldd	r22, Y+1	; 0x01
    15ee:	7a 81       	ldd	r23, Y+2	; 0x02
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	48 ec       	ldi	r20, 0xC8	; 200
    15fa:	52 e4       	ldi	r21, 0x42	; 66
    15fc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__lesf2>
    1600:	18 16       	cp	r1, r24
    1602:	0c f4       	brge	.+2      	; 0x1606 <PWM_Duty_NonInverting+0x32>
    1604:	6e c0       	rjmp	.+220    	; 0x16e2 <PWM_Duty_NonInverting+0x10e>
	{
		OCR1A=(((f32)duty*(ICR1+1))/100)-1;
    1606:	0a e4       	ldi	r16, 0x4A	; 74
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	e6 e4       	ldi	r30, 0x46	; 70
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	cc 01       	movw	r24, r24
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	29 81       	ldd	r18, Y+1	; 0x01
    162c:	3a 81       	ldd	r19, Y+2	; 0x02
    162e:	4b 81       	ldd	r20, Y+3	; 0x03
    1630:	5c 81       	ldd	r21, Y+4	; 0x04
    1632:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	48 ec       	ldi	r20, 0xC8	; 200
    1644:	52 e4       	ldi	r21, 0x42	; 66
    1646:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	f8 01       	movw	r30, r16
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	80 83       	st	Z, r24
		OCR1B=(((f32)duty*(ICR1+1))/100)-1;
    1674:	08 e4       	ldi	r16, 0x48	; 72
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	e6 e4       	ldi	r30, 0x46	; 70
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	cc 01       	movw	r24, r24
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	29 81       	ldd	r18, Y+1	; 0x01
    169a:	3a 81       	ldd	r19, Y+2	; 0x02
    169c:	4b 81       	ldd	r20, Y+3	; 0x03
    169e:	5c 81       	ldd	r21, Y+4	; 0x04
    16a0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	48 ec       	ldi	r20, 0xC8	; 200
    16b2:	52 e4       	ldi	r21, 0x42	; 66
    16b4:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	f8 01       	movw	r30, r16
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret

000016f4 <PWM_Duty_Inverting>:
void PWM_Duty_Inverting(f32 duty)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <PWM_Duty_Inverting+0xa>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <PWM_Duty_Inverting+0xc>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	69 83       	std	Y+1, r22	; 0x01
    1706:	7a 83       	std	Y+2, r23	; 0x02
    1708:	8b 83       	std	Y+3, r24	; 0x03
    170a:	9c 83       	std	Y+4, r25	; 0x04
	if (duty<=100)
    170c:	69 81       	ldd	r22, Y+1	; 0x01
    170e:	7a 81       	ldd	r23, Y+2	; 0x02
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	48 ec       	ldi	r20, 0xC8	; 200
    171a:	52 e4       	ldi	r21, 0x42	; 66
    171c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__lesf2>
    1720:	18 16       	cp	r1, r24
    1722:	0c f4       	brge	.+2      	; 0x1726 <PWM_Duty_Inverting+0x32>
    1724:	74 c0       	rjmp	.+232    	; 0x180e <PWM_Duty_Inverting+0x11a>
	{
		duty = 100 - duty;
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	88 ec       	ldi	r24, 0xC8	; 200
    172c:	92 e4       	ldi	r25, 0x42	; 66
    172e:	29 81       	ldd	r18, Y+1	; 0x01
    1730:	3a 81       	ldd	r19, Y+2	; 0x02
    1732:	4b 81       	ldd	r20, Y+3	; 0x03
    1734:	5c 81       	ldd	r21, Y+4	; 0x04
    1736:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	ab 83       	std	Y+3, r26	; 0x03
    1744:	bc 83       	std	Y+4, r27	; 0x04
		OCR1A=(((f32)duty*(ICR1+1))/100);
    1746:	0a e4       	ldi	r16, 0x4A	; 74
    1748:	10 e0       	ldi	r17, 0x00	; 0
    174a:	e6 e4       	ldi	r30, 0x46	; 70
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	91 81       	ldd	r25, Z+1	; 0x01
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	cc 01       	movw	r24, r24
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	29 81       	ldd	r18, Y+1	; 0x01
    176c:	3a 81       	ldd	r19, Y+2	; 0x02
    176e:	4b 81       	ldd	r20, Y+3	; 0x03
    1770:	5c 81       	ldd	r21, Y+4	; 0x04
    1772:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	48 ec       	ldi	r20, 0xC8	; 200
    1784:	52 e4       	ldi	r21, 0x42	; 66
    1786:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	f8 01       	movw	r30, r16
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
		OCR1B=(((f32)duty*(ICR1+1))/100)-1;
    17a0:	08 e4       	ldi	r16, 0x48	; 72
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	e6 e4       	ldi	r30, 0x46	; 70
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	cc 01       	movw	r24, r24
    17b0:	a0 e0       	ldi	r26, 0x00	; 0
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	29 81       	ldd	r18, Y+1	; 0x01
    17c6:	3a 81       	ldd	r19, Y+2	; 0x02
    17c8:	4b 81       	ldd	r20, Y+3	; 0x03
    17ca:	5c 81       	ldd	r21, Y+4	; 0x04
    17cc:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	48 ec       	ldi	r20, 0xC8	; 200
    17de:	52 e4       	ldi	r21, 0x42	; 66
    17e0:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 df 01 	call	0x3be	; 0x3be <__subsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
	}
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	88 23       	and	r24, r24
    1830:	41 f4       	brne	.+16     	; 0x1842 <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    1832:	ae e4       	ldi	r26, 0x4E	; 78
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ee e4       	ldi	r30, 0x4E	; 78
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	39 f4       	brne	.+14     	; 0x1856 <Timer1_InputCaptureEdge+0x36>
	CLR_BIT(TCCR1B,ICES1);
    1848:	ae e4       	ldi	r26, 0x4E	; 78
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ee e4       	ldi	r30, 0x4E	; 78
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 7b       	andi	r24, 0xBF	; 191
    1854:	8c 93       	st	X, r24
}
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <Timer1_ICU_InterruptEnable>:

/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    1866:	a7 e5       	ldi	r26, 0x57	; 87
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e7 e5       	ldi	r30, 0x57	; 87
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 62       	ori	r24, 0x20	; 32
    1872:	8c 93       	st	X, r24
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TICIE1);
    1882:	a7 e5       	ldi	r26, 0x57	; 87
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e7 e5       	ldi	r30, 0x57	; 87
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7d       	andi	r24, 0xDF	; 223
    188e:	8c 93       	st	X, r24
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    189e:	a7 e5       	ldi	r26, 0x57	; 87
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e7 e5       	ldi	r30, 0x57	; 87
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	8c 93       	st	X, r24
}
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE1);
    18ba:	a7 e5       	ldi	r26, 0x57	; 87
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e7 e5       	ldi	r30, 0x57	; 87
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8b 7f       	andi	r24, 0xFB	; 251
    18c6:	8c 93       	st	X, r24
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    18d6:	a7 e5       	ldi	r26, 0x57	; 87
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e7 e5       	ldi	r30, 0x57	; 87
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	80 61       	ori	r24, 0x10	; 16
    18e2:	8c 93       	st	X, r24
}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1A);
    18f2:	a7 e5       	ldi	r26, 0x57	; 87
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e5       	ldi	r30, 0x57	; 87
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	8f 7e       	andi	r24, 0xEF	; 239
    18fe:	8c 93       	st	X, r24
}
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    190e:	a7 e5       	ldi	r26, 0x57	; 87
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e7 e5       	ldi	r30, 0x57	; 87
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	88 60       	ori	r24, 0x08	; 8
    191a:	8c 93       	st	X, r24
}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE1B);
    192a:	a7 e5       	ldi	r26, 0x57	; 87
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e5       	ldi	r30, 0x57	; 87
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	87 7f       	andi	r24, 0xF7	; 247
    1936:	8c 93       	st	X, r24
}
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <Timer1_OVF_SetCallBack+0x6>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	90 93 a8 02 	sts	0x02A8, r25
    1954:	80 93 a7 02 	sts	0x02A7, r24
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <Timer1_OCA_SetCallBack+0x6>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	90 93 aa 02 	sts	0x02AA, r25
    1978:	80 93 a9 02 	sts	0x02A9, r24
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <Timer1_OCB_SetCallBack+0x6>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	90 93 ac 02 	sts	0x02AC, r25
    199c:	80 93 ab 02 	sts	0x02AB, r24
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <Timer1_ICU_SetCallBack+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	90 93 ae 02 	sts	0x02AE, r25
    19c0:	80 93 ad 02 	sts	0x02AD, r24
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <__vector_14>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	00 90 5b 00 	lds	r0, 0x005B
    19da:	0f 92       	push	r0
    19dc:	11 24       	eor	r1, r1
    19de:	2f 93       	push	r18
    19e0:	3f 93       	push	r19
    19e2:	4f 93       	push	r20
    19e4:	5f 93       	push	r21
    19e6:	6f 93       	push	r22
    19e8:	7f 93       	push	r23
    19ea:	8f 93       	push	r24
    19ec:	9f 93       	push	r25
    19ee:	af 93       	push	r26
    19f0:	bf 93       	push	r27
    19f2:	ef 93       	push	r30
    19f4:	ff 93       	push	r31
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!= NULLPTR)
    19fe:	80 91 a7 02 	lds	r24, 0x02A7
    1a02:	90 91 a8 02 	lds	r25, 0x02A8
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <__vector_14+0x46>
	{
		Timer1_OVF_Fptr();
    1a0a:	e0 91 a7 02 	lds	r30, 0x02A7
    1a0e:	f0 91 a8 02 	lds	r31, 0x02A8
    1a12:	09 95       	icall
	}
}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	ff 91       	pop	r31
    1a1a:	ef 91       	pop	r30
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	00 92 5b 00 	sts	0x005B, r0
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f 90       	pop	r0
    1a3c:	1f 90       	pop	r1
    1a3e:	18 95       	reti

00001a40 <__vector_12>:
ISR(TIMER1_OCA_vect)
{
    1a40:	1f 92       	push	r1
    1a42:	0f 92       	push	r0
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	0f 92       	push	r0
    1a48:	00 90 5b 00 	lds	r0, 0x005B
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    1a70:	80 91 a9 02 	lds	r24, 0x02A9
    1a74:	90 91 aa 02 	lds	r25, 0x02AA
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <__vector_12+0x46>
	{
		Timer1_OCA_Fptr();
    1a7c:	e0 91 a9 02 	lds	r30, 0x02A9
    1a80:	f0 91 aa 02 	lds	r31, 0x02AA
    1a84:	09 95       	icall
	}
}
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	00 92 5b 00 	sts	0x005B, r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <__vector_13>:
ISR(TIMER1_OCB_vect)
{
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	00 90 5b 00 	lds	r0, 0x005B
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    1ae2:	80 91 ab 02 	lds	r24, 0x02AB
    1ae6:	90 91 ac 02 	lds	r25, 0x02AC
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <__vector_13+0x46>
	{
		Timer1_OCB_Fptr();
    1aee:	e0 91 ab 02 	lds	r30, 0x02AB
    1af2:	f0 91 ac 02 	lds	r31, 0x02AC
    1af6:	09 95       	icall
	}
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	00 92 5b 00 	sts	0x005B, r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_11>:
ISR(TIMER1_ICU_vect)
{
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	00 90 5b 00 	lds	r0, 0x005B
    1b30:	0f 92       	push	r0
    1b32:	11 24       	eor	r1, r1
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    1b54:	80 91 ad 02 	lds	r24, 0x02AD
    1b58:	90 91 ae 02 	lds	r25, 0x02AE
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__vector_11+0x46>
	{
		Timer1_ICU_Fptr();
    1b60:	e0 91 ad 02 	lds	r30, 0x02AD
    1b64:	f0 91 ae 02 	lds	r31, 0x02AE
    1b68:	09 95       	icall
	}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	ff 91       	pop	r31
    1b70:	ef 91       	pop	r30
    1b72:	bf 91       	pop	r27
    1b74:	af 91       	pop	r26
    1b76:	9f 91       	pop	r25
    1b78:	8f 91       	pop	r24
    1b7a:	7f 91       	pop	r23
    1b7c:	6f 91       	pop	r22
    1b7e:	5f 91       	pop	r21
    1b80:	4f 91       	pop	r20
    1b82:	3f 91       	pop	r19
    1b84:	2f 91       	pop	r18
    1b86:	0f 90       	pop	r0
    1b88:	00 92 5b 00 	sts	0x005B, r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <TIMER0_Init>:

/******************* TIMER0 ********************/
static void (*Timer0_OVF_Fptr)(void)=NULLPTR;
static void (*Timer0_OC_Fptr)(void)=NULLPTR;
void TIMER0_Init (Timer0Mode_type local_mode,Timer0Scaler_type scaler)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <TIMER0_Init+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <TIMER0_Init+0x8>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	6a 83       	std	Y+2, r22	; 0x02
	//Select TIMER0 Mode
	switch(local_mode)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	3c 83       	std	Y+4, r19	; 0x04
    1bae:	2b 83       	std	Y+3, r18	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	21 f1       	breq	.+72     	; 0x1c02 <TIMER0_Init+0x6c>
    1bba:	2b 81       	ldd	r18, Y+3	; 0x03
    1bbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <TIMER0_Init+0x38>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	61 f0       	breq	.+24     	; 0x1be4 <TIMER0_Init+0x4e>
    1bcc:	46 c0       	rjmp	.+140    	; 0x1c5a <TIMER0_Init+0xc4>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	22 30       	cpi	r18, 0x02	; 2
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	21 f1       	breq	.+72     	; 0x1c20 <TIMER0_Init+0x8a>
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	9c 81       	ldd	r25, Y+4	; 0x04
    1bdc:	83 30       	cpi	r24, 0x03	; 3
    1bde:	91 05       	cpc	r25, r1
    1be0:	71 f1       	breq	.+92     	; 0x1c3e <TIMER0_Init+0xa8>
    1be2:	3b c0       	rjmp	.+118    	; 0x1c5a <TIMER0_Init+0xc4>
	{
		case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,WGM00);
    1be4:	a3 e5       	ldi	r26, 0x53	; 83
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e3 e5       	ldi	r30, 0x53	; 83
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 7b       	andi	r24, 0xBF	; 191
    1bf0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    1bf2:	a3 e5       	ldi	r26, 0x53	; 83
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e3 e5       	ldi	r30, 0x53	; 83
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	87 7f       	andi	r24, 0xF7	; 247
    1bfe:	8c 93       	st	X, r24
    1c00:	2c c0       	rjmp	.+88     	; 0x1c5a <TIMER0_Init+0xc4>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    1c02:	a3 e5       	ldi	r26, 0x53	; 83
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e3 e5       	ldi	r30, 0x53	; 83
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 64       	ori	r24, 0x40	; 64
    1c0e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,WGM01);
    1c10:	a3 e5       	ldi	r26, 0x53	; 83
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e3 e5       	ldi	r30, 0x53	; 83
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	87 7f       	andi	r24, 0xF7	; 247
    1c1c:	8c 93       	st	X, r24
    1c1e:	1d c0       	rjmp	.+58     	; 0x1c5a <TIMER0_Init+0xc4>
		break;
		case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,WGM00);
    1c20:	a3 e5       	ldi	r26, 0x53	; 83
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e3 e5       	ldi	r30, 0x53	; 83
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8f 7b       	andi	r24, 0xBF	; 191
    1c2c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1c2e:	a3 e5       	ldi	r26, 0x53	; 83
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e3 e5       	ldi	r30, 0x53	; 83
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	88 60       	ori	r24, 0x08	; 8
    1c3a:	8c 93       	st	X, r24
    1c3c:	0e c0       	rjmp	.+28     	; 0x1c5a <TIMER0_Init+0xc4>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    1c3e:	a3 e5       	ldi	r26, 0x53	; 83
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e3 e5       	ldi	r30, 0x53	; 83
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 64       	ori	r24, 0x40	; 64
    1c4a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1c4c:	a3 e5       	ldi	r26, 0x53	; 83
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e3 e5       	ldi	r30, 0x53	; 83
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 60       	ori	r24, 0x08	; 8
    1c58:	8c 93       	st	X, r24
		break;
	}
	TCCR0&=0xF8;//0b11111000
    1c5a:	a3 e5       	ldi	r26, 0x53	; 83
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e3 e5       	ldi	r30, 0x53	; 83
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	88 7f       	andi	r24, 0xF8	; 248
    1c66:	8c 93       	st	X, r24
	scaler&=0x07;//Filter
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	87 70       	andi	r24, 0x07	; 7
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0|=scaler;
    1c6e:	a3 e5       	ldi	r26, 0x53	; 83
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e3 e5       	ldi	r30, 0x53	; 83
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	90 81       	ld	r25, Z
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	89 2b       	or	r24, r25
    1c7c:	8c 93       	st	X, r24
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <TIMER0_SetStartTime>:
void TIMER0_SetStartTime (u8 TIME)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	0f 92       	push	r0
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=TIME;
    1c98:	e2 e5       	ldi	r30, 0x52	; 82
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	80 83       	st	Z, r24
}
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <TIMER0_OC0Mode>:
void TIMER0_OC0Mode (OC0Mode_type local_mode)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <TIMER0_OC0Mode+0x6>
    1cae:	0f 92       	push	r0
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	switch(local_mode)
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	3b 83       	std	Y+3, r19	; 0x03
    1cbe:	2a 83       	std	Y+2, r18	; 0x02
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	21 f1       	breq	.+72     	; 0x1d12 <TIMER0_OC0Mode+0x6a>
    1cca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ccc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <TIMER0_OC0Mode+0x36>
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <TIMER0_OC0Mode+0x4c>
    1cdc:	46 c0       	rjmp	.+140    	; 0x1d6a <TIMER0_OC0Mode+0xc2>
    1cde:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	21 f1       	breq	.+72     	; 0x1d30 <TIMER0_OC0Mode+0x88>
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	9b 81       	ldd	r25, Y+3	; 0x03
    1cec:	83 30       	cpi	r24, 0x03	; 3
    1cee:	91 05       	cpc	r25, r1
    1cf0:	71 f1       	breq	.+92     	; 0x1d4e <TIMER0_OC0Mode+0xa6>
    1cf2:	3b c0       	rjmp	.+118    	; 0x1d6a <TIMER0_OC0Mode+0xc2>
	{
		case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,COM00);
    1cf4:	a3 e5       	ldi	r26, 0x53	; 83
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e3 e5       	ldi	r30, 0x53	; 83
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8f 7e       	andi	r24, 0xEF	; 239
    1d00:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    1d02:	a3 e5       	ldi	r26, 0x53	; 83
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e3 e5       	ldi	r30, 0x53	; 83
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8f 7d       	andi	r24, 0xDF	; 223
    1d0e:	8c 93       	st	X, r24
    1d10:	2c c0       	rjmp	.+88     	; 0x1d6a <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_TOGGLE:
		SET_BIT(TCCR0,COM00);
    1d12:	a3 e5       	ldi	r26, 0x53	; 83
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e3 e5       	ldi	r30, 0x53	; 83
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 61       	ori	r24, 0x10	; 16
    1d1e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,COM01);
    1d20:	a3 e5       	ldi	r26, 0x53	; 83
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	8c 93       	st	X, r24
    1d2e:	1d c0       	rjmp	.+58     	; 0x1d6a <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_NON_INVERTING:
		CLR_BIT(TCCR0,COM00);
    1d30:	a3 e5       	ldi	r26, 0x53	; 83
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e3 e5       	ldi	r30, 0x53	; 83
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7e       	andi	r24, 0xEF	; 239
    1d3c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1d3e:	a3 e5       	ldi	r26, 0x53	; 83
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e3 e5       	ldi	r30, 0x53	; 83
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 62       	ori	r24, 0x20	; 32
    1d4a:	8c 93       	st	X, r24
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <TIMER0_OC0Mode+0xc2>
		break;
		case OC0_INVERTING:
		SET_BIT(TCCR0,COM00);
    1d4e:	a3 e5       	ldi	r26, 0x53	; 83
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e3 e5       	ldi	r30, 0x53	; 83
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 61       	ori	r24, 0x10	; 16
    1d5a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1d5c:	a3 e5       	ldi	r26, 0x53	; 83
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e3 e5       	ldi	r30, 0x53	; 83
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 62       	ori	r24, 0x20	; 32
    1d68:	8c 93       	st	X, r24
		break;
	}
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <TIMER0_OVF_Enable>:
void TIMER0_OVF_Enable (void)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    1d7e:	a7 e5       	ldi	r26, 0x57	; 87
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e7 e5       	ldi	r30, 0x57	; 87
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	81 60       	ori	r24, 0x01	; 1
    1d8a:	8c 93       	st	X, r24
}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <TIMER0_OVF_Disable>:
void TIMER0_OVF_Disable (void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TOIE0);
    1d9a:	a7 e5       	ldi	r26, 0x57	; 87
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e7 e5       	ldi	r30, 0x57	; 87
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8e 7f       	andi	r24, 0xFE	; 254
    1da6:	8c 93       	st	X, r24
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <TIMER0_OC_Enable>:
void TIMER0_OC_Enable (void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    1db6:	a7 e5       	ldi	r26, 0x57	; 87
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e7 e5       	ldi	r30, 0x57	; 87
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	82 60       	ori	r24, 0x02	; 2
    1dc2:	8c 93       	st	X, r24
}
    1dc4:	cf 91       	pop	r28
    1dc6:	df 91       	pop	r29
    1dc8:	08 95       	ret

00001dca <TIMER0_OC_Disable>:
void TIMER0_OC_Disable (void)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,OCIE0);
    1dd2:	a7 e5       	ldi	r26, 0x57	; 87
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e7 e5       	ldi	r30, 0x57	; 87
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8d 7f       	andi	r24, 0xFD	; 253
    1dde:	8c 93       	st	X, r24
}
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <TIMER0_OVF_SetCallBack>:
void TIMER0_OVF_SetCallBack (void(*local_fptr)(void))
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <TIMER0_OVF_SetCallBack+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr=local_fptr;
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	9a 81       	ldd	r25, Y+2	; 0x02
    1df8:	90 93 b0 02 	sts	0x02B0, r25
    1dfc:	80 93 af 02 	sts	0x02AF, r24
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <TIMER0_OC_SetCallBack>:
void TIMER0_OC_SetCallBack (void(*local_fptr)(void))
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <TIMER0_OC_SetCallBack+0x6>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01

	Timer0_OC_Fptr=local_fptr;
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	90 93 b2 02 	sts	0x02B2, r25
    1e20:	80 93 b1 02 	sts	0x02B1, r24
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <__vector_16>:

ISR (TIMER0_OVF_vect)
{
    1e2e:	1f 92       	push	r1
    1e30:	0f 92       	push	r0
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	0f 92       	push	r0
    1e36:	00 90 5b 00 	lds	r0, 0x005B
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	TCNT0=6;
    1e5e:	e2 e5       	ldi	r30, 0x52	; 82
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	86 e0       	ldi	r24, 0x06	; 6
    1e64:	80 83       	st	Z, r24
	if(Timer0_OVF_Fptr!=NULLPTR)
    1e66:	80 91 af 02 	lds	r24, 0x02AF
    1e6a:	90 91 b0 02 	lds	r25, 0x02B0
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	29 f0       	breq	.+10     	; 0x1e7c <__vector_16+0x4e>
	{
		Timer0_OVF_Fptr();
    1e72:	e0 91 af 02 	lds	r30, 0x02AF
    1e76:	f0 91 b0 02 	lds	r31, 0x02B0
    1e7a:	09 95       	icall
	}
}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	ff 91       	pop	r31
    1e82:	ef 91       	pop	r30
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	00 92 5b 00 	sts	0x005B, r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <__vector_15>:
ISR (TIMER0_OC_vect)
{
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	00 90 5b 00 	lds	r0, 0x005B
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	2f 93       	push	r18
    1eba:	3f 93       	push	r19
    1ebc:	4f 93       	push	r20
    1ebe:	5f 93       	push	r21
    1ec0:	6f 93       	push	r22
    1ec2:	7f 93       	push	r23
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	af 93       	push	r26
    1eca:	bf 93       	push	r27
    1ecc:	ef 93       	push	r30
    1ece:	ff 93       	push	r31
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr!=NULLPTR)
    1ed8:	80 91 af 02 	lds	r24, 0x02AF
    1edc:	90 91 b0 02 	lds	r25, 0x02B0
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	29 f0       	breq	.+10     	; 0x1eee <__vector_15+0x46>
	{
		Timer0_OVF_Fptr();
    1ee4:	e0 91 af 02 	lds	r30, 0x02AF
    1ee8:	f0 91 b0 02 	lds	r31, 0x02B0
    1eec:	09 95       	icall
	}
}
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	ff 91       	pop	r31
    1ef4:	ef 91       	pop	r30
    1ef6:	bf 91       	pop	r27
    1ef8:	af 91       	pop	r26
    1efa:	9f 91       	pop	r25
    1efc:	8f 91       	pop	r24
    1efe:	7f 91       	pop	r23
    1f00:	6f 91       	pop	r22
    1f02:	5f 91       	pop	r21
    1f04:	4f 91       	pop	r20
    1f06:	3f 91       	pop	r19
    1f08:	2f 91       	pop	r18
    1f0a:	0f 90       	pop	r0
    1f0c:	00 92 5b 00 	sts	0x005B, r0
    1f10:	0f 90       	pop	r0
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	0f 90       	pop	r0
    1f16:	1f 90       	pop	r1
    1f18:	18 95       	reti

00001f1a <SPI_MasterCan_Init>:
#include "SPI.h"

static void (*Global_Ptf)(void)=NULLPTR;
static u8 *SPI_GlOBAL_DATA=NULLPTR;
void SPI_MasterCan_Init (void)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE SPI */
	SPI_REGS->SPCR.BIT.SPE=HIGH;
    1f22:	ed e2       	ldi	r30, 0x2D	; 45
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 64       	ori	r24, 0x40	; 64
    1f2a:	80 83       	st	Z, r24
	/*CHOICE MSB FIRST */
	SPI_REGS->SPCR.BIT.DORD=LOW;
    1f2c:	ed e2       	ldi	r30, 0x2D	; 45
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8f 7d       	andi	r24, 0xDF	; 223
    1f34:	80 83       	st	Z, r24
	Dio_WriteChannel(PINB0,HIGH);
    1f36:	88 e0       	ldi	r24, 0x08	; 8
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
	/*MASTER MODE*/
	SPI_REGS->SPCR.BIT.MSTR=HIGH;
    1f3e:	ed e2       	ldi	r30, 0x2D	; 45
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	80 61       	ori	r24, 0x10	; 16
    1f46:	80 83       	st	Z, r24
	/* CHOICE CLOCK POLARITY AND CLOCK PHASE*/
	SPI_REGS->SPCR.BIT.CPOL=LOW;  //leading rising
    1f48:	ed e2       	ldi	r30, 0x2D	; 45
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	87 7f       	andi	r24, 0xF7	; 247
    1f50:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.CPHA=LOW; //sampling rising
    1f52:	ed e2       	ldi	r30, 0x2D	; 45
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8b 7f       	andi	r24, 0xFB	; 251
    1f5a:	80 83       	st	Z, r24
	/*CHCOICE CLOCK PRESCALLER FCPU/16 */
	SPI_REGS->SPCR.BIT.SPR0=HIGH;
    1f5c:	ed e2       	ldi	r30, 0x2D	; 45
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	81 60       	ori	r24, 0x01	; 1
    1f64:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.SPR1=LOW;
    1f66:	ed e2       	ldi	r30, 0x2D	; 45
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8d 7f       	andi	r24, 0xFD	; 253
    1f6e:	80 83       	st	Z, r24
	SPI_REGS->SPSR.BIT.SPI2X=LOW;
    1f70:	ed e2       	ldi	r30, 0x2D	; 45
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	81 81       	ldd	r24, Z+1	; 0x01
    1f76:	8e 7f       	andi	r24, 0xFE	; 254
    1f78:	81 83       	std	Z+1, r24	; 0x01
	
	//select pin ss ->>>high
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <SPI_SlaveCan_Init>:
void SPI_SlaveCan_Init (void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	/*ENABLE SPI */
	SPI_REGS->SPCR.BIT.SPE=HIGH;
    1f88:	ed e2       	ldi	r30, 0x2D	; 45
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 64       	ori	r24, 0x40	; 64
    1f90:	80 83       	st	Z, r24
	/*CHOICE MSB FIRST */
	SPI_REGS->SPCR.BIT.DORD=LOW;
    1f92:	ed e2       	ldi	r30, 0x2D	; 45
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 7d       	andi	r24, 0xDF	; 223
    1f9a:	80 83       	st	Z, r24
	/*MASTER MODE*/
	SPI_REGS->SPCR.BIT.MSTR=HIGH;
    1f9c:	ed e2       	ldi	r30, 0x2D	; 45
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 61       	ori	r24, 0x10	; 16
    1fa4:	80 83       	st	Z, r24
	/* CHOICE CLOCK POLARITY AND CLOCK PHASE*/
	SPI_REGS->SPCR.BIT.CPOL=LOW;  //leading rising
    1fa6:	ed e2       	ldi	r30, 0x2D	; 45
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	87 7f       	andi	r24, 0xF7	; 247
    1fae:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.CPHA=LOW; //sampling rising
    1fb0:	ed e2       	ldi	r30, 0x2D	; 45
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	8b 7f       	andi	r24, 0xFB	; 251
    1fb8:	80 83       	st	Z, r24
	/*CHCOICE CLOCK PRESCALLER FCPU/16 */
	SPI_REGS->SPCR.BIT.SPR0=HIGH;
    1fba:	ed e2       	ldi	r30, 0x2D	; 45
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	81 60       	ori	r24, 0x01	; 1
    1fc2:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.SPR1=LOW;
    1fc4:	ed e2       	ldi	r30, 0x2D	; 45
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8d 7f       	andi	r24, 0xFD	; 253
    1fcc:	80 83       	st	Z, r24
	SPI_REGS->SPSR.BIT.SPI2X=LOW;
    1fce:	ed e2       	ldi	r30, 0x2D	; 45
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	81 83       	std	Z+1, r24	; 0x01
}
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <SPI_MasterTransmit>:
u8 SPI_MasterTransmit (u8 data)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <SPI_MasterTransmit+0x6>
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
	u8 dataRead=0;
    1fea:	19 82       	std	Y+1, r1	; 0x01
	SPI_REGS->SPDR.R=data;
    1fec:	ed e2       	ldi	r30, 0x2D	; 45
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	82 83       	std	Z+2, r24	; 0x02
	
	while(SPI_REGS->SPSR.BIT.SPIF==LOW);
    1ff4:	ed e2       	ldi	r30, 0x2D	; 45
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	81 81       	ldd	r24, Z+1	; 0x01
    1ffa:	80 78       	andi	r24, 0x80	; 128
    1ffc:	88 23       	and	r24, r24
    1ffe:	d1 f3       	breq	.-12     	; 0x1ff4 <SPI_MasterTransmit+0x16>
	
	dataRead=SPI_REGS->SPDR.R;
    2000:	ed e2       	ldi	r30, 0x2D	; 45
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
	return dataRead;
    2008:	89 81       	ldd	r24, Y+1	; 0x01
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <SPI_Init>:
/*spi */
void SPI_Init(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	#if SPI_MODE == SPI_MASTER
	/*MASTER MODE*/
	SPI_REGS->SPCR.BIT.MSTR=HIGH;
    201c:	ed e2       	ldi	r30, 0x2D	; 45
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 61       	ori	r24, 0x10	; 16
    2024:	80 83       	st	Z, r24
	/*CHCOICE CLOCK PRESCALLER FCPU/16 */
	SPI_REGS->SPCR.BIT.SPR0=HIGH;
    2026:	ed e2       	ldi	r30, 0x2D	; 45
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	81 60       	ori	r24, 0x01	; 1
    202e:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.SPR1=LOW;
    2030:	ed e2       	ldi	r30, 0x2D	; 45
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8d 7f       	andi	r24, 0xFD	; 253
    2038:	80 83       	st	Z, r24
	SPI_REGS->SPSR.BIT.SPI2X=LOW;
    203a:	ed e2       	ldi	r30, 0x2D	; 45
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	8e 7f       	andi	r24, 0xFE	; 254
    2042:	81 83       	std	Z+1, r24	; 0x01
	#elif SPI_MODE == SPI_SLAVE
	/*SALVE MODE*/
	SPI_REGS->SPCR.BIT.MSTR=LOW;
	#endif
	/* CHOICE CLOCK POLARITY AND CLOCK PHASE*/
	SPI_REGS->SPCR.BIT.CPOL=HIGH;
    2044:	ed e2       	ldi	r30, 0x2D	; 45
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 60       	ori	r24, 0x08	; 8
    204c:	80 83       	st	Z, r24
	SPI_REGS->SPCR.BIT.CPHA=HIGH;
    204e:	ed e2       	ldi	r30, 0x2D	; 45
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	84 60       	ori	r24, 0x04	; 4
    2056:	80 83       	st	Z, r24
	/*CHOICE LSB FIRST */
	SPI_REGS->SPCR.BIT.DORD=HIGH;
    2058:	ed e2       	ldi	r30, 0x2D	; 45
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 62       	ori	r24, 0x20	; 32
    2060:	80 83       	st	Z, r24
	/*ENABLE SPI */
	SPI_REGS->SPCR.BIT.SPE=HIGH;
    2062:	ed e2       	ldi	r30, 0x2D	; 45
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 64       	ori	r24, 0x40	; 64
    206a:	80 83       	st	Z, r24
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <SPI_voidTransmateASYNC>:

void SPI_voidTransmateASYNC(void (*SPI_Ptf)(void),u8 data,u8 *rx_data)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <SPI_voidTransmateASYNC+0x6>
    2078:	00 d0       	rcall	.+0      	; 0x207a <SPI_voidTransmateASYNC+0x8>
    207a:	0f 92       	push	r0
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	6b 83       	std	Y+3, r22	; 0x03
    2086:	5d 83       	std	Y+5, r21	; 0x05
    2088:	4c 83       	std	Y+4, r20	; 0x04
	SPI_REGS->SPCR.BIT.SPIE=HIGH;
    208a:	ed e2       	ldi	r30, 0x2D	; 45
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	80 68       	ori	r24, 0x80	; 128
    2092:	80 83       	st	Z, r24
	/*CHEIK NULL*/
	Global_Ptf=SPI_Ptf;
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	90 93 b4 02 	sts	0x02B4, r25
    209c:	80 93 b3 02 	sts	0x02B3, r24
	SPI_GlOBAL_DATA=rx_data;
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	90 93 b6 02 	sts	0x02B6, r25
    20a8:	80 93 b5 02 	sts	0x02B5, r24
	SPI_REGS->SPDR.R=data;
    20ac:	ed e2       	ldi	r30, 0x2D	; 45
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	82 83       	std	Z+2, r24	; 0x02
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <SPI_Transieve>:

u8 SPI_Transieve(u8 Copy_u8_dat)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(PINB4,LOW);
    20d0:	8c e0       	ldi	r24, 0x0C	; 12
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
	while(SPI_REGS->SPSR.BIT.WCOL==HIGH);
    20d8:	ed e2       	ldi	r30, 0x2D	; 45
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	81 81       	ldd	r24, Z+1	; 0x01
    20de:	80 74       	andi	r24, 0x40	; 64
    20e0:	88 23       	and	r24, r24
    20e2:	d1 f7       	brne	.-12     	; 0x20d8 <SPI_Transieve+0x14>
	SPI_REGS->SPDR.R=Copy_u8_dat;
    20e4:	ed e2       	ldi	r30, 0x2D	; 45
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	82 83       	std	Z+2, r24	; 0x02
	while(SPI_REGS->SPSR.BIT.SPIF==LOW);
    20ec:	ed e2       	ldi	r30, 0x2D	; 45
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	81 81       	ldd	r24, Z+1	; 0x01
    20f2:	80 78       	andi	r24, 0x80	; 128
    20f4:	88 23       	and	r24, r24
    20f6:	d1 f3       	breq	.-12     	; 0x20ec <SPI_Transieve+0x28>
	Dio_WriteChannel(PINB4,HIGH);
    20f8:	8c e0       	ldi	r24, 0x0C	; 12
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
	return SPI_REGS->SPDR.R;
    2100:	ed e2       	ldi	r30, 0x2D	; 45
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	82 81       	ldd	r24, Z+2	; 0x02
	
}
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <__vector_17>:
void __vector_17(void)    __attribute__((signal));
void __vector_17(void)
{
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	00 90 5b 00 	lds	r0, 0x005B
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	Global_Ptf();
    213e:	e0 91 b3 02 	lds	r30, 0x02B3
    2142:	f0 91 b4 02 	lds	r31, 0x02B4
    2146:	09 95       	icall
	*SPI_GlOBAL_DATA=SPI_REGS->SPDR.R;
    2148:	a0 91 b5 02 	lds	r26, 0x02B5
    214c:	b0 91 b6 02 	lds	r27, 0x02B6
    2150:	ed e2       	ldi	r30, 0x2D	; 45
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	8c 93       	st	X, r24
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	ff 91       	pop	r31
    215e:	ef 91       	pop	r30
    2160:	bf 91       	pop	r27
    2162:	af 91       	pop	r26
    2164:	9f 91       	pop	r25
    2166:	8f 91       	pop	r24
    2168:	7f 91       	pop	r23
    216a:	6f 91       	pop	r22
    216c:	5f 91       	pop	r21
    216e:	4f 91       	pop	r20
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	00 92 5b 00 	sts	0x005B, r0
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

00002184 <Port_Init>:


extern Pin_CfgType PinCfgs[];

void Port_Init (void)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <Port_Init+0x6>
    218a:	00 d0       	rcall	.+0      	; 0x218c <Port_Init+0x8>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	int i=0;
    2190:	1a 82       	std	Y+2, r1	; 0x02
    2192:	19 82       	std	Y+1, r1	; 0x01
	for (i=0;i<64;i++)
    2194:	1a 82       	std	Y+2, r1	; 0x02
    2196:	19 82       	std	Y+1, r1	; 0x01
    2198:	55 c3       	rjmp	.+1706   	; 0x2844 <Port_Init+0x6c0>
	{
		switch (PinCfgs[i].Port)
    219a:	29 81       	ldd	r18, Y+1	; 0x01
    219c:	3a 81       	ldd	r19, Y+2	; 0x02
    219e:	c9 01       	movw	r24, r18
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	fc 01       	movw	r30, r24
    21aa:	e8 5f       	subi	r30, 0xF8	; 248
    21ac:	fd 4f       	sbci	r31, 0xFD	; 253
    21ae:	80 81       	ld	r24, Z
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3c 83       	std	Y+4, r19	; 0x04
    21b6:	2b 83       	std	Y+3, r18	; 0x03
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	91 05       	cpc	r25, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <Port_Init+0x40>
    21c2:	5d c1       	rjmp	.+698    	; 0x247e <Port_Init+0x2fa>
    21c4:	2b 81       	ldd	r18, Y+3	; 0x03
    21c6:	3c 81       	ldd	r19, Y+4	; 0x04
    21c8:	23 30       	cpi	r18, 0x03	; 3
    21ca:	31 05       	cpc	r19, r1
    21cc:	5c f4       	brge	.+22     	; 0x21e4 <Port_Init+0x60>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	a1 f0       	breq	.+40     	; 0x21fe <Port_Init+0x7a>
    21d6:	2b 81       	ldd	r18, Y+3	; 0x03
    21d8:	3c 81       	ldd	r19, Y+4	; 0x04
    21da:	21 30       	cpi	r18, 0x01	; 1
    21dc:	31 05       	cpc	r19, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <Port_Init+0x5e>
    21e0:	ae c0       	rjmp	.+348    	; 0x233e <Port_Init+0x1ba>
    21e2:	2b c3       	rjmp	.+1622   	; 0x283a <Port_Init+0x6b6>
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <Port_Init+0x6c>
    21ee:	e7 c1       	rjmp	.+974    	; 0x25be <Port_Init+0x43a>
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	24 30       	cpi	r18, 0x04	; 4
    21f6:	31 05       	cpc	r19, r1
    21f8:	09 f4       	brne	.+2      	; 0x21fc <Port_Init+0x78>
    21fa:	81 c2       	rjmp	.+1282   	; 0x26fe <Port_Init+0x57a>
    21fc:	1e c3       	rjmp	.+1596   	; 0x283a <Port_Init+0x6b6>
		{
			case Dio_PORTA:
			if (PinCfgs[i].Dir==Dio_OUTPUT)
    21fe:	29 81       	ldd	r18, Y+1	; 0x01
    2200:	3a 81       	ldd	r19, Y+2	; 0x02
    2202:	c9 01       	movw	r24, r18
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	fc 01       	movw	r30, r24
    220e:	e6 5f       	subi	r30, 0xF6	; 246
    2210:	fd 4f       	sbci	r31, 0xFD	; 253
    2212:	80 81       	ld	r24, Z
    2214:	88 23       	and	r24, r24
    2216:	f1 f4       	brne	.+60     	; 0x2254 <Port_Init+0xd0>
			{
				SET_BIT(DDRA,PinCfgs[i].Pin);
    2218:	aa e3       	ldi	r26, 0x3A	; 58
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ea e3       	ldi	r30, 0x3A	; 58
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	48 2f       	mov	r20, r24
    2224:	29 81       	ldd	r18, Y+1	; 0x01
    2226:	3a 81       	ldd	r19, Y+2	; 0x02
    2228:	c9 01       	movw	r24, r18
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	fc 01       	movw	r30, r24
    2234:	e7 5f       	subi	r30, 0xF7	; 247
    2236:	fd 4f       	sbci	r31, 0xFD	; 253
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <Port_Init+0xc6>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <Port_Init+0xc2>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	f3 c2       	rjmp	.+1510   	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INFREE)
    2254:	29 81       	ldd	r18, Y+1	; 0x01
    2256:	3a 81       	ldd	r19, Y+2	; 0x02
    2258:	c9 01       	movw	r24, r18
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	82 0f       	add	r24, r18
    2260:	93 1f       	adc	r25, r19
    2262:	fc 01       	movw	r30, r24
    2264:	e6 5f       	subi	r30, 0xF6	; 246
    2266:	fd 4f       	sbci	r31, 0xFD	; 253
    2268:	80 81       	ld	r24, Z
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	f9 f4       	brne	.+62     	; 0x22ac <Port_Init+0x128>
			{
				CLR_BIT(DDRA,PinCfgs[i].Pin);
    226e:	aa e3       	ldi	r26, 0x3A	; 58
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ea e3       	ldi	r30, 0x3A	; 58
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	48 2f       	mov	r20, r24
    227a:	29 81       	ldd	r18, Y+1	; 0x01
    227c:	3a 81       	ldd	r19, Y+2	; 0x02
    227e:	c9 01       	movw	r24, r18
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	fc 01       	movw	r30, r24
    228a:	e7 5f       	subi	r30, 0xF7	; 247
    228c:	fd 4f       	sbci	r31, 0xFD	; 253
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 2e       	mov	r0, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <Port_Init+0x11c>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	0a 94       	dec	r0
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <Port_Init+0x118>
    22a4:	80 95       	com	r24
    22a6:	84 23       	and	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	c7 c2       	rjmp	.+1422   	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INPULL)
    22ac:	29 81       	ldd	r18, Y+1	; 0x01
    22ae:	3a 81       	ldd	r19, Y+2	; 0x02
    22b0:	c9 01       	movw	r24, r18
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	82 0f       	add	r24, r18
    22b8:	93 1f       	adc	r25, r19
    22ba:	fc 01       	movw	r30, r24
    22bc:	e6 5f       	subi	r30, 0xF6	; 246
    22be:	fd 4f       	sbci	r31, 0xFD	; 253
    22c0:	80 81       	ld	r24, Z
    22c2:	82 30       	cpi	r24, 0x02	; 2
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <Port_Init+0x144>
    22c6:	b9 c2       	rjmp	.+1394   	; 0x283a <Port_Init+0x6b6>
			{
				CLR_BIT(DDRA,PinCfgs[i].Pin);
    22c8:	aa e3       	ldi	r26, 0x3A	; 58
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e3       	ldi	r30, 0x3A	; 58
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	48 2f       	mov	r20, r24
    22d4:	29 81       	ldd	r18, Y+1	; 0x01
    22d6:	3a 81       	ldd	r19, Y+2	; 0x02
    22d8:	c9 01       	movw	r24, r18
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	fc 01       	movw	r30, r24
    22e4:	e7 5f       	subi	r30, 0xF7	; 247
    22e6:	fd 4f       	sbci	r31, 0xFD	; 253
    22e8:	80 81       	ld	r24, Z
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <Port_Init+0x174>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	2a 95       	dec	r18
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <Port_Init+0x170>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	8c 93       	st	X, r24
				SET_BIT(PORTA,PinCfgs[i].Pin);
    2302:	ab e3       	ldi	r26, 0x3B	; 59
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	eb e3       	ldi	r30, 0x3B	; 59
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	29 81       	ldd	r18, Y+1	; 0x01
    2310:	3a 81       	ldd	r19, Y+2	; 0x02
    2312:	c9 01       	movw	r24, r18
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	82 0f       	add	r24, r18
    231a:	93 1f       	adc	r25, r19
    231c:	fc 01       	movw	r30, r24
    231e:	e7 5f       	subi	r30, 0xF7	; 247
    2320:	fd 4f       	sbci	r31, 0xFD	; 253
    2322:	80 81       	ld	r24, Z
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	02 2e       	mov	r0, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <Port_Init+0x1b0>
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <Port_Init+0x1ac>
    2338:	84 2b       	or	r24, r20
    233a:	8c 93       	st	X, r24
    233c:	7e c2       	rjmp	.+1276   	; 0x283a <Port_Init+0x6b6>
			}
			break;
			case Dio_PORTB:
			if (PinCfgs[i].Dir==Dio_OUTPUT)
    233e:	29 81       	ldd	r18, Y+1	; 0x01
    2340:	3a 81       	ldd	r19, Y+2	; 0x02
    2342:	c9 01       	movw	r24, r18
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	82 0f       	add	r24, r18
    234a:	93 1f       	adc	r25, r19
    234c:	fc 01       	movw	r30, r24
    234e:	e6 5f       	subi	r30, 0xF6	; 246
    2350:	fd 4f       	sbci	r31, 0xFD	; 253
    2352:	80 81       	ld	r24, Z
    2354:	88 23       	and	r24, r24
    2356:	f1 f4       	brne	.+60     	; 0x2394 <Port_Init+0x210>
			{
				SET_BIT(DDRB,PinCfgs[i].Pin);
    2358:	a7 e3       	ldi	r26, 0x37	; 55
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e7 e3       	ldi	r30, 0x37	; 55
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	29 81       	ldd	r18, Y+1	; 0x01
    2366:	3a 81       	ldd	r19, Y+2	; 0x02
    2368:	c9 01       	movw	r24, r18
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	fc 01       	movw	r30, r24
    2374:	e7 5f       	subi	r30, 0xF7	; 247
    2376:	fd 4f       	sbci	r31, 0xFD	; 253
    2378:	80 81       	ld	r24, Z
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	02 2e       	mov	r0, r18
    2384:	02 c0       	rjmp	.+4      	; 0x238a <Port_Init+0x206>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	0a 94       	dec	r0
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <Port_Init+0x202>
    238e:	84 2b       	or	r24, r20
    2390:	8c 93       	st	X, r24
    2392:	53 c2       	rjmp	.+1190   	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INFREE)
    2394:	29 81       	ldd	r18, Y+1	; 0x01
    2396:	3a 81       	ldd	r19, Y+2	; 0x02
    2398:	c9 01       	movw	r24, r18
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	82 0f       	add	r24, r18
    23a0:	93 1f       	adc	r25, r19
    23a2:	fc 01       	movw	r30, r24
    23a4:	e6 5f       	subi	r30, 0xF6	; 246
    23a6:	fd 4f       	sbci	r31, 0xFD	; 253
    23a8:	80 81       	ld	r24, Z
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	f9 f4       	brne	.+62     	; 0x23ec <Port_Init+0x268>
			{
				CLR_BIT(DDRB,PinCfgs[i].Pin);
    23ae:	a7 e3       	ldi	r26, 0x37	; 55
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e7 e3       	ldi	r30, 0x37	; 55
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	48 2f       	mov	r20, r24
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	c9 01       	movw	r24, r18
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	82 0f       	add	r24, r18
    23c6:	93 1f       	adc	r25, r19
    23c8:	fc 01       	movw	r30, r24
    23ca:	e7 5f       	subi	r30, 0xF7	; 247
    23cc:	fd 4f       	sbci	r31, 0xFD	; 253
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <Port_Init+0x25c>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <Port_Init+0x258>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	27 c2       	rjmp	.+1102   	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INPULL)
    23ec:	29 81       	ldd	r18, Y+1	; 0x01
    23ee:	3a 81       	ldd	r19, Y+2	; 0x02
    23f0:	c9 01       	movw	r24, r18
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	fc 01       	movw	r30, r24
    23fc:	e6 5f       	subi	r30, 0xF6	; 246
    23fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2400:	80 81       	ld	r24, Z
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	09 f0       	breq	.+2      	; 0x2408 <Port_Init+0x284>
    2406:	19 c2       	rjmp	.+1074   	; 0x283a <Port_Init+0x6b6>
			{
				CLR_BIT(DDRB,PinCfgs[i].Pin);
    2408:	a7 e3       	ldi	r26, 0x37	; 55
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e3       	ldi	r30, 0x37	; 55
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	48 2f       	mov	r20, r24
    2414:	29 81       	ldd	r18, Y+1	; 0x01
    2416:	3a 81       	ldd	r19, Y+2	; 0x02
    2418:	c9 01       	movw	r24, r18
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	fc 01       	movw	r30, r24
    2424:	e7 5f       	subi	r30, 0xF7	; 247
    2426:	fd 4f       	sbci	r31, 0xFD	; 253
    2428:	80 81       	ld	r24, Z
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <Port_Init+0x2b4>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	2a 95       	dec	r18
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <Port_Init+0x2b0>
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinCfgs[i].Pin);
    2442:	a8 e3       	ldi	r26, 0x38	; 56
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e8 e3       	ldi	r30, 0x38	; 56
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	29 81       	ldd	r18, Y+1	; 0x01
    2450:	3a 81       	ldd	r19, Y+2	; 0x02
    2452:	c9 01       	movw	r24, r18
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	82 0f       	add	r24, r18
    245a:	93 1f       	adc	r25, r19
    245c:	fc 01       	movw	r30, r24
    245e:	e7 5f       	subi	r30, 0xF7	; 247
    2460:	fd 4f       	sbci	r31, 0xFD	; 253
    2462:	80 81       	ld	r24, Z
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	02 2e       	mov	r0, r18
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <Port_Init+0x2f0>
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	0a 94       	dec	r0
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <Port_Init+0x2ec>
    2478:	84 2b       	or	r24, r20
    247a:	8c 93       	st	X, r24
    247c:	de c1       	rjmp	.+956    	; 0x283a <Port_Init+0x6b6>
			}
			break;
			case Dio_PORTC:
			if (PinCfgs[i].Dir==Dio_OUTPUT)
    247e:	29 81       	ldd	r18, Y+1	; 0x01
    2480:	3a 81       	ldd	r19, Y+2	; 0x02
    2482:	c9 01       	movw	r24, r18
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	82 0f       	add	r24, r18
    248a:	93 1f       	adc	r25, r19
    248c:	fc 01       	movw	r30, r24
    248e:	e6 5f       	subi	r30, 0xF6	; 246
    2490:	fd 4f       	sbci	r31, 0xFD	; 253
    2492:	80 81       	ld	r24, Z
    2494:	88 23       	and	r24, r24
    2496:	f1 f4       	brne	.+60     	; 0x24d4 <Port_Init+0x350>
			{
				SET_BIT(DDRC,PinCfgs[i].Pin);
    2498:	a4 e3       	ldi	r26, 0x34	; 52
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e4 e3       	ldi	r30, 0x34	; 52
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	29 81       	ldd	r18, Y+1	; 0x01
    24a6:	3a 81       	ldd	r19, Y+2	; 0x02
    24a8:	c9 01       	movw	r24, r18
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	fc 01       	movw	r30, r24
    24b4:	e7 5f       	subi	r30, 0xF7	; 247
    24b6:	fd 4f       	sbci	r31, 0xFD	; 253
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <Port_Init+0x346>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <Port_Init+0x342>
    24ce:	84 2b       	or	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	b3 c1       	rjmp	.+870    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INFREE)
    24d4:	29 81       	ldd	r18, Y+1	; 0x01
    24d6:	3a 81       	ldd	r19, Y+2	; 0x02
    24d8:	c9 01       	movw	r24, r18
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	fc 01       	movw	r30, r24
    24e4:	e6 5f       	subi	r30, 0xF6	; 246
    24e6:	fd 4f       	sbci	r31, 0xFD	; 253
    24e8:	80 81       	ld	r24, Z
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	f9 f4       	brne	.+62     	; 0x252c <Port_Init+0x3a8>
			{
				CLR_BIT(DDRC,PinCfgs[i].Pin);
    24ee:	a4 e3       	ldi	r26, 0x34	; 52
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e4 e3       	ldi	r30, 0x34	; 52
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	48 2f       	mov	r20, r24
    24fa:	29 81       	ldd	r18, Y+1	; 0x01
    24fc:	3a 81       	ldd	r19, Y+2	; 0x02
    24fe:	c9 01       	movw	r24, r18
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	82 0f       	add	r24, r18
    2506:	93 1f       	adc	r25, r19
    2508:	fc 01       	movw	r30, r24
    250a:	e7 5f       	subi	r30, 0xF7	; 247
    250c:	fd 4f       	sbci	r31, 0xFD	; 253
    250e:	80 81       	ld	r24, Z
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <Port_Init+0x39c>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <Port_Init+0x398>
    2524:	80 95       	com	r24
    2526:	84 23       	and	r24, r20
    2528:	8c 93       	st	X, r24
    252a:	87 c1       	rjmp	.+782    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INPULL)
    252c:	29 81       	ldd	r18, Y+1	; 0x01
    252e:	3a 81       	ldd	r19, Y+2	; 0x02
    2530:	c9 01       	movw	r24, r18
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	fc 01       	movw	r30, r24
    253c:	e6 5f       	subi	r30, 0xF6	; 246
    253e:	fd 4f       	sbci	r31, 0xFD	; 253
    2540:	80 81       	ld	r24, Z
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	09 f0       	breq	.+2      	; 0x2548 <Port_Init+0x3c4>
    2546:	79 c1       	rjmp	.+754    	; 0x283a <Port_Init+0x6b6>
			{
				CLR_BIT(DDRC,PinCfgs[i].Pin);
    2548:	a4 e3       	ldi	r26, 0x34	; 52
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e4 e3       	ldi	r30, 0x34	; 52
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	48 2f       	mov	r20, r24
    2554:	29 81       	ldd	r18, Y+1	; 0x01
    2556:	3a 81       	ldd	r19, Y+2	; 0x02
    2558:	c9 01       	movw	r24, r18
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	fc 01       	movw	r30, r24
    2564:	e7 5f       	subi	r30, 0xF7	; 247
    2566:	fd 4f       	sbci	r31, 0xFD	; 253
    2568:	80 81       	ld	r24, Z
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <Port_Init+0x3f4>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	2a 95       	dec	r18
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <Port_Init+0x3f0>
    257c:	80 95       	com	r24
    257e:	84 23       	and	r24, r20
    2580:	8c 93       	st	X, r24
				SET_BIT(PORTC,PinCfgs[i].Pin);
    2582:	a5 e3       	ldi	r26, 0x35	; 53
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e5 e3       	ldi	r30, 0x35	; 53
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	29 81       	ldd	r18, Y+1	; 0x01
    2590:	3a 81       	ldd	r19, Y+2	; 0x02
    2592:	c9 01       	movw	r24, r18
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	82 0f       	add	r24, r18
    259a:	93 1f       	adc	r25, r19
    259c:	fc 01       	movw	r30, r24
    259e:	e7 5f       	subi	r30, 0xF7	; 247
    25a0:	fd 4f       	sbci	r31, 0xFD	; 253
    25a2:	80 81       	ld	r24, Z
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 2e       	mov	r0, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <Port_Init+0x430>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <Port_Init+0x42c>
    25b8:	84 2b       	or	r24, r20
    25ba:	8c 93       	st	X, r24
    25bc:	3e c1       	rjmp	.+636    	; 0x283a <Port_Init+0x6b6>
			}
			break;
			case Dio_PORTD:
			if (PinCfgs[i].Dir==Dio_OUTPUT)
    25be:	29 81       	ldd	r18, Y+1	; 0x01
    25c0:	3a 81       	ldd	r19, Y+2	; 0x02
    25c2:	c9 01       	movw	r24, r18
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	82 0f       	add	r24, r18
    25ca:	93 1f       	adc	r25, r19
    25cc:	fc 01       	movw	r30, r24
    25ce:	e6 5f       	subi	r30, 0xF6	; 246
    25d0:	fd 4f       	sbci	r31, 0xFD	; 253
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	f1 f4       	brne	.+60     	; 0x2614 <Port_Init+0x490>
			{
				SET_BIT(DDRD,PinCfgs[i].Pin);
    25d8:	a1 e3       	ldi	r26, 0x31	; 49
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e1 e3       	ldi	r30, 0x31	; 49
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	48 2f       	mov	r20, r24
    25e4:	29 81       	ldd	r18, Y+1	; 0x01
    25e6:	3a 81       	ldd	r19, Y+2	; 0x02
    25e8:	c9 01       	movw	r24, r18
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	82 0f       	add	r24, r18
    25f0:	93 1f       	adc	r25, r19
    25f2:	fc 01       	movw	r30, r24
    25f4:	e7 5f       	subi	r30, 0xF7	; 247
    25f6:	fd 4f       	sbci	r31, 0xFD	; 253
    25f8:	80 81       	ld	r24, Z
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	02 2e       	mov	r0, r18
    2604:	02 c0       	rjmp	.+4      	; 0x260a <Port_Init+0x486>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	0a 94       	dec	r0
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <Port_Init+0x482>
    260e:	84 2b       	or	r24, r20
    2610:	8c 93       	st	X, r24
    2612:	13 c1       	rjmp	.+550    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INFREE)
    2614:	29 81       	ldd	r18, Y+1	; 0x01
    2616:	3a 81       	ldd	r19, Y+2	; 0x02
    2618:	c9 01       	movw	r24, r18
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	fc 01       	movw	r30, r24
    2624:	e6 5f       	subi	r30, 0xF6	; 246
    2626:	fd 4f       	sbci	r31, 0xFD	; 253
    2628:	80 81       	ld	r24, Z
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	f9 f4       	brne	.+62     	; 0x266c <Port_Init+0x4e8>
			{
				CLR_BIT(DDRD,PinCfgs[i].Pin);
    262e:	a1 e3       	ldi	r26, 0x31	; 49
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e1 e3       	ldi	r30, 0x31	; 49
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	48 2f       	mov	r20, r24
    263a:	29 81       	ldd	r18, Y+1	; 0x01
    263c:	3a 81       	ldd	r19, Y+2	; 0x02
    263e:	c9 01       	movw	r24, r18
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	fc 01       	movw	r30, r24
    264a:	e7 5f       	subi	r30, 0xF7	; 247
    264c:	fd 4f       	sbci	r31, 0xFD	; 253
    264e:	80 81       	ld	r24, Z
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <Port_Init+0x4dc>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <Port_Init+0x4d8>
    2664:	80 95       	com	r24
    2666:	84 23       	and	r24, r20
    2668:	8c 93       	st	X, r24
    266a:	e7 c0       	rjmp	.+462    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INPULL)
    266c:	29 81       	ldd	r18, Y+1	; 0x01
    266e:	3a 81       	ldd	r19, Y+2	; 0x02
    2670:	c9 01       	movw	r24, r18
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	fc 01       	movw	r30, r24
    267c:	e6 5f       	subi	r30, 0xF6	; 246
    267e:	fd 4f       	sbci	r31, 0xFD	; 253
    2680:	80 81       	ld	r24, Z
    2682:	82 30       	cpi	r24, 0x02	; 2
    2684:	09 f0       	breq	.+2      	; 0x2688 <Port_Init+0x504>
    2686:	d9 c0       	rjmp	.+434    	; 0x283a <Port_Init+0x6b6>
			{
				CLR_BIT(DDRD,PinCfgs[i].Pin);
    2688:	a1 e3       	ldi	r26, 0x31	; 49
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e1 e3       	ldi	r30, 0x31	; 49
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	48 2f       	mov	r20, r24
    2694:	29 81       	ldd	r18, Y+1	; 0x01
    2696:	3a 81       	ldd	r19, Y+2	; 0x02
    2698:	c9 01       	movw	r24, r18
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	fc 01       	movw	r30, r24
    26a4:	e7 5f       	subi	r30, 0xF7	; 247
    26a6:	fd 4f       	sbci	r31, 0xFD	; 253
    26a8:	80 81       	ld	r24, Z
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <Port_Init+0x534>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	2a 95       	dec	r18
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <Port_Init+0x530>
    26bc:	80 95       	com	r24
    26be:	84 23       	and	r24, r20
    26c0:	8c 93       	st	X, r24
				SET_BIT(PORTD,PinCfgs[i].Pin);
    26c2:	a2 e3       	ldi	r26, 0x32	; 50
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e2 e3       	ldi	r30, 0x32	; 50
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	48 2f       	mov	r20, r24
    26ce:	29 81       	ldd	r18, Y+1	; 0x01
    26d0:	3a 81       	ldd	r19, Y+2	; 0x02
    26d2:	c9 01       	movw	r24, r18
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
    26dc:	fc 01       	movw	r30, r24
    26de:	e7 5f       	subi	r30, 0xF7	; 247
    26e0:	fd 4f       	sbci	r31, 0xFD	; 253
    26e2:	80 81       	ld	r24, Z
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <Port_Init+0x570>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <Port_Init+0x56c>
    26f8:	84 2b       	or	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	9e c0       	rjmp	.+316    	; 0x283a <Port_Init+0x6b6>
			}
			break;
			case Dio_PORTE:
			if (PinCfgs[i].Dir==Dio_OUTPUT)
    26fe:	29 81       	ldd	r18, Y+1	; 0x01
    2700:	3a 81       	ldd	r19, Y+2	; 0x02
    2702:	c9 01       	movw	r24, r18
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	82 0f       	add	r24, r18
    270a:	93 1f       	adc	r25, r19
    270c:	fc 01       	movw	r30, r24
    270e:	e6 5f       	subi	r30, 0xF6	; 246
    2710:	fd 4f       	sbci	r31, 0xFD	; 253
    2712:	80 81       	ld	r24, Z
    2714:	88 23       	and	r24, r24
    2716:	f1 f4       	brne	.+60     	; 0x2754 <Port_Init+0x5d0>
        	{
				SET_BIT(DDRE,PinCfgs[i].Pin);
    2718:	a2 e2       	ldi	r26, 0x22	; 34
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e2 e2       	ldi	r30, 0x22	; 34
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	48 2f       	mov	r20, r24
    2724:	29 81       	ldd	r18, Y+1	; 0x01
    2726:	3a 81       	ldd	r19, Y+2	; 0x02
    2728:	c9 01       	movw	r24, r18
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	82 0f       	add	r24, r18
    2730:	93 1f       	adc	r25, r19
    2732:	fc 01       	movw	r30, r24
    2734:	e7 5f       	subi	r30, 0xF7	; 247
    2736:	fd 4f       	sbci	r31, 0xFD	; 253
    2738:	80 81       	ld	r24, Z
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 2e       	mov	r0, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <Port_Init+0x5c6>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <Port_Init+0x5c2>
    274e:	84 2b       	or	r24, r20
    2750:	8c 93       	st	X, r24
    2752:	73 c0       	rjmp	.+230    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INFREE)
    2754:	29 81       	ldd	r18, Y+1	; 0x01
    2756:	3a 81       	ldd	r19, Y+2	; 0x02
    2758:	c9 01       	movw	r24, r18
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	82 0f       	add	r24, r18
    2760:	93 1f       	adc	r25, r19
    2762:	fc 01       	movw	r30, r24
    2764:	e6 5f       	subi	r30, 0xF6	; 246
    2766:	fd 4f       	sbci	r31, 0xFD	; 253
    2768:	80 81       	ld	r24, Z
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	f9 f4       	brne	.+62     	; 0x27ac <Port_Init+0x628>
			{
				CLR_BIT(DDRE,PinCfgs[i].Pin);
    276e:	a2 e2       	ldi	r26, 0x22	; 34
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e2 e2       	ldi	r30, 0x22	; 34
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	29 81       	ldd	r18, Y+1	; 0x01
    277c:	3a 81       	ldd	r19, Y+2	; 0x02
    277e:	c9 01       	movw	r24, r18
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	82 0f       	add	r24, r18
    2786:	93 1f       	adc	r25, r19
    2788:	fc 01       	movw	r30, r24
    278a:	e7 5f       	subi	r30, 0xF7	; 247
    278c:	fd 4f       	sbci	r31, 0xFD	; 253
    278e:	80 81       	ld	r24, Z
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	02 2e       	mov	r0, r18
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <Port_Init+0x61c>
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	0a 94       	dec	r0
    27a2:	e2 f7       	brpl	.-8      	; 0x279c <Port_Init+0x618>
    27a4:	80 95       	com	r24
    27a6:	84 23       	and	r24, r20
    27a8:	8c 93       	st	X, r24
    27aa:	47 c0       	rjmp	.+142    	; 0x283a <Port_Init+0x6b6>
			}
			else if(PinCfgs[i].Dir==Dio_INPULL)
    27ac:	29 81       	ldd	r18, Y+1	; 0x01
    27ae:	3a 81       	ldd	r19, Y+2	; 0x02
    27b0:	c9 01       	movw	r24, r18
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	82 0f       	add	r24, r18
    27b8:	93 1f       	adc	r25, r19
    27ba:	fc 01       	movw	r30, r24
    27bc:	e6 5f       	subi	r30, 0xF6	; 246
    27be:	fd 4f       	sbci	r31, 0xFD	; 253
    27c0:	80 81       	ld	r24, Z
    27c2:	82 30       	cpi	r24, 0x02	; 2
    27c4:	d1 f5       	brne	.+116    	; 0x283a <Port_Init+0x6b6>
			{
				CLR_BIT(DDRE,PinCfgs[i].Pin);
    27c6:	a2 e2       	ldi	r26, 0x22	; 34
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e2 e2       	ldi	r30, 0x22	; 34
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	29 81       	ldd	r18, Y+1	; 0x01
    27d4:	3a 81       	ldd	r19, Y+2	; 0x02
    27d6:	c9 01       	movw	r24, r18
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	82 0f       	add	r24, r18
    27de:	93 1f       	adc	r25, r19
    27e0:	fc 01       	movw	r30, r24
    27e2:	e7 5f       	subi	r30, 0xF7	; 247
    27e4:	fd 4f       	sbci	r31, 0xFD	; 253
    27e6:	80 81       	ld	r24, Z
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <Port_Init+0x672>
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	2a 95       	dec	r18
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <Port_Init+0x66e>
    27fa:	80 95       	com	r24
    27fc:	84 23       	and	r24, r20
    27fe:	8c 93       	st	X, r24
				SET_BIT(PORTE,PinCfgs[i].Pin);
    2800:	a3 e2       	ldi	r26, 0x23	; 35
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e3 e2       	ldi	r30, 0x23	; 35
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	48 2f       	mov	r20, r24
    280c:	29 81       	ldd	r18, Y+1	; 0x01
    280e:	3a 81       	ldd	r19, Y+2	; 0x02
    2810:	c9 01       	movw	r24, r18
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	82 0f       	add	r24, r18
    2818:	93 1f       	adc	r25, r19
    281a:	fc 01       	movw	r30, r24
    281c:	e7 5f       	subi	r30, 0xF7	; 247
    281e:	fd 4f       	sbci	r31, 0xFD	; 253
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <Port_Init+0x6ae>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <Port_Init+0x6aa>
    2836:	84 2b       	or	r24, r20
    2838:	8c 93       	st	X, r24
extern Pin_CfgType PinCfgs[];

void Port_Init (void)
{
	int i=0;
	for (i=0;i<64;i++)
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	89 83       	std	Y+1, r24	; 0x01
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	80 34       	cpi	r24, 0x40	; 64
    284a:	91 05       	cpc	r25, r1
    284c:	0c f4       	brge	.+2      	; 0x2850 <Port_Init+0x6cc>
    284e:	a5 cc       	rjmp	.-1718   	; 0x219a <Port_Init+0x16>
				SET_BIT(PORTE,PinCfgs[i].Pin);
			}
			break;
		}
	}
}
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <Dio_WriteChannel>:
#include "../../MCAL/DIO/DIO.h"
#include "../../MCAL/PORT/Port.h"


void Dio_WriteChannel(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <Dio_WriteChannel+0x6>
    2864:	00 d0       	rcall	.+0      	; 0x2866 <Dio_WriteChannel+0x8>
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	8a 83       	std	Y+2, r24	; 0x02
    286e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_PortType port=ChannelId/8;
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	86 95       	lsr	r24
    2874:	86 95       	lsr	r24
    2876:	86 95       	lsr	r24
    2878:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3d 83       	std	Y+5, r19	; 0x05
    2882:	2c 83       	std	Y+4, r18	; 0x04
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	82 30       	cpi	r24, 0x02	; 2
    288a:	91 05       	cpc	r25, r1
    288c:	09 f4       	brne	.+2      	; 0x2890 <Dio_WriteChannel+0x32>
    288e:	81 c0       	rjmp	.+258    	; 0x2992 <Dio_WriteChannel+0x134>
    2890:	2c 81       	ldd	r18, Y+4	; 0x04
    2892:	3d 81       	ldd	r19, Y+5	; 0x05
    2894:	23 30       	cpi	r18, 0x03	; 3
    2896:	31 05       	cpc	r19, r1
    2898:	5c f4       	brge	.+22     	; 0x28b0 <Dio_WriteChannel+0x52>
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	9d 81       	ldd	r25, Y+5	; 0x05
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	a1 f0       	breq	.+40     	; 0x28ca <Dio_WriteChannel+0x6c>
    28a2:	2c 81       	ldd	r18, Y+4	; 0x04
    28a4:	3d 81       	ldd	r19, Y+5	; 0x05
    28a6:	21 30       	cpi	r18, 0x01	; 1
    28a8:	31 05       	cpc	r19, r1
    28aa:	09 f4       	brne	.+2      	; 0x28ae <Dio_WriteChannel+0x50>
    28ac:	40 c0       	rjmp	.+128    	; 0x292e <Dio_WriteChannel+0xd0>
    28ae:	06 c1       	rjmp	.+524    	; 0x2abc <Dio_WriteChannel+0x25e>
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <Dio_WriteChannel+0x5e>
    28ba:	9d c0       	rjmp	.+314    	; 0x29f6 <Dio_WriteChannel+0x198>
    28bc:	2c 81       	ldd	r18, Y+4	; 0x04
    28be:	3d 81       	ldd	r19, Y+5	; 0x05
    28c0:	24 30       	cpi	r18, 0x04	; 4
    28c2:	31 05       	cpc	r19, r1
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <Dio_WriteChannel+0x6a>
    28c6:	c9 c0       	rjmp	.+402    	; 0x2a5a <Dio_WriteChannel+0x1fc>
    28c8:	f9 c0       	rjmp	.+498    	; 0x2abc <Dio_WriteChannel+0x25e>
	{
		case Dio_PORTA:
			if (Level)
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	88 23       	and	r24, r24
    28ce:	b9 f0       	breq	.+46     	; 0x28fe <Dio_WriteChannel+0xa0>
			{
				SET_BIT(PORTA,ChannelId%8);
    28d0:	ab e3       	ldi	r26, 0x3B	; 59
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	eb e3       	ldi	r30, 0x3B	; 59
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	48 2f       	mov	r20, r24
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9c 01       	movw	r18, r24
    28e4:	27 70       	andi	r18, 0x07	; 7
    28e6:	30 70       	andi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <Dio_WriteChannel+0x96>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <Dio_WriteChannel+0x92>
    28f8:	84 2b       	or	r24, r20
    28fa:	8c 93       	st	X, r24
    28fc:	df c0       	rjmp	.+446    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			else
			{
				CLR_BIT(PORTA,ChannelId%8);
    28fe:	ab e3       	ldi	r26, 0x3B	; 59
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	eb e3       	ldi	r30, 0x3B	; 59
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	48 2f       	mov	r20, r24
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 01       	movw	r18, r24
    2912:	27 70       	andi	r18, 0x07	; 7
    2914:	30 70       	andi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <Dio_WriteChannel+0xc4>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <Dio_WriteChannel+0xc0>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
    292c:	c7 c0       	rjmp	.+398    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
		break;
		case Dio_PORTB :
			if (Level)
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	88 23       	and	r24, r24
    2932:	b9 f0       	breq	.+46     	; 0x2962 <Dio_WriteChannel+0x104>
			{
				SET_BIT(PORTB,ChannelId%8);
    2934:	a8 e3       	ldi	r26, 0x38	; 56
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e8 e3       	ldi	r30, 0x38	; 56
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	48 2f       	mov	r20, r24
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9c 01       	movw	r18, r24
    2948:	27 70       	andi	r18, 0x07	; 7
    294a:	30 70       	andi	r19, 0x00	; 0
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	02 2e       	mov	r0, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <Dio_WriteChannel+0xfa>
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	0a 94       	dec	r0
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <Dio_WriteChannel+0xf6>
    295c:	84 2b       	or	r24, r20
    295e:	8c 93       	st	X, r24
    2960:	ad c0       	rjmp	.+346    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			else
			{
				CLR_BIT(PORTB,ChannelId%8);
    2962:	a8 e3       	ldi	r26, 0x38	; 56
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	e8 e3       	ldi	r30, 0x38	; 56
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	48 2f       	mov	r20, r24
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9c 01       	movw	r18, r24
    2976:	27 70       	andi	r18, 0x07	; 7
    2978:	30 70       	andi	r19, 0x00	; 0
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	02 2e       	mov	r0, r18
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <Dio_WriteChannel+0x128>
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 94       	dec	r0
    2988:	e2 f7       	brpl	.-8      	; 0x2982 <Dio_WriteChannel+0x124>
    298a:	80 95       	com	r24
    298c:	84 23       	and	r24, r20
    298e:	8c 93       	st	X, r24
    2990:	95 c0       	rjmp	.+298    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
		break;
		case Dio_PORTC:
			if (Level)
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	88 23       	and	r24, r24
    2996:	b9 f0       	breq	.+46     	; 0x29c6 <Dio_WriteChannel+0x168>
			{
				SET_BIT(PORTC,ChannelId%8);
    2998:	a5 e3       	ldi	r26, 0x35	; 53
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e3       	ldi	r30, 0x35	; 53
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	48 2f       	mov	r20, r24
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	88 2f       	mov	r24, r24
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9c 01       	movw	r18, r24
    29ac:	27 70       	andi	r18, 0x07	; 7
    29ae:	30 70       	andi	r19, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	02 2e       	mov	r0, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <Dio_WriteChannel+0x15e>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	0a 94       	dec	r0
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <Dio_WriteChannel+0x15a>
    29c0:	84 2b       	or	r24, r20
    29c2:	8c 93       	st	X, r24
    29c4:	7b c0       	rjmp	.+246    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			else
			{
				CLR_BIT(PORTC,ChannelId%8);
    29c6:	a5 e3       	ldi	r26, 0x35	; 53
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e5 e3       	ldi	r30, 0x35	; 53
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	48 2f       	mov	r20, r24
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9c 01       	movw	r18, r24
    29da:	27 70       	andi	r18, 0x07	; 7
    29dc:	30 70       	andi	r19, 0x00	; 0
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 2e       	mov	r0, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <Dio_WriteChannel+0x18c>
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	0a 94       	dec	r0
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <Dio_WriteChannel+0x188>
    29ee:	80 95       	com	r24
    29f0:	84 23       	and	r24, r20
    29f2:	8c 93       	st	X, r24
    29f4:	63 c0       	rjmp	.+198    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
		break;
		case Dio_PORTD:
			if (Level)
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	88 23       	and	r24, r24
    29fa:	b9 f0       	breq	.+46     	; 0x2a2a <Dio_WriteChannel+0x1cc>
			{
				SET_BIT(PORTD,ChannelId%8);
    29fc:	a2 e3       	ldi	r26, 0x32	; 50
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e2 e3       	ldi	r30, 0x32	; 50
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9c 01       	movw	r18, r24
    2a10:	27 70       	andi	r18, 0x07	; 7
    2a12:	30 70       	andi	r19, 0x00	; 0
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 2e       	mov	r0, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <Dio_WriteChannel+0x1c2>
    2a1c:	88 0f       	add	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	0a 94       	dec	r0
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <Dio_WriteChannel+0x1be>
    2a24:	84 2b       	or	r24, r20
    2a26:	8c 93       	st	X, r24
    2a28:	49 c0       	rjmp	.+146    	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			else
			{
				CLR_BIT(PORTD,ChannelId%8);
    2a2a:	a2 e3       	ldi	r26, 0x32	; 50
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e2 e3       	ldi	r30, 0x32	; 50
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	48 2f       	mov	r20, r24
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9c 01       	movw	r18, r24
    2a3e:	27 70       	andi	r18, 0x07	; 7
    2a40:	30 70       	andi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 2e       	mov	r0, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <Dio_WriteChannel+0x1f0>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	0a 94       	dec	r0
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <Dio_WriteChannel+0x1ec>
    2a52:	80 95       	com	r24
    2a54:	84 23       	and	r24, r20
    2a56:	8c 93       	st	X, r24
    2a58:	31 c0       	rjmp	.+98     	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			break;
		case Dio_PORTE:
			if (Level)
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	88 23       	and	r24, r24
    2a5e:	b9 f0       	breq	.+46     	; 0x2a8e <Dio_WriteChannel+0x230>
			{
				SET_BIT(PORTE,ChannelId%8);
    2a60:	a3 e2       	ldi	r26, 0x23	; 35
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e3 e2       	ldi	r30, 0x23	; 35
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	48 2f       	mov	r20, r24
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	9c 01       	movw	r18, r24
    2a74:	27 70       	andi	r18, 0x07	; 7
    2a76:	30 70       	andi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <Dio_WriteChannel+0x226>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <Dio_WriteChannel+0x222>
    2a88:	84 2b       	or	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	17 c0       	rjmp	.+46     	; 0x2abc <Dio_WriteChannel+0x25e>
			}
			else
			{
				CLR_BIT(PORTE,ChannelId%8);
    2a8e:	a3 e2       	ldi	r26, 0x23	; 35
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e3 e2       	ldi	r30, 0x23	; 35
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	48 2f       	mov	r20, r24
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9c 01       	movw	r18, r24
    2aa2:	27 70       	andi	r18, 0x07	; 7
    2aa4:	30 70       	andi	r19, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	02 2e       	mov	r0, r18
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <Dio_WriteChannel+0x254>
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	0a 94       	dec	r0
    2ab4:	e2 f7       	brpl	.-8      	; 0x2aae <Dio_WriteChannel+0x250>
    2ab6:	80 95       	com	r24
    2ab8:	84 23       	and	r24, r20
    2aba:	8c 93       	st	X, r24
			}
			break;
		}
	

}
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <Dio_FlipChannel>:
void Dio_FlipChannel(Dio_ChannelType ChannelId)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <Dio_FlipChannel+0x6>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <Dio_FlipChannel+0x8>
    2ad4:	0f 92       	push	r0
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	8b 83       	std	Y+3, r24	; 0x03
	Dio_PortType port=ChannelId/8;
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	86 95       	lsr	r24
    2ae0:	86 95       	lsr	r24
    2ae2:	86 95       	lsr	r24
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin=ChannelId%8;
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	87 70       	andi	r24, 0x07	; 7
    2aea:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3d 83       	std	Y+5, r19	; 0x05
    2af4:	2c 83       	std	Y+4, r18	; 0x04
    2af6:	8c 81       	ldd	r24, Y+4	; 0x04
    2af8:	9d 81       	ldd	r25, Y+5	; 0x05
    2afa:	82 30       	cpi	r24, 0x02	; 2
    2afc:	91 05       	cpc	r25, r1
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <Dio_FlipChannel+0x36>
    2b00:	44 c0       	rjmp	.+136    	; 0x2b8a <Dio_FlipChannel+0xbe>
    2b02:	2c 81       	ldd	r18, Y+4	; 0x04
    2b04:	3d 81       	ldd	r19, Y+5	; 0x05
    2b06:	23 30       	cpi	r18, 0x03	; 3
    2b08:	31 05       	cpc	r19, r1
    2b0a:	54 f4       	brge	.+20     	; 0x2b20 <Dio_FlipChannel+0x54>
    2b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	99 f0       	breq	.+38     	; 0x2b3a <Dio_FlipChannel+0x6e>
    2b14:	2c 81       	ldd	r18, Y+4	; 0x04
    2b16:	3d 81       	ldd	r19, Y+5	; 0x05
    2b18:	21 30       	cpi	r18, 0x01	; 1
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	11 f1       	breq	.+68     	; 0x2b62 <Dio_FlipChannel+0x96>
    2b1e:	70 c0       	rjmp	.+224    	; 0x2c00 <Dio_FlipChannel+0x134>
    2b20:	8c 81       	ldd	r24, Y+4	; 0x04
    2b22:	9d 81       	ldd	r25, Y+5	; 0x05
    2b24:	83 30       	cpi	r24, 0x03	; 3
    2b26:	91 05       	cpc	r25, r1
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <Dio_FlipChannel+0x60>
    2b2a:	43 c0       	rjmp	.+134    	; 0x2bb2 <Dio_FlipChannel+0xe6>
    2b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b30:	24 30       	cpi	r18, 0x04	; 4
    2b32:	31 05       	cpc	r19, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <Dio_FlipChannel+0x6c>
    2b36:	51 c0       	rjmp	.+162    	; 0x2bda <Dio_FlipChannel+0x10e>
    2b38:	63 c0       	rjmp	.+198    	; 0x2c00 <Dio_FlipChannel+0x134>
	{
		case Dio_PORTA:
		TOG_BIT(PORTA,pin);
    2b3a:	ab e3       	ldi	r26, 0x3B	; 59
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	eb e3       	ldi	r30, 0x3B	; 59
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	48 2f       	mov	r20, r24
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	02 2e       	mov	r0, r18
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <Dio_FlipChannel+0x8c>
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	0a 94       	dec	r0
    2b5a:	e2 f7       	brpl	.-8      	; 0x2b54 <Dio_FlipChannel+0x88>
    2b5c:	84 27       	eor	r24, r20
    2b5e:	8c 93       	st	X, r24
    2b60:	4f c0       	rjmp	.+158    	; 0x2c00 <Dio_FlipChannel+0x134>
		break;
		case Dio_PORTB :
		TOG_BIT(PORTB,pin);
    2b62:	a8 e3       	ldi	r26, 0x38	; 56
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e8 e3       	ldi	r30, 0x38	; 56
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	48 2f       	mov	r20, r24
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	02 2e       	mov	r0, r18
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <Dio_FlipChannel+0xb4>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	0a 94       	dec	r0
    2b82:	e2 f7       	brpl	.-8      	; 0x2b7c <Dio_FlipChannel+0xb0>
    2b84:	84 27       	eor	r24, r20
    2b86:	8c 93       	st	X, r24
    2b88:	3b c0       	rjmp	.+118    	; 0x2c00 <Dio_FlipChannel+0x134>
		break;
		case Dio_PORTC:
		TOG_BIT(PORTC,pin);
    2b8a:	a5 e3       	ldi	r26, 0x35	; 53
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e5 e3       	ldi	r30, 0x35	; 53
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	48 2f       	mov	r20, r24
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 2e       	mov	r0, r18
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <Dio_FlipChannel+0xdc>
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <Dio_FlipChannel+0xd8>
    2bac:	84 27       	eor	r24, r20
    2bae:	8c 93       	st	X, r24
    2bb0:	27 c0       	rjmp	.+78     	; 0x2c00 <Dio_FlipChannel+0x134>
		break;
		case Dio_PORTD:
		TOG_BIT(PORTD,pin);
    2bb2:	a2 e3       	ldi	r26, 0x32	; 50
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e2 e3       	ldi	r30, 0x32	; 50
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	02 2e       	mov	r0, r18
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <Dio_FlipChannel+0x104>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <Dio_FlipChannel+0x100>
    2bd4:	84 27       	eor	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	13 c0       	rjmp	.+38     	; 0x2c00 <Dio_FlipChannel+0x134>
		break;
		case Dio_PORTE:
		TOG_BIT(PORTE,pin);
    2bda:	a3 e2       	ldi	r26, 0x23	; 35
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e3 e2       	ldi	r30, 0x23	; 35
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	48 2f       	mov	r20, r24
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 2e       	mov	r0, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <Dio_FlipChannel+0x12c>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <Dio_FlipChannel+0x128>
    2bfc:	84 27       	eor	r24, r20
    2bfe:	8c 93       	st	X, r24
		break;
	}
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <Dio_ReadChannel>:

Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <Dio_ReadChannel+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <Dio_ReadChannel+0x8>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <Dio_ReadChannel+0xa>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	8c 83       	std	Y+4, r24	; 0x04
	Dio_PortType port=ChannelId/8;
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	86 95       	lsr	r24
    2c24:	86 95       	lsr	r24
    2c26:	86 95       	lsr	r24
    2c28:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin=ChannelId%8;
    2c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2c:	87 70       	andi	r24, 0x07	; 7
    2c2e:	8a 83       	std	Y+2, r24	; 0x02
	Dio_LevelType Level=STD_LOW;
    2c30:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	3e 83       	std	Y+6, r19	; 0x06
    2c3a:	2d 83       	std	Y+5, r18	; 0x05
    2c3c:	4d 81       	ldd	r20, Y+5	; 0x05
    2c3e:	5e 81       	ldd	r21, Y+6	; 0x06
    2c40:	42 30       	cpi	r20, 0x02	; 2
    2c42:	51 05       	cpc	r21, r1
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <Dio_ReadChannel+0x38>
    2c46:	41 c0       	rjmp	.+130    	; 0x2cca <Dio_ReadChannel+0xba>
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	83 30       	cpi	r24, 0x03	; 3
    2c4e:	91 05       	cpc	r25, r1
    2c50:	5c f4       	brge	.+22     	; 0x2c68 <Dio_ReadChannel+0x58>
    2c52:	2d 81       	ldd	r18, Y+5	; 0x05
    2c54:	3e 81       	ldd	r19, Y+6	; 0x06
    2c56:	21 15       	cp	r18, r1
    2c58:	31 05       	cpc	r19, r1
    2c5a:	99 f0       	breq	.+38     	; 0x2c82 <Dio_ReadChannel+0x72>
    2c5c:	4d 81       	ldd	r20, Y+5	; 0x05
    2c5e:	5e 81       	ldd	r21, Y+6	; 0x06
    2c60:	41 30       	cpi	r20, 0x01	; 1
    2c62:	51 05       	cpc	r21, r1
    2c64:	01 f1       	breq	.+64     	; 0x2ca6 <Dio_ReadChannel+0x96>
    2c66:	66 c0       	rjmp	.+204    	; 0x2d34 <Dio_ReadChannel+0x124>
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	83 30       	cpi	r24, 0x03	; 3
    2c6e:	91 05       	cpc	r25, r1
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <Dio_ReadChannel+0x64>
    2c72:	3d c0       	rjmp	.+122    	; 0x2cee <Dio_ReadChannel+0xde>
    2c74:	2d 81       	ldd	r18, Y+5	; 0x05
    2c76:	3e 81       	ldd	r19, Y+6	; 0x06
    2c78:	24 30       	cpi	r18, 0x04	; 4
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <Dio_ReadChannel+0x70>
    2c7e:	49 c0       	rjmp	.+146    	; 0x2d12 <Dio_ReadChannel+0x102>
    2c80:	59 c0       	rjmp	.+178    	; 0x2d34 <Dio_ReadChannel+0x124>
	{
		case Dio_PORTA:
			Level=GET_BIT(PINA,pin);
    2c82:	e9 e3       	ldi	r30, 0x39	; 57
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a9 01       	movw	r20, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <Dio_ReadChannel+0x8a>
    2c96:	55 95       	asr	r21
    2c98:	47 95       	ror	r20
    2c9a:	8a 95       	dec	r24
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <Dio_ReadChannel+0x86>
    2c9e:	ca 01       	movw	r24, r20
    2ca0:	81 70       	andi	r24, 0x01	; 1
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	47 c0       	rjmp	.+142    	; 0x2d34 <Dio_ReadChannel+0x124>
		break;
		case Dio_PORTB :
			Level=GET_BIT(PINB,pin);
    2ca6:	e6 e3       	ldi	r30, 0x36	; 54
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a9 01       	movw	r20, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <Dio_ReadChannel+0xae>
    2cba:	55 95       	asr	r21
    2cbc:	47 95       	ror	r20
    2cbe:	8a 95       	dec	r24
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <Dio_ReadChannel+0xaa>
    2cc2:	ca 01       	movw	r24, r20
    2cc4:	81 70       	andi	r24, 0x01	; 1
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	35 c0       	rjmp	.+106    	; 0x2d34 <Dio_ReadChannel+0x124>
	
		break;
		case Dio_PORTC:
			Level=GET_BIT(PINC,pin);
    2cca:	e3 e3       	ldi	r30, 0x33	; 51
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	a9 01       	movw	r20, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <Dio_ReadChannel+0xd2>
    2cde:	55 95       	asr	r21
    2ce0:	47 95       	ror	r20
    2ce2:	8a 95       	dec	r24
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <Dio_ReadChannel+0xce>
    2ce6:	ca 01       	movw	r24, r20
    2ce8:	81 70       	andi	r24, 0x01	; 1
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	23 c0       	rjmp	.+70     	; 0x2d34 <Dio_ReadChannel+0x124>
		break;
		case Dio_PORTD:
			Level=GET_BIT(PIND,pin);
    2cee:	e0 e3       	ldi	r30, 0x30	; 48
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a9 01       	movw	r20, r18
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <Dio_ReadChannel+0xf6>
    2d02:	55 95       	asr	r21
    2d04:	47 95       	ror	r20
    2d06:	8a 95       	dec	r24
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <Dio_ReadChannel+0xf2>
    2d0a:	ca 01       	movw	r24, r20
    2d0c:	81 70       	andi	r24, 0x01	; 1
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	11 c0       	rjmp	.+34     	; 0x2d34 <Dio_ReadChannel+0x124>
		break;
		case Dio_PORTE:
			Level=GET_BIT(PINE,pin);
    2d12:	e1 e2       	ldi	r30, 0x21	; 33
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a9 01       	movw	r20, r18
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <Dio_ReadChannel+0x11a>
    2d26:	55 95       	asr	r21
    2d28:	47 95       	ror	r20
    2d2a:	8a 95       	dec	r24
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <Dio_ReadChannel+0x116>
    2d2e:	ca 01       	movw	r24, r20
    2d30:	81 70       	andi	r24, 0x01	; 1
    2d32:	89 83       	std	Y+1, r24	; 0x01
	    break;
	}
	return Level;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d36:	26 96       	adiw	r28, 0x06	; 6
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <UltraSonic_GetReading>:
static volatile u16 flag,t1,t2;

 u16 F_Distance = 0; 

u16 UltraSonic_GetReading(void)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
	return F_Distance ; 
    2d50:	80 91 b7 02 	lds	r24, 0x02B7
    2d54:	90 91 b8 02 	lds	r25, 0x02B8
}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <UltraSonic_Read_Distance>:

void UltraSonic_Read_Distance(void)
{	
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	68 97       	sbiw	r28, 0x18	; 24
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
	if (flag==0)
    2d72:	80 91 b9 02 	lds	r24, 0x02B9
    2d76:	90 91 ba 02 	lds	r25, 0x02BA
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <UltraSonic_Read_Distance+0x22>
    2d7e:	d3 c0       	rjmp	.+422    	; 0x2f26 <UltraSonic_Read_Distance+0x1c8>
	{
		TCNT1=0;
    2d80:	ec e4       	ldi	r30, 0x4C	; 76
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	11 82       	std	Z+1, r1	; 0x01
    2d86:	10 82       	st	Z, r1
		Dio_WriteChannel(TR,STD_HIGH);
    2d88:	8f e1       	ldi	r24, 0x1F	; 31
    2d8a:	61 e0       	ldi	r22, 0x01	; 1
    2d8c:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e2       	ldi	r26, 0x20	; 32
    2d96:	b1 e4       	ldi	r27, 0x41	; 65
    2d98:	8d 8b       	std	Y+21, r24	; 0x15
    2d9a:	9e 8b       	std	Y+22, r25	; 0x16
    2d9c:	af 8b       	std	Y+23, r26	; 0x17
    2d9e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2da0:	6d 89       	ldd	r22, Y+21	; 0x15
    2da2:	7e 89       	ldd	r23, Y+22	; 0x16
    2da4:	8f 89       	ldd	r24, Y+23	; 0x17
    2da6:	98 8d       	ldd	r25, Y+24	; 0x18
    2da8:	2b ea       	ldi	r18, 0xAB	; 171
    2daa:	3a ea       	ldi	r19, 0xAA	; 170
    2dac:	4a ea       	ldi	r20, 0xAA	; 170
    2dae:	50 e4       	ldi	r21, 0x40	; 64
    2db0:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	89 8b       	std	Y+17, r24	; 0x11
    2dba:	9a 8b       	std	Y+18, r25	; 0x12
    2dbc:	ab 8b       	std	Y+19, r26	; 0x13
    2dbe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dc0:	69 89       	ldd	r22, Y+17	; 0x11
    2dc2:	7a 89       	ldd	r23, Y+18	; 0x12
    2dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	1c f4       	brge	.+6      	; 0x2dde <UltraSonic_Read_Distance+0x80>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	88 8b       	std	Y+16, r24	; 0x10
    2ddc:	91 c0       	rjmp	.+290    	; 0x2f00 <UltraSonic_Read_Distance+0x1a2>
	else if (__tmp > 255)
    2dde:	69 89       	ldd	r22, Y+17	; 0x11
    2de0:	7a 89       	ldd	r23, Y+18	; 0x12
    2de2:	8b 89       	ldd	r24, Y+19	; 0x13
    2de4:	9c 89       	ldd	r25, Y+20	; 0x14
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	4f e7       	ldi	r20, 0x7F	; 127
    2dec:	53 e4       	ldi	r21, 0x43	; 67
    2dee:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2df2:	18 16       	cp	r1, r24
    2df4:	0c f0       	brlt	.+2      	; 0x2df8 <UltraSonic_Read_Distance+0x9a>
    2df6:	7b c0       	rjmp	.+246    	; 0x2eee <UltraSonic_Read_Distance+0x190>
	{
		_delay_ms(__us / 1000.0);
    2df8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a e7       	ldi	r20, 0x7A	; 122
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 37 03 	call	0x66e	; 0x66e <__divsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	8c 87       	std	Y+12, r24	; 0x0c
    2e12:	9d 87       	std	Y+13, r25	; 0x0d
    2e14:	ae 87       	std	Y+14, r26	; 0x0e
    2e16:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	55 e4       	ldi	r21, 0x45	; 69
    2e28:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	88 87       	std	Y+8, r24	; 0x08
    2e32:	99 87       	std	Y+9, r25	; 0x09
    2e34:	aa 87       	std	Y+10, r26	; 0x0a
    2e36:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e38:	68 85       	ldd	r22, Y+8	; 0x08
    2e3a:	79 85       	ldd	r23, Y+9	; 0x09
    2e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <UltraSonic_Read_Distance+0xfc>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9f 83       	std	Y+7, r25	; 0x07
    2e56:	8e 83       	std	Y+6, r24	; 0x06
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <UltraSonic_Read_Distance+0x17a>
	else if (__tmp > 65535)
    2e5a:	68 85       	ldd	r22, Y+8	; 0x08
    2e5c:	79 85       	ldd	r23, Y+9	; 0x09
    2e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <UltraSonic_Read_Distance+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e74:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e76:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e78:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9f 83       	std	Y+7, r25	; 0x07
    2e98:	8e 83       	std	Y+6, r24	; 0x06
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <UltraSonic_Read_Distance+0x15c>
    2e9c:	80 e9       	ldi	r24, 0x90	; 144
    2e9e:	91 e0       	ldi	r25, 0x01	; 1
    2ea0:	9d 83       	std	Y+5, r25	; 0x05
    2ea2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <UltraSonic_Read_Distance+0x14a>
    2eac:	9d 83       	std	Y+5, r25	; 0x05
    2eae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9f 83       	std	Y+7, r25	; 0x07
    2eb8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <UltraSonic_Read_Distance+0x13e>
    2ec2:	24 c0       	rjmp	.+72     	; 0x2f0c <UltraSonic_Read_Distance+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	68 85       	ldd	r22, Y+8	; 0x08
    2ec6:	79 85       	ldd	r23, Y+9	; 0x09
    2ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ecc:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9f 83       	std	Y+7, r25	; 0x07
    2ed6:	8e 83       	std	Y+6, r24	; 0x06
    2ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eda:	9f 81       	ldd	r25, Y+7	; 0x07
    2edc:	9b 83       	std	Y+3, r25	; 0x03
    2ede:	8a 83       	std	Y+2, r24	; 0x02
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <UltraSonic_Read_Distance+0x186>
    2ee8:	9b 83       	std	Y+3, r25	; 0x03
    2eea:	8a 83       	std	Y+2, r24	; 0x02
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <UltraSonic_Read_Distance+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eee:	69 89       	ldd	r22, Y+17	; 0x11
    2ef0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef6:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	88 8b       	std	Y+16, r24	; 0x10
    2f00:	88 89       	ldd	r24, Y+16	; 0x10
    2f02:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	8a 95       	dec	r24
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <UltraSonic_Read_Distance+0x1a8>
    2f0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(10);
		Dio_WriteChannel(TR,STD_LOW);
    2f0c:	8f e1       	ldi	r24, 0x1F	; 31
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
		Timer1_ICU_InterruptEnable();
    2f14:	0e 94 2f 0c 	call	0x185e	; 0x185e <Timer1_ICU_InterruptEnable>
		Timer1_ICU_SetCallBack(Func_ICU2);
    2f18:	8c e9       	ldi	r24, 0x9C	; 156
    2f1a:	97 e1       	ldi	r25, 0x17	; 23
    2f1c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <Timer1_ICU_SetCallBack>
		Timer1_InputCaptureEdge(RISING);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	0e 94 10 0c 	call	0x1820	; 0x1820 <Timer1_InputCaptureEdge>
	}
}
    2f26:	68 96       	adiw	r28, 0x18	; 24
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <Func_ICU2>:
void Func_ICU2(void)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <Func_ICU2+0x6>
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	u16 Time=0;
    2f42:	1a 82       	std	Y+2, r1	; 0x02
    2f44:	19 82       	std	Y+1, r1	; 0x01
	
	if (flag==0)
    2f46:	80 91 b9 02 	lds	r24, 0x02B9
    2f4a:	90 91 ba 02 	lds	r25, 0x02BA
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	91 f4       	brne	.+36     	; 0x2f76 <Func_ICU2+0x3e>
	{
		t1=ICR1;
    2f52:	e6 e4       	ldi	r30, 0x46	; 70
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	90 93 bc 02 	sts	0x02BC, r25
    2f5e:	80 93 bb 02 	sts	0x02BB, r24
		Timer1_InputCaptureEdge(FALLING);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	0e 94 10 0c 	call	0x1820	; 0x1820 <Timer1_InputCaptureEdge>
		flag=1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	90 93 ba 02 	sts	0x02BA, r25
    2f70:	80 93 b9 02 	sts	0x02B9, r24
    2f74:	34 c0       	rjmp	.+104    	; 0x2fde <Func_ICU2+0xa6>
	}
	else if (flag==1)
    2f76:	80 91 b9 02 	lds	r24, 0x02B9
    2f7a:	90 91 ba 02 	lds	r25, 0x02BA
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	91 05       	cpc	r25, r1
    2f82:	69 f5       	brne	.+90     	; 0x2fde <Func_ICU2+0xa6>
	{
		t2=ICR1;
    2f84:	e6 e4       	ldi	r30, 0x46	; 70
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	90 93 be 02 	sts	0x02BE, r25
    2f90:	80 93 bd 02 	sts	0x02BD, r24
		Timer1_ICU_InterruptDisable();
    2f94:	0e 94 3d 0c 	call	0x187a	; 0x187a <Timer1_ICU_InterruptDisable>
		Time=t2-t1;
    2f98:	20 91 bd 02 	lds	r18, 0x02BD
    2f9c:	30 91 be 02 	lds	r19, 0x02BE
    2fa0:	80 91 bb 02 	lds	r24, 0x02BB
    2fa4:	90 91 bc 02 	lds	r25, 0x02BC
    2fa8:	a9 01       	movw	r20, r18
    2faa:	48 1b       	sub	r20, r24
    2fac:	59 0b       	sbc	r21, r25
    2fae:	ca 01       	movw	r24, r20
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
		F_Distance =((Time*4)+29)/58;
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	88 0f       	add	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	4d 96       	adiw	r24, 0x1d	; 29
    2fc2:	2a e3       	ldi	r18, 0x3A	; 58
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <__udivmodhi4>
    2fcc:	cb 01       	movw	r24, r22
    2fce:	90 93 b8 02 	sts	0x02B8, r25
    2fd2:	80 93 b7 02 	sts	0x02B7, r24
		flag=0;
    2fd6:	10 92 ba 02 	sts	0x02BA, r1
    2fda:	10 92 b9 02 	sts	0x02B9, r1
	}
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <IR_Digital_Reading>:
#include "Sensor_Cfg.h"



u8 IR_Digital_Reading (Dio_ChannelType channel)
{
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <IR_Digital_Reading+0x6>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Reading = 0;
    2ff4:	19 82       	std	Y+1, r1	; 0x01
	Reading = Dio_ReadChannel(channel);
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Dio_ReadChannel>
    2ffc:	89 83       	std	Y+1, r24	; 0x01
	return Reading ;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <MCP2515_ReadRegister>:
#include "CANTX_inth.h"
#include "CANTX_private.h"
#include "CANTX_registers.h"
u8 buffer[14];
u8 MCP2515_ReadRegister (u8 address)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	00 d0       	rcall	.+0      	; 0x3010 <MCP2515_ReadRegister+0x6>
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	8a 83       	std	Y+2, r24	; 0x02
	u8 readValue=0;
    3016:	19 82       	std	Y+1, r1	; 0x01

	//catch bus
	SPI_ChipSelect(1);
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	
	// read instrunction to can read register MCP
	SPI_MasterTransmit(READ_INSTRUCTION); 
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//sending address register of mcp
	SPI_MasterTransmit(address); 
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//dont care sending data but we recieve data out
	readValue=SPI_MasterTransmit(0);
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
    3030:	89 83       	std	Y+1, r24	; 0x01
	
	//leave bus
	SPI_ChipSelect(0);
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	return readValue;
    3038:	89 81       	ldd	r24, Y+1	; 0x01
}
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <MCP2515_WriteRegister>:
void MCP2515_WriteRegister (u8 address,u8 data )
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	00 d0       	rcall	.+0      	; 0x304a <MCP2515_WriteRegister+0x6>
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	89 83       	std	Y+1, r24	; 0x01
    3050:	6a 83       	std	Y+2, r22	; 0x02
	//catch bus
	SPI_ChipSelect(1);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	// Write instrunction to can write on register MCP
	SPI_MasterTransmit(WRITE_INSTRUCTION);
    3058:	82 e0       	ldi	r24, 0x02	; 2
    305a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//sending address register of mcp
	SPI_MasterTransmit(address);
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//send data to register 
	SPI_MasterTransmit(data);
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//leave bus
	SPI_ChipSelect(0);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <MCP2515_Reset>:
void MCP2515_Reset (void)
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
	//catch bus
	SPI_ChipSelect(1);
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	
	// instrunction reset
	SPI_MasterTransmit(RESET_INSTRUCTION);
    3088:	80 ec       	ldi	r24, 0xC0	; 192
    308a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	
	//leave bus
	SPI_ChipSelect(0);
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>

}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <MCP2515_Modify>:
void MCP2515_Modify (u8 address,u8 mask,u8 data )
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <MCP2515_Modify+0x6>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	6a 83       	std	Y+2, r22	; 0x02
    30aa:	4b 83       	std	Y+3, r20	; 0x03
	//catch bus
	SPI_ChipSelect(1);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	
	// instrunction MODIFY
	SPI_MasterTransmit(MODIFY_INSTRUCTION);
    30b2:	85 e0       	ldi	r24, 0x05	; 5
    30b4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//sending address register of mcp
	SPI_MasterTransmit(address);
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	// send maskable byte
	SPI_MasterTransmit(mask);
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	// send data will be maksed
	SPI_MasterTransmit(data);
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	
	//leave bus
	SPI_ChipSelect(0);
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <MCP2515_SetBitTiming>:
void MCP2515_SetBitTiming (u8 CNF1Value,u8 CNF2Value,u8 CNF3Value)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <MCP2515_SetBitTiming+0x6>
    30e2:	0f 92       	push	r0
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	6a 83       	std	Y+2, r22	; 0x02
    30ec:	4b 83       	std	Y+3, r20	; 0x03
	MCP2515_WriteRegister(CNF1,CNF1Value);
    30ee:	8a e2       	ldi	r24, 0x2A	; 42
    30f0:	69 81       	ldd	r22, Y+1	; 0x01
    30f2:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
	MCP2515_WriteRegister(CNF2,CNF2Value);
    30f6:	89 e2       	ldi	r24, 0x29	; 41
    30f8:	6a 81       	ldd	r22, Y+2	; 0x02
    30fa:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
	MCP2515_WriteRegister(CNF3,CNF3Value);
    30fe:	88 e2       	ldi	r24, 0x28	; 40
    3100:	6b 81       	ldd	r22, Y+3	; 0x03
    3102:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <MCP2515_SetMode>:
void MCP2515_SetMode (u8 mode)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	0f 92       	push	r0
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_Modify(CANCTRL,0xE0,mode<<5);//E for change last 3 bits only and shift 5 to get last 5 bits 
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	98 2f       	mov	r25, r24
    3122:	92 95       	swap	r25
    3124:	99 0f       	add	r25, r25
    3126:	90 7e       	andi	r25, 0xE0	; 224
    3128:	8f e0       	ldi	r24, 0x0F	; 15
    312a:	60 ee       	ldi	r22, 0xE0	; 224
    312c:	49 2f       	mov	r20, r25
    312e:	0e 94 4d 18 	call	0x309a	; 0x309a <MCP2515_Modify>
	
	while ((MCP2515_ReadRegister(CANSTAT)>>5)!=mode);  // to check if we selected right mode its additional
    3132:	8e e0       	ldi	r24, 0x0E	; 14
    3134:	0e 94 05 18 	call	0x300a	; 0x300a <MCP2515_ReadRegister>
    3138:	98 2f       	mov	r25, r24
    313a:	92 95       	swap	r25
    313c:	96 95       	lsr	r25
    313e:	97 70       	andi	r25, 0x07	; 7
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	98 17       	cp	r25, r24
    3144:	b1 f7       	brne	.-20     	; 0x3132 <MCP2515_SetMode+0x20>
	
}
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <MCP2515_TransmiterInit>:
void MCP2515_TransmiterInit(void)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
	//spi master init
	SPI_MasterCan_Init();
    3156:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_MasterCan_Init>
	//Dio_FlipChannel(PINA1);
	//reset  mcp
	MCP2515_Reset();
    315a:	0e 94 3d 18 	call	0x307a	; 0x307a <MCP2515_Reset>
	//Dio_FlipChannel(PINA2);
	//to select config mode and enable clock 
	MCP2515_WriteRegister(CANCTRL,0x84);
    315e:	8f e0       	ldi	r24, 0x0F	; 15
    3160:	64 e8       	ldi	r22, 0x84	; 132
    3162:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>

	while ((MCP2515_ReadRegister(CANSTAT)>>5)!=CFG_MODE);  // to check if we selected right mode its additional
    3166:	8e e0       	ldi	r24, 0x0E	; 14
    3168:	0e 94 05 18 	call	0x300a	; 0x300a <MCP2515_ReadRegister>
    316c:	82 95       	swap	r24
    316e:	86 95       	lsr	r24
    3170:	87 70       	andi	r24, 0x07	; 7
    3172:	84 30       	cpi	r24, 0x04	; 4
    3174:	c1 f7       	brne	.-16     	; 0x3166 <MCP2515_TransmiterInit+0x18>
	//Dio_FlipChannel(PINA2);
	//select bit timing
	MCP2515_SetBitTiming((2<<6),(1<<7)|(6<<3)|(1),(5));   //cnf1-> 0b1000000   01 for 3 TQ,cnf2 
    3176:	80 e8       	ldi	r24, 0x80	; 128
    3178:	61 eb       	ldi	r22, 0xB1	; 177
    317a:	45 e0       	ldi	r20, 0x05	; 5
    317c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <MCP2515_SetBitTiming>
	//Dio_FlipChannel(PINA3);
	MCP2515_SetMode(NORMAL_MODE);
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	0e 94 89 18 	call	0x3112	; 0x3112 <MCP2515_SetMode>
	//Dio_FlipChannel(PINA3);
	//MCP2515_SetMode(0x2); //loop back testing
	//Dio_FlipChannel(PINA4);
}
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <MCP2515_SendMessage>:
void MCP2515_SendMessage(u8 bufId,u32 msgId,u8 dcl,u8*data)
{
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	df 93       	push	r29
    3192:	cf 93       	push	r28
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	29 97       	sbiw	r28, 0x09	; 9
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	8a 83       	std	Y+2, r24	; 0x02
    31a6:	4b 83       	std	Y+3, r20	; 0x03
    31a8:	5c 83       	std	Y+4, r21	; 0x04
    31aa:	6d 83       	std	Y+5, r22	; 0x05
    31ac:	7e 83       	std	Y+6, r23	; 0x06
    31ae:	2f 83       	std	Y+7, r18	; 0x07
    31b0:	19 87       	std	Y+9, r17	; 0x09
    31b2:	08 87       	std	Y+8, r16	; 0x08
	//catch bus
	SPI_ChipSelect(1);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	//write register
	SPI_MasterTransmit(WRITE_INSTRUCTION);
    31ba:	82 e0       	ldi	r24, 0x02	; 2
    31bc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//Send address first address on buffer
	SPI_MasterTransmit(TXB0CTRL);
    31c0:	80 e3       	ldi	r24, 0x30	; 48
    31c2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>

	//setup priority  "mandatory"
	SPI_MasterTransmit(dcl>>6); 
    31c6:	8f 81       	ldd	r24, Y+7	; 0x07
    31c8:	82 95       	swap	r24
    31ca:	86 95       	lsr	r24
    31cc:	86 95       	lsr	r24
    31ce:	83 70       	andi	r24, 0x03	; 3
    31d0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//send msgid
	SPI_MasterTransmit((u8)(msgId>>3)); //last 8 bits
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	9c 81       	ldd	r25, Y+4	; 0x04
    31d8:	ad 81       	ldd	r26, Y+5	; 0x05
    31da:	be 81       	ldd	r27, Y+6	; 0x06
    31dc:	68 94       	set
    31de:	12 f8       	bld	r1, 2
    31e0:	b6 95       	lsr	r27
    31e2:	a7 95       	ror	r26
    31e4:	97 95       	ror	r25
    31e6:	87 95       	ror	r24
    31e8:	16 94       	lsr	r1
    31ea:	d1 f7       	brne	.-12     	; 0x31e0 <MCP2515_SendMessage+0x54>
    31ec:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_MasterTransmit((u8)(msgId<<5)); //first 3 bits
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	82 95       	swap	r24
    31f4:	88 0f       	add	r24, r24
    31f6:	80 7e       	andi	r24, 0xE0	; 224
    31f8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//no there externalID
	SPI_MasterTransmit(0);
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_MasterTransmit(0);
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
    //send dcl
	SPI_MasterTransmit(dcl&0x0f);
    3208:	8f 81       	ldd	r24, Y+7	; 0x07
    320a:	8f 70       	andi	r24, 0x0F	; 15
    320c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	//send data
	for (u8 i=0;i<(dcl&0x0f);i++)
    3210:	19 82       	std	Y+1, r1	; 0x01
    3212:	0e c0       	rjmp	.+28     	; 0x3230 <MCP2515_SendMessage+0xa4>
	{
		SPI_MasterTransmit(data[i]);
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	28 2f       	mov	r18, r24
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	88 85       	ldd	r24, Y+8	; 0x08
    321c:	99 85       	ldd	r25, Y+9	; 0x09
    321e:	fc 01       	movw	r30, r24
    3220:	e2 0f       	add	r30, r18
    3222:	f3 1f       	adc	r31, r19
    3224:	80 81       	ld	r24, Z
    3226:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_MasterTransmit(0);
	SPI_MasterTransmit(0);
    //send dcl
	SPI_MasterTransmit(dcl&0x0f);
	//send data
	for (u8 i=0;i<(dcl&0x0f);i++)
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	8f 5f       	subi	r24, 0xFF	; 255
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	8f 81       	ldd	r24, Y+7	; 0x07
    3238:	88 2f       	mov	r24, r24
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	8f 70       	andi	r24, 0x0F	; 15
    323e:	90 70       	andi	r25, 0x00	; 0
    3240:	28 17       	cp	r18, r24
    3242:	39 07       	cpc	r19, r25
    3244:	3c f3       	brlt	.-50     	; 0x3214 <MCP2515_SendMessage+0x88>
	{
		SPI_MasterTransmit(data[i]);
	}
	//leave bus
	SPI_ChipSelect(0);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	//here you can send anothers buffers.....
	
	SPI_ChipSelect(1);
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	//send request to send for buffer 0
	SPI_MasterTransmit(REQUEST_TO_SEND_B0);
    3252:	81 e8       	ldi	r24, 0x81	; 129
    3254:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_ChipSelect(0);
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	
	
}
    325e:	29 96       	adiw	r28, 0x09	; 9
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <SPI_ChipSelect>:


void SPI_ChipSelect (u8 state)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	89 83       	std	Y+1, r24	; 0x01
	if (state==1)
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	81 30       	cpi	r24, 0x01	; 1
    3284:	29 f4       	brne	.+10     	; 0x3290 <SPI_ChipSelect+0x1c>
	{
		Dio_WriteChannel(PINB0,LOW);
    3286:	88 e0       	ldi	r24, 0x08	; 8
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
    328e:	04 c0       	rjmp	.+8      	; 0x3298 <SPI_ChipSelect+0x24>
	}
	else
	{
		Dio_WriteChannel(PINB0,HIGH);
    3290:	88 e0       	ldi	r24, 0x08	; 8
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	0e 94 2f 14 	call	0x285e	; 0x285e <Dio_WriteChannel>
	}
}
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <MCP2515_SetMask>:

/*receiver */
void MCP2515_SetMask (u8 address,u32 value,u8 extendedFlag)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <MCP2515_SetMask+0x6>
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <MCP2515_SetMask+0x8>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <MCP2515_SetMask+0xa>
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	4a 83       	std	Y+2, r20	; 0x02
    32b2:	5b 83       	std	Y+3, r21	; 0x03
    32b4:	6c 83       	std	Y+4, r22	; 0x04
    32b6:	7d 83       	std	Y+5, r23	; 0x05
    32b8:	2e 83       	std	Y+6, r18	; 0x06
	//catch bus
	SPI_ChipSelect(1);
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	SPI_MasterTransmit(WRITE_INSTRUCTION);
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	
	if (extendedFlag)
    32cc:	8e 81       	ldd	r24, Y+6	; 0x06
    32ce:	88 23       	and	r24, r24
    32d0:	b9 f1       	breq	.+110    	; 0x3340 <MCP2515_SetMask+0xa0>
	{
		SPI_MasterTransmit((u8)(value>>3)); 
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	9b 81       	ldd	r25, Y+3	; 0x03
    32d6:	ac 81       	ldd	r26, Y+4	; 0x04
    32d8:	bd 81       	ldd	r27, Y+5	; 0x05
    32da:	68 94       	set
    32dc:	12 f8       	bld	r1, 2
    32de:	b6 95       	lsr	r27
    32e0:	a7 95       	ror	r26
    32e2:	97 95       	ror	r25
    32e4:	87 95       	ror	r24
    32e6:	16 94       	lsr	r1
    32e8:	d1 f7       	brne	.-12     	; 0x32de <MCP2515_SetMask+0x3e>
    32ea:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
		SPI_MasterTransmit((u8)(value<<5)|(1<<3)|(u8)(value>>27)); //first 3 bits and get last 3 bits  and enable extended
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	28 2f       	mov	r18, r24
    32f2:	22 95       	swap	r18
    32f4:	22 0f       	add	r18, r18
    32f6:	20 7e       	andi	r18, 0xE0	; 224
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	9b 81       	ldd	r25, Y+3	; 0x03
    32fc:	ac 81       	ldd	r26, Y+4	; 0x04
    32fe:	bd 81       	ldd	r27, Y+5	; 0x05
    3300:	07 2e       	mov	r0, r23
    3302:	7b e1       	ldi	r23, 0x1B	; 27
    3304:	b6 95       	lsr	r27
    3306:	a7 95       	ror	r26
    3308:	97 95       	ror	r25
    330a:	87 95       	ror	r24
    330c:	7a 95       	dec	r23
    330e:	d1 f7       	brne	.-12     	; 0x3304 <MCP2515_SetMask+0x64>
    3310:	70 2d       	mov	r23, r0
    3312:	82 2b       	or	r24, r18
    3314:	88 60       	ori	r24, 0x08	; 8
    3316:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
		SPI_MasterTransmit((u8)(value>>19)); 
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	9b 81       	ldd	r25, Y+3	; 0x03
    331e:	ac 81       	ldd	r26, Y+4	; 0x04
    3320:	bd 81       	ldd	r27, Y+5	; 0x05
    3322:	07 2e       	mov	r0, r23
    3324:	73 e1       	ldi	r23, 0x13	; 19
    3326:	b6 95       	lsr	r27
    3328:	a7 95       	ror	r26
    332a:	97 95       	ror	r25
    332c:	87 95       	ror	r24
    332e:	7a 95       	dec	r23
    3330:	d1 f7       	brne	.-12     	; 0x3326 <MCP2515_SetMask+0x86>
    3332:	70 2d       	mov	r23, r0
    3334:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
		SPI_MasterTransmit((u8)(value<<11)); 	
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <MCP2515_SetMask+0xc8>
	}
	else
	{
		SPI_MasterTransmit((u8)(value>>3)); //last 8 bits
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	ac 81       	ldd	r26, Y+4	; 0x04
    3346:	bd 81       	ldd	r27, Y+5	; 0x05
    3348:	68 94       	set
    334a:	12 f8       	bld	r1, 2
    334c:	b6 95       	lsr	r27
    334e:	a7 95       	ror	r26
    3350:	97 95       	ror	r25
    3352:	87 95       	ror	r24
    3354:	16 94       	lsr	r1
    3356:	d1 f7       	brne	.-12     	; 0x334c <MCP2515_SetMask+0xac>
    3358:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
		SPI_MasterTransmit((u8)(value<<5)); //first 3 bits
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	82 95       	swap	r24
    3360:	88 0f       	add	r24, r24
    3362:	80 7e       	andi	r24, 0xE0	; 224
    3364:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	}
	SPI_ChipSelect(0);	
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
}
    336e:	26 96       	adiw	r28, 0x06	; 6
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <MCP2515_receiverInit>:

void MCP2515_receiverInit(void)
{
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	//spi master init
	SPI_MasterCan_Init();
    3388:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_MasterCan_Init>
	//reset  mcp
	//Dio_FlipChannel(PINA0);
	MCP2515_Reset();
    338c:	0e 94 3d 18 	call	0x307a	; 0x307a <MCP2515_Reset>
	//Dio_FlipChannel(PINA5);
	//to select config mode and enable clock
	MCP2515_WriteRegister(CANCTRL,0x84);
    3390:	8f e0       	ldi	r24, 0x0F	; 15
    3392:	64 e8       	ldi	r22, 0x84	; 132
    3394:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
	while ((MCP2515_ReadRegister(CANSTAT)>>5)!=CFG_MODE);  // to check if we selected right mode its additional
    3398:	8e e0       	ldi	r24, 0x0E	; 14
    339a:	0e 94 05 18 	call	0x300a	; 0x300a <MCP2515_ReadRegister>
    339e:	82 95       	swap	r24
    33a0:	86 95       	lsr	r24
    33a2:	87 70       	andi	r24, 0x07	; 7
    33a4:	84 30       	cpi	r24, 0x04	; 4
    33a6:	c1 f7       	brne	.-16     	; 0x3398 <MCP2515_receiverInit+0x18>
	//select bit timing

	MCP2515_SetBitTiming(0x80,0xb1,0x5);   //cnf1-> 0b1000000   01 for 3 TQ,cnf2
    33a8:	80 e8       	ldi	r24, 0x80	; 128
    33aa:	61 eb       	ldi	r22, 0xB1	; 177
    33ac:	45 e0       	ldi	r20, 0x05	; 5
    33ae:	0e 94 6e 18 	call	0x30dc	; 0x30dc <MCP2515_SetBitTiming>
	// set mask all msgs accepted
	MCP2515_SetMask(RXM0SIDH,MASK_RXB0,1);
    33b2:	80 e2       	ldi	r24, 0x20	; 32
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	21 e0       	ldi	r18, 0x01	; 1
    33be:	0e 94 50 19 	call	0x32a0	; 0x32a0 <MCP2515_SetMask>
	MCP2515_SetMask(RXM1SIDH,MASK_RXB1,1);
    33c2:	84 e2       	ldi	r24, 0x24	; 36
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	0e 94 50 19 	call	0x32a0	; 0x32a0 <MCP2515_SetMask>
	//enable interrupt rx
	MCP2515_WriteRegister(CANINTE,1<<0);
    33d2:	8b e2       	ldi	r24, 0x2B	; 43
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
	
	MCP2515_SetMode(NORMAL_MODE);
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	0e 94 89 18 	call	0x3112	; 0x3112 <MCP2515_SetMode>

	//MCP2515_SetMode(0x2);// loop back testing
	//Dio_WriteChannel(PINA3,1);
	
}
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <MCP2515_receiverB0>:

void MCP2515_receiverB0 (void)
{
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	0f 92       	push	r0
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
	//catch bus
	SPI_ChipSelect(1);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	SPI_MasterTransmit(READ_INSTRUCTION);
    33fa:	83 e0       	ldi	r24, 0x03	; 3
    33fc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	SPI_MasterTransmit(RXB0CTRL);
    3400:	80 e6       	ldi	r24, 0x60	; 96
    3402:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
	for (u8 i=0 ;i<14;i++)
    3406:	19 82       	std	Y+1, r1	; 0x01
    3408:	0d c0       	rjmp	.+26     	; 0x3424 <MCP2515_receiverB0+0x3e>
	{
		buffer[i]=SPI_MasterTransmit(0);
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	08 2f       	mov	r16, r24
    340e:	10 e0       	ldi	r17, 0x00	; 0
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <SPI_MasterTransmit>
    3416:	f8 01       	movw	r30, r16
    3418:	ee 52       	subi	r30, 0x2E	; 46
    341a:	fd 4f       	sbci	r31, 0xFD	; 253
    341c:	80 83       	st	Z, r24
{
	//catch bus
	SPI_ChipSelect(1);
	SPI_MasterTransmit(READ_INSTRUCTION);
	SPI_MasterTransmit(RXB0CTRL);
	for (u8 i=0 ;i<14;i++)
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	8f 5f       	subi	r24, 0xFF	; 255
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	8e 30       	cpi	r24, 0x0E	; 14
    3428:	80 f3       	brcs	.-32     	; 0x340a <MCP2515_receiverB0+0x24>
	{
		buffer[i]=SPI_MasterTransmit(0);
	}
	SPI_ChipSelect(0);
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	0e 94 3a 19 	call	0x3274	; 0x3274 <SPI_ChipSelect>
	//clear interrupt rx
	MCP2515_WriteRegister(CANINTF,0);
    3430:	8c e2       	ldi	r24, 0x2C	; 44
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	0e 94 22 18 	call	0x3044	; 0x3044 <MCP2515_WriteRegister>
}
    3438:	0f 90       	pop	r0
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	08 95       	ret

00003444 <Lane_Keep_Control>:
3 -> left direction 
 there is a forth output (ALARM) set when ACC is OFF and it is used to fire
 an alarm only when leaving the lane */

void Lane_Keep_Control (void)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
	if (Acc_flag == 1) // checking system 
    344c:	80 91 c4 02 	lds	r24, 0x02C4
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	c9 f4       	brne	.+50     	; 0x3486 <Lane_Keep_Control+0x42>
	{
		if ((IR_Digital_Reading(RIGHT_IR)) == 1)      // get read from the right side IR 
    3454:	87 e1       	ldi	r24, 0x17	; 23
    3456:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <IR_Digital_Reading>
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	21 f4       	brne	.+8      	; 0x3466 <Lane_Keep_Control+0x22>
		{
			Direction = LEFT ;                 // Move left
    345e:	84 e0       	ldi	r24, 0x04	; 4
    3460:	80 93 80 02 	sts	0x0280, r24
    3464:	0c c0       	rjmp	.+24     	; 0x347e <Lane_Keep_Control+0x3a>
		}
		else if ((IR_Digital_Reading(LEFT_IR)) == 1)  // get read from the left side IR
    3466:	86 e1       	ldi	r24, 0x16	; 22
    3468:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <IR_Digital_Reading>
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	21 f4       	brne	.+8      	; 0x3478 <Lane_Keep_Control+0x34>
		{
			Direction = RIGHT;                 // move right
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	80 93 80 02 	sts	0x0280, r24
    3476:	03 c0       	rjmp	.+6      	; 0x347e <Lane_Keep_Control+0x3a>
		}
		else
		{
			Direction = STRAIGHT ;             // keep straight
    3478:	89 e0       	ldi	r24, 0x09	; 9
    347a:	80 93 80 02 	sts	0x0280, r24
		}
		msgReq_2 = 1 ;
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	80 93 c2 02 	sts	0x02C2, r24
    3484:	20 c0       	rjmp	.+64     	; 0x34c6 <Lane_Keep_Control+0x82>
	}
	else if ((Acc_flag == 0) && (Lane_Keep_flag == 1) )
    3486:	80 91 c4 02 	lds	r24, 0x02C4
    348a:	88 23       	and	r24, r24
    348c:	e1 f4       	brne	.+56     	; 0x34c6 <Lane_Keep_Control+0x82>
    348e:	80 91 c5 02 	lds	r24, 0x02C5
    3492:	81 30       	cpi	r24, 0x01	; 1
    3494:	c1 f4       	brne	.+48     	; 0x34c6 <Lane_Keep_Control+0x82>
	{
		if (IR_Digital_Reading(RIGHT_IR) == 1)
    3496:	87 e1       	ldi	r24, 0x17	; 23
    3498:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <IR_Digital_Reading>
    349c:	81 30       	cpi	r24, 0x01	; 1
    349e:	21 f4       	brne	.+8      	; 0x34a8 <Lane_Keep_Control+0x64>
		{
			Direction = ALARM_ON;                 // fire alarm when leaving lane
    34a0:	85 e0       	ldi	r24, 0x05	; 5
    34a2:	80 93 80 02 	sts	0x0280, r24
    34a6:	0c c0       	rjmp	.+24     	; 0x34c0 <Lane_Keep_Control+0x7c>
		}
		else if (IR_Digital_Reading(LEFT_IR) == 1)
    34a8:	86 e1       	ldi	r24, 0x16	; 22
    34aa:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <IR_Digital_Reading>
    34ae:	81 30       	cpi	r24, 0x01	; 1
    34b0:	21 f4       	brne	.+8      	; 0x34ba <Lane_Keep_Control+0x76>
		{
			Direction = ALARM_ON;                 // fire alarm when leaving lane
    34b2:	85 e0       	ldi	r24, 0x05	; 5
    34b4:	80 93 80 02 	sts	0x0280, r24
    34b8:	03 c0       	rjmp	.+6      	; 0x34c0 <Lane_Keep_Control+0x7c>
		}
		else  
		{
			Direction = ALARM_OFF;
    34ba:	86 e0       	ldi	r24, 0x06	; 6
    34bc:	80 93 80 02 	sts	0x0280, r24
		}
		msgReq_2 = 1 ;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	80 93 c2 02 	sts	0x02C2, r24
	}
}
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <Emergency_Break>:
volatile u8 Accedent_Flag = 0 ;
volatile u8 Emergency_Flag = 0 ;
extern u8 msgReq_3 ;

void Emergency_Break (void)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	00 d0       	rcall	.+0      	; 0x34d2 <Emergency_Break+0x6>
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
		u16 copy_US_Reading = UltraSonic_GetReading();
    34d6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <UltraSonic_GetReading>
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
		if ((copy_US_Reading>=EMER_BREAK_1)&&(copy_US_Reading<EMER_BREAK_2))
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	86 30       	cpi	r24, 0x06	; 6
    34e4:	91 05       	cpc	r25, r1
    34e6:	60 f0       	brcs	.+24     	; 0x3500 <Emergency_Break+0x34>
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	9a 81       	ldd	r25, Y+2	; 0x02
    34ec:	8e 31       	cpi	r24, 0x1E	; 30
    34ee:	91 05       	cpc	r25, r1
    34f0:	38 f4       	brcc	.+14     	; 0x3500 <Emergency_Break+0x34>
		{
			Emergency_Flag = 1 ;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	80 93 c0 02 	sts	0x02C0, r24
			msgReq_3 = 1 ;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	80 93 c3 02 	sts	0x02C3, r24
    34fe:	13 c0       	rjmp	.+38     	; 0x3526 <Emergency_Break+0x5a>
		}
		else if ((copy_US_Reading>=ACCIDENT_LIMIT) && (copy_US_Reading<EMER_BREAK_1))
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	83 30       	cpi	r24, 0x03	; 3
    3506:	91 05       	cpc	r25, r1
    3508:	70 f0       	brcs	.+28     	; 0x3526 <Emergency_Break+0x5a>
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	9a 81       	ldd	r25, Y+2	; 0x02
    350e:	86 30       	cpi	r24, 0x06	; 6
    3510:	91 05       	cpc	r25, r1
    3512:	48 f4       	brcc	.+18     	; 0x3526 <Emergency_Break+0x5a>
		{
			Emergency_Flag = 1 ;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	80 93 c0 02 	sts	0x02C0, r24
			Accedent_Flag = 1 ;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	80 93 bf 02 	sts	0x02BF, r24
			msgReq_3 = 1 ; 
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	80 93 c3 02 	sts	0x02C3, r24
		}
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	08 95       	ret

00003530 <Distance_ReadStart>:
#include "Distance_ReadStart.h"



void Distance_ReadStart (void)
{
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
	 UltraSonic_Read_Distance();
    3538:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <UltraSonic_Read_Distance>
}
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <COM_handle>:
/*buffer CAN */
extern u8 buffer[14];


void COM_handle (void)
{
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62

	//transmit msg
	COM_Tx();
    354a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <COM_Tx>
	// receiver  msg
	COM_Rx ();
    354e:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <COM_Rx>
}
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <COM_Tx>:
void COM_Tx (void)
{
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	df 93       	push	r29
    355e:	cf 93       	push	r28
    3560:	00 d0       	rcall	.+0      	; 0x3562 <COM_Tx+0xa>
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
	u8 emgBreak[2]={Emergency_Flag,Accedent_Flag};
    3566:	80 91 c0 02 	lds	r24, 0x02C0
    356a:	90 91 bf 02 	lds	r25, 0x02BF
    356e:	89 83       	std	Y+1, r24	; 0x01
    3570:	9a 83       	std	Y+2, r25	; 0x02
	if (msgReq_3==1)
    3572:	80 91 c3 02 	lds	r24, 0x02C3
    3576:	81 30       	cpi	r24, 0x01	; 1
    3578:	b1 f4       	brne	.+44     	; 0x35a6 <COM_Tx+0x4e>
	{
		//Dio_WriteChannel(PINA4,STD_HIGH);
		MCP2515_SendMessage(0,3,2,emgBreak);
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	43 e0       	ldi	r20, 0x03	; 3
    357e:	50 e0       	ldi	r21, 0x00	; 0
    3580:	60 e0       	ldi	r22, 0x00	; 0
    3582:	70 e0       	ldi	r23, 0x00	; 0
    3584:	22 e0       	ldi	r18, 0x02	; 2
    3586:	fe 01       	movw	r30, r28
    3588:	31 96       	adiw	r30, 0x01	; 1
    358a:	8f 01       	movw	r16, r30
    358c:	0e 94 c6 18 	call	0x318c	; 0x318c <MCP2515_SendMessage>
		msgReq_3=0;
    3590:	10 92 c3 02 	sts	0x02C3, r1
		Accedent_Flag=0;
    3594:	10 92 bf 02 	sts	0x02BF, r1
		Emergency_Flag=0;
    3598:	10 92 c0 02 	sts	0x02C0, r1
		Acc_flag=0;
    359c:	10 92 c4 02 	sts	0x02C4, r1
		Lane_Keep_flag=0;
    35a0:	10 92 c5 02 	sts	0x02C5, r1
    35a4:	23 c0       	rjmp	.+70     	; 0x35ec <COM_Tx+0x94>
	}
	else if (msgReq_2==1)
    35a6:	80 91 c2 02 	lds	r24, 0x02C2
    35aa:	81 30       	cpi	r24, 0x01	; 1
    35ac:	71 f4       	brne	.+28     	; 0x35ca <COM_Tx+0x72>
	{
		//Dio_WriteChannel(PINA7,STD_HIGH);
		//Dio_FlipChannel(PINA5);
		MCP2515_SendMessage(0,2,1,&Direction);
    35ae:	e0 e8       	ldi	r30, 0x80	; 128
    35b0:	f2 e0       	ldi	r31, 0x02	; 2
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	42 e0       	ldi	r20, 0x02	; 2
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	21 e0       	ldi	r18, 0x01	; 1
    35be:	8f 01       	movw	r16, r30
    35c0:	0e 94 c6 18 	call	0x318c	; 0x318c <MCP2515_SendMessage>
		msgReq_2=0;
    35c4:	10 92 c2 02 	sts	0x02C2, r1
    35c8:	11 c0       	rjmp	.+34     	; 0x35ec <COM_Tx+0x94>
	}
	else if (msgReq_1==1)
    35ca:	80 91 c1 02 	lds	r24, 0x02C1
    35ce:	81 30       	cpi	r24, 0x01	; 1
    35d0:	69 f4       	brne	.+26     	; 0x35ec <COM_Tx+0x94>
	{

		MCP2515_SendMessage(0,1,1,&SpeedToApply);
    35d2:	e7 ec       	ldi	r30, 0xC7	; 199
    35d4:	f2 e0       	ldi	r31, 0x02	; 2
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	41 e0       	ldi	r20, 0x01	; 1
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	21 e0       	ldi	r18, 0x01	; 1
    35e2:	8f 01       	movw	r16, r30
    35e4:	0e 94 c6 18 	call	0x318c	; 0x318c <MCP2515_SendMessage>
		msgReq_1=0;
    35e8:	10 92 c1 02 	sts	0x02C1, r1
	}
}
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    35f8:	08 95       	ret

000035fa <COM_Rx>:

void COM_Rx (void)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	0f 92       	push	r0
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
	 u8 msgId=0;
    3604:	19 82       	std	Y+1, r1	; 0x01
	 // msg1 ->> speed acc
	 // msg2 ->> dir
	 if (Dio_ReadChannel(PINA1)==0)
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	0e 94 08 16 	call	0x2c10	; 0x2c10 <Dio_ReadChannel>
    360c:	88 23       	and	r24, r24
    360e:	89 f5       	brne	.+98     	; 0x3672 <COM_Rx+0x78>
	 {
		 MCP2515_receiverB0();
    3610:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <MCP2515_receiverB0>
		 msgId=(((buffer[2])>>5));
    3614:	80 91 d4 02 	lds	r24, 0x02D4
    3618:	82 95       	swap	r24
    361a:	86 95       	lsr	r24
    361c:	87 70       	andi	r24, 0x07	; 7
    361e:	89 83       	std	Y+1, r24	; 0x01
		 if (msgId==1) // reciev data of acc msg
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	81 30       	cpi	r24, 0x01	; 1
    3624:	a1 f4       	brne	.+40     	; 0x364e <COM_Rx+0x54>
		 {
			 //Dio_WriteChannel(PINA6,STD_HIGH);
			//Dio_FlipChannel(PINA3);
			
              if (buffer[6]==1)
    3626:	80 91 d8 02 	lds	r24, 0x02D8
    362a:	81 30       	cpi	r24, 0x01	; 1
    362c:	41 f4       	brne	.+16     	; 0x363e <COM_Rx+0x44>
			  {
				  Acc_flag=1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	80 93 c4 02 	sts	0x02C4, r24
				  SetSpeed=buffer[7];
    3634:	80 91 d9 02 	lds	r24, 0x02D9
    3638:	80 93 c6 02 	sts	0x02C6, r24
    363c:	06 c0       	rjmp	.+12     	; 0x364a <COM_Rx+0x50>
			  }
			  else if (buffer[6]==0)
    363e:	80 91 d8 02 	lds	r24, 0x02D8
    3642:	88 23       	and	r24, r24
    3644:	11 f4       	brne	.+4      	; 0x364a <COM_Rx+0x50>
			  {
				  Acc_flag=0;
    3646:	10 92 c4 02 	sts	0x02C4, r1
			  }
			  
			 msgId=0;
    364a:	19 82       	std	Y+1, r1	; 0x01
    364c:	12 c0       	rjmp	.+36     	; 0x3672 <COM_Rx+0x78>
		 }
		 else if (msgId==2) //msg lane keep 
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	82 30       	cpi	r24, 0x02	; 2
    3652:	79 f4       	brne	.+30     	; 0x3672 <COM_Rx+0x78>
		 {
			 
                 if (buffer[6]==1)
    3654:	80 91 d8 02 	lds	r24, 0x02D8
    3658:	81 30       	cpi	r24, 0x01	; 1
    365a:	21 f4       	brne	.+8      	; 0x3664 <COM_Rx+0x6a>
				 {
					 Lane_Keep_flag=1;
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	80 93 c5 02 	sts	0x02C5, r24
    3662:	06 c0       	rjmp	.+12     	; 0x3670 <COM_Rx+0x76>
				 }
				 else if (buffer[6]==0)
    3664:	80 91 d8 02 	lds	r24, 0x02D8
    3668:	88 23       	and	r24, r24
    366a:	11 f4       	brne	.+4      	; 0x3670 <COM_Rx+0x76>
				 {
					 Lane_Keep_flag=0;
    366c:	10 92 c5 02 	sts	0x02C5, r1
				 }
			 msgId=0;
    3670:	19 82       	std	Y+1, r1	; 0x01
		 }
	 }
}
    3672:	0f 90       	pop	r0
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <ACC_voidUpdateSpeed>:
// }



void ACC_voidUpdateSpeed(void)
{
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
	 * private_u16ReadDistance
	 * private_u16SetDistance
	 * private_f32SpeedToApply
	 * private_f32Kp*/
		
	if (Acc_flag == 1)
    3682:	80 91 c4 02 	lds	r24, 0x02C4
    3686:	81 30       	cpi	r24, 0x01	; 1
    3688:	09 f0       	breq	.+2      	; 0x368c <ACC_voidUpdateSpeed+0x12>
    368a:	bd c0       	rjmp	.+378    	; 0x3806 <ACC_voidUpdateSpeed+0x18c>
	{		
	private_ReadDistance = UltraSonic_GetReading();
    368c:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <UltraSonic_GetReading>
    3690:	90 93 c9 02 	sts	0x02C9, r25
    3694:	80 93 c8 02 	sts	0x02C8, r24
	private_f32SpeedToApply =  SetSpeed;
    3698:	80 91 c6 02 	lds	r24, 0x02C6
    369c:	88 2f       	mov	r24, r24
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	bc 01       	movw	r22, r24
    36a6:	cd 01       	movw	r24, r26
    36a8:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	80 93 ca 02 	sts	0x02CA, r24
    36b4:	90 93 cb 02 	sts	0x02CB, r25
    36b8:	a0 93 cc 02 	sts	0x02CC, r26
    36bc:	b0 93 cd 02 	sts	0x02CD, r27
	private_s16Error =  private_ReadDistance - private_u16SetDistance;
    36c0:	20 91 c8 02 	lds	r18, 0x02C8
    36c4:	30 91 c9 02 	lds	r19, 0x02C9
    36c8:	80 91 81 02 	lds	r24, 0x0281
    36cc:	90 91 82 02 	lds	r25, 0x0282
    36d0:	a9 01       	movw	r20, r18
    36d2:	48 1b       	sub	r20, r24
    36d4:	59 0b       	sbc	r21, r25
    36d6:	ca 01       	movw	r24, r20
    36d8:	90 93 cf 02 	sts	0x02CF, r25
    36dc:	80 93 ce 02 	sts	0x02CE, r24
	private_f32SpeedToApply += (private_f32Kp * private_s16Error);
    36e0:	80 91 ce 02 	lds	r24, 0x02CE
    36e4:	90 91 cf 02 	lds	r25, 0x02CF
    36e8:	aa 27       	eor	r26, r26
    36ea:	97 fd       	sbrc	r25, 7
    36ec:	a0 95       	com	r26
    36ee:	ba 2f       	mov	r27, r26
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 a3 04 	call	0x946	; 0x946 <__floatsisf>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	20 91 83 02 	lds	r18, 0x0283
    3700:	30 91 84 02 	lds	r19, 0x0284
    3704:	40 91 85 02 	lds	r20, 0x0285
    3708:	50 91 86 02 	lds	r21, 0x0286
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	0e 94 3d 02 	call	0x47a	; 0x47a <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	20 91 ca 02 	lds	r18, 0x02CA
    371c:	30 91 cb 02 	lds	r19, 0x02CB
    3720:	40 91 cc 02 	lds	r20, 0x02CC
    3724:	50 91 cd 02 	lds	r21, 0x02CD
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	0e 94 10 02 	call	0x420	; 0x420 <__addsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	80 93 ca 02 	sts	0x02CA, r24
    3738:	90 93 cb 02 	sts	0x02CB, r25
    373c:	a0 93 cc 02 	sts	0x02CC, r26
    3740:	b0 93 cd 02 	sts	0x02CD, r27
	
	if(private_f32SpeedToApply > SetSpeed)
    3744:	80 91 c6 02 	lds	r24, 0x02C6
    3748:	88 2f       	mov	r24, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	aa 27       	eor	r26, r26
    374e:	97 fd       	sbrc	r25, 7
    3750:	a0 95       	com	r26
    3752:	ba 2f       	mov	r27, r26
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	0e 94 a3 04 	call	0x946	; 0x946 <__floatsisf>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	20 91 ca 02 	lds	r18, 0x02CA
    3764:	30 91 cb 02 	lds	r19, 0x02CB
    3768:	40 91 cc 02 	lds	r20, 0x02CC
    376c:	50 91 cd 02 	lds	r21, 0x02CD
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    3778:	88 23       	and	r24, r24
    377a:	a4 f4       	brge	.+40     	; 0x37a4 <ACC_voidUpdateSpeed+0x12a>
	{
		private_f32SpeedToApply = SetSpeed;
    377c:	80 91 c6 02 	lds	r24, 0x02C6
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	a0 e0       	ldi	r26, 0x00	; 0
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__floatunsisf>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	80 93 ca 02 	sts	0x02CA, r24
    3798:	90 93 cb 02 	sts	0x02CB, r25
    379c:	a0 93 cc 02 	sts	0x02CC, r26
    37a0:	b0 93 cd 02 	sts	0x02CD, r27
	}
	if(private_f32SpeedToApply < MINIMUN_SPEED)
    37a4:	80 91 ca 02 	lds	r24, 0x02CA
    37a8:	90 91 cb 02 	lds	r25, 0x02CB
    37ac:	a0 91 cc 02 	lds	r26, 0x02CC
    37b0:	b0 91 cd 02 	lds	r27, 0x02CD
    37b4:	bc 01       	movw	r22, r24
    37b6:	cd 01       	movw	r24, r26
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 ea       	ldi	r20, 0xA0	; 160
    37be:	51 e4       	ldi	r21, 0x41	; 65
    37c0:	0e 94 43 04 	call	0x886	; 0x886 <__ltsf2>
    37c4:	88 23       	and	r24, r24
    37c6:	64 f4       	brge	.+24     	; 0x37e0 <ACC_voidUpdateSpeed+0x166>
	{
		private_f32SpeedToApply = MINIMUN_SPEED;
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	a0 ea       	ldi	r26, 0xA0	; 160
    37ce:	b1 e4       	ldi	r27, 0x41	; 65
    37d0:	80 93 ca 02 	sts	0x02CA, r24
    37d4:	90 93 cb 02 	sts	0x02CB, r25
    37d8:	a0 93 cc 02 	sts	0x02CC, r26
    37dc:	b0 93 cd 02 	sts	0x02CD, r27
	}
	SpeedToApply = (u8)private_f32SpeedToApply;
    37e0:	80 91 ca 02 	lds	r24, 0x02CA
    37e4:	90 91 cb 02 	lds	r25, 0x02CB
    37e8:	a0 91 cc 02 	lds	r26, 0x02CC
    37ec:	b0 91 cd 02 	lds	r27, 0x02CD
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 67 00 	call	0xce	; 0xce <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	80 93 c7 02 	sts	0x02C7, r24
	msgReq_1 = 1;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	80 93 c1 02 	sts	0x02C1, r24
	}
}
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <vMillisIncrement>:
#include "HAL/MCP/CANTX_inth.h"
#include "APP_LAYER/CAN_Communication/CAN_COMM.h"
#define   GLOBAL_ENABLE    sei
// ISR Callback
void vMillisIncrement(void)
{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
	static u16 u16_MillisCounter=0;
	u16_MillisCounter++;
    3814:	80 91 d0 02 	lds	r24, 0x02D0
    3818:	90 91 d1 02 	lds	r25, 0x02D1
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	90 93 d1 02 	sts	0x02D1, r25
    3822:	80 93 d0 02 	sts	0x02D0, r24
	if (u16_MillisCounter>=TICK_TIME)
    3826:	80 91 d0 02 	lds	r24, 0x02D0
    382a:	90 91 d1 02 	lds	r25, 0x02D1
    382e:	84 31       	cpi	r24, 0x14	; 20
    3830:	91 05       	cpc	r25, r1
    3832:	30 f0       	brcs	.+12     	; 0x3840 <vMillisIncrement+0x34>
	{
		//blocked -> ready if its time
		OS_Task_Handler();
    3834:	0e 94 4d 08 	call	0x109a	; 0x109a <OS_Task_Handler>
		//reset counterl
		u16_MillisCounter=0;
    3838:	10 92 d1 02 	sts	0x02D1, r1
    383c:	10 92 d0 02 	sts	0x02D0, r1
		
	}
}
    3840:	cf 91       	pop	r28
    3842:	df 91       	pop	r29
    3844:	08 95       	ret

00003846 <vInitEcu>:
void vInitEcu(void)
{
    3846:	df 93       	push	r29
    3848:	cf 93       	push	r28
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    TIMER0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_64);
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	63 e0       	ldi	r22, 0x03	; 3
    3852:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TIMER0_Init>
	TIMER0_OC0Mode(OC0_DISCONNECTED);
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <TIMER0_OC0Mode>
	TIMER0_SetStartTime(6);
    385c:	86 e0       	ldi	r24, 0x06	; 6
    385e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <TIMER0_SetStartTime>
	GLOBAL_ENABLE();
    3862:	78 94       	sei
	TIMER0_OVF_Enable();
    3864:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <TIMER0_OVF_Enable>
	TIMER0_OVF_SetCallBack(vMillisIncrement);
    3868:	86 e0       	ldi	r24, 0x06	; 6
    386a:	9c e1       	ldi	r25, 0x1C	; 28
    386c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <TIMER0_OVF_SetCallBack>
	TMR1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_64);
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	63 e0       	ldi	r22, 0x03	; 3
    3874:	0e 94 50 09 	call	0x12a0	; 0x12a0 <TMR1_Init>
	Port_Init();	
    3878:	0e 94 c2 10 	call	0x2184	; 0x2184 <Port_Init>
	
	MCP2515_TransmiterInit();
    387c:	0e 94 a7 18 	call	0x314e	; 0x314e <MCP2515_TransmiterInit>
	
	MCP2515_receiverInit();
    3880:	0e 94 c0 19 	call	0x3380	; 0x3380 <MCP2515_receiverInit>
	
}
    3884:	cf 91       	pop	r28
    3886:	df 91       	pop	r29
    3888:	08 95       	ret

0000388a <InitScheduler>:
void InitScheduler(void)
{
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
	//func working on ms
	
	OS_TaskCreate(Task_DistanceReadStart_80mS,80,BLOCKED,0);
    3892:	8c e2       	ldi	r24, 0x2C	; 44
    3894:	99 e0       	ldi	r25, 0x09	; 9
    3896:	60 e5       	ldi	r22, 0x50	; 80
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	0e 94 c3 07 	call	0xf86	; 0xf86 <OS_TaskCreate>
	OS_TaskCreate(Task_EmerBreak_100mS,100,BLOCKED,20);
    38a2:	85 e3       	ldi	r24, 0x35	; 53
    38a4:	99 e0       	ldi	r25, 0x09	; 9
    38a6:	64 e6       	ldi	r22, 0x64	; 100
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	41 e0       	ldi	r20, 0x01	; 1
    38ac:	24 e1       	ldi	r18, 0x14	; 20
    38ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <OS_TaskCreate>
	OS_TaskCreate(Task_LaneKeep_40mS,40,BLOCKED,0);
    38b2:	83 e2       	ldi	r24, 0x23	; 35
    38b4:	99 e0       	ldi	r25, 0x09	; 9
    38b6:	68 e2       	ldi	r22, 0x28	; 40
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	0e 94 c3 07 	call	0xf86	; 0xf86 <OS_TaskCreate>
	OS_TaskCreate(Task_AccCtrl_120mS,120,BLOCKED,40);
    38c2:	8e e3       	ldi	r24, 0x3E	; 62
    38c4:	99 e0       	ldi	r25, 0x09	; 9
    38c6:	68 e7       	ldi	r22, 0x78	; 120
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	28 e2       	ldi	r18, 0x28	; 40
    38ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <OS_TaskCreate>
	OS_TaskCreate(Task_COM_20ms,20,BLOCKED,0);
    38d2:	87 e4       	ldi	r24, 0x47	; 71
    38d4:	99 e0       	ldi	r25, 0x09	; 9
    38d6:	64 e1       	ldi	r22, 0x14	; 20
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	41 e0       	ldi	r20, 0x01	; 1
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	0e 94 c3 07 	call	0xf86	; 0xf86 <OS_TaskCreate>
	
}
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <main>:


int main(void)
{
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
	vInitEcu();
    38f0:	0e 94 23 1c 	call	0x3846	; 0x3846 <vInitEcu>
	InitScheduler();
    38f4:	0e 94 45 1c 	call	0x388a	; 0x388a <InitScheduler>
	

	while(1)
	{
		OS_TaskExecution();
    38f8:	0e 94 de 08 	call	0x11bc	; 0x11bc <OS_TaskExecution>
    38fc:	fd cf       	rjmp	.-6      	; 0x38f8 <main+0x10>

000038fe <__udivmodhi4>:
    38fe:	aa 1b       	sub	r26, r26
    3900:	bb 1b       	sub	r27, r27
    3902:	51 e1       	ldi	r21, 0x11	; 17
    3904:	07 c0       	rjmp	.+14     	; 0x3914 <__udivmodhi4_ep>

00003906 <__udivmodhi4_loop>:
    3906:	aa 1f       	adc	r26, r26
    3908:	bb 1f       	adc	r27, r27
    390a:	a6 17       	cp	r26, r22
    390c:	b7 07       	cpc	r27, r23
    390e:	10 f0       	brcs	.+4      	; 0x3914 <__udivmodhi4_ep>
    3910:	a6 1b       	sub	r26, r22
    3912:	b7 0b       	sbc	r27, r23

00003914 <__udivmodhi4_ep>:
    3914:	88 1f       	adc	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	5a 95       	dec	r21
    391a:	a9 f7       	brne	.-22     	; 0x3906 <__udivmodhi4_loop>
    391c:	80 95       	com	r24
    391e:	90 95       	com	r25
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	08 95       	ret

00003926 <__udivmodsi4>:
    3926:	a1 e2       	ldi	r26, 0x21	; 33
    3928:	1a 2e       	mov	r1, r26
    392a:	aa 1b       	sub	r26, r26
    392c:	bb 1b       	sub	r27, r27
    392e:	fd 01       	movw	r30, r26
    3930:	0d c0       	rjmp	.+26     	; 0x394c <__udivmodsi4_ep>

00003932 <__udivmodsi4_loop>:
    3932:	aa 1f       	adc	r26, r26
    3934:	bb 1f       	adc	r27, r27
    3936:	ee 1f       	adc	r30, r30
    3938:	ff 1f       	adc	r31, r31
    393a:	a2 17       	cp	r26, r18
    393c:	b3 07       	cpc	r27, r19
    393e:	e4 07       	cpc	r30, r20
    3940:	f5 07       	cpc	r31, r21
    3942:	20 f0       	brcs	.+8      	; 0x394c <__udivmodsi4_ep>
    3944:	a2 1b       	sub	r26, r18
    3946:	b3 0b       	sbc	r27, r19
    3948:	e4 0b       	sbc	r30, r20
    394a:	f5 0b       	sbc	r31, r21

0000394c <__udivmodsi4_ep>:
    394c:	66 1f       	adc	r22, r22
    394e:	77 1f       	adc	r23, r23
    3950:	88 1f       	adc	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	1a 94       	dec	r1
    3956:	69 f7       	brne	.-38     	; 0x3932 <__udivmodsi4_loop>
    3958:	60 95       	com	r22
    395a:	70 95       	com	r23
    395c:	80 95       	com	r24
    395e:	90 95       	com	r25
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	bd 01       	movw	r22, r26
    3966:	cf 01       	movw	r24, r30
    3968:	08 95       	ret

0000396a <__prologue_saves__>:
    396a:	2f 92       	push	r2
    396c:	3f 92       	push	r3
    396e:	4f 92       	push	r4
    3970:	5f 92       	push	r5
    3972:	6f 92       	push	r6
    3974:	7f 92       	push	r7
    3976:	8f 92       	push	r8
    3978:	9f 92       	push	r9
    397a:	af 92       	push	r10
    397c:	bf 92       	push	r11
    397e:	cf 92       	push	r12
    3980:	df 92       	push	r13
    3982:	ef 92       	push	r14
    3984:	ff 92       	push	r15
    3986:	0f 93       	push	r16
    3988:	1f 93       	push	r17
    398a:	cf 93       	push	r28
    398c:	df 93       	push	r29
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	ca 1b       	sub	r28, r26
    3994:	db 0b       	sbc	r29, r27
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	09 94       	ijmp

000039a2 <__epilogue_restores__>:
    39a2:	2a 88       	ldd	r2, Y+18	; 0x12
    39a4:	39 88       	ldd	r3, Y+17	; 0x11
    39a6:	48 88       	ldd	r4, Y+16	; 0x10
    39a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    39b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39b4:	b9 84       	ldd	r11, Y+9	; 0x09
    39b6:	c8 84       	ldd	r12, Y+8	; 0x08
    39b8:	df 80       	ldd	r13, Y+7	; 0x07
    39ba:	ee 80       	ldd	r14, Y+6	; 0x06
    39bc:	fd 80       	ldd	r15, Y+5	; 0x05
    39be:	0c 81       	ldd	r16, Y+4	; 0x04
    39c0:	1b 81       	ldd	r17, Y+3	; 0x03
    39c2:	aa 81       	ldd	r26, Y+2	; 0x02
    39c4:	b9 81       	ldd	r27, Y+1	; 0x01
    39c6:	ce 0f       	add	r28, r30
    39c8:	d1 1d       	adc	r29, r1
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	ed 01       	movw	r28, r26
    39d6:	08 95       	ret

000039d8 <_exit>:
    39d8:	f8 94       	cli

000039da <__stop_program>:
    39da:	ff cf       	rjmp	.-2      	; 0x39da <__stop_program>
